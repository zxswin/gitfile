
========================================Ant Design 前端ui框架的安装========================================
1.安装 Ant Design
npm install ng-zorro-antd --save

2.app.module.ts中引入NgZorroAntdModule模块
import { NgZorroAntdModule, NZ_I18N, zh_CN } from 'ng-zorro-antd';
imports: [
    BrowserModule,
    FormsModule,
    ReactiveFormsModule,
    HttpClientModule,
    CommonModuleModule,
    TextComponentModuleModule,
    BrowserAnimationsModule,
    NgZorroAntdModule,
    RouterModule.forRoot(routes, { 
      //preloadingStrategy: PreloadAllModules 
      preloadingStrategy: PreloadConfigService,
    }),
  ],

3.index.ts文件中引入
import './static/css/public/public.less';
import 'ng-zorro-antd/ng-zorro-antd.min.css'; //引入 Ant Design对应样式
import './main';

注意：其他的svg等资源文件会在webpakc配置中进行自动解析

4.ant-design ui开发环境 样式文件 及 svg等文件的引入问题

app.module.ts中进行对应配置即可

import { NgZorroAntdModule,NZ_ICONS, NZ_I18N, zh_CN } from 'ng-zorro-antd';
import { IconModule } from '@ant-design/icons-angular';
import { registerLocaleData } from '@angular/common';
import zh from '@angular/common/locales/zh';
import { IconDefinition } from '@ant-design/icons-angular';
import * as AllIcons from '@ant-design/icons-angular/icons';

registerLocaleData(zh);

// 全量引入，不推荐
const antDesignIcons = AllIcons as {
  [key: string]: IconDefinition;
};

const icons: IconDefinition[] = Object.keys(antDesignIcons).map(key => antDesignIcons[key]);


@NgModule({
  imports: [
    BrowserModule,
    FormsModule,
    ReactiveFormsModule,
    HttpClientModule,
    CommonModuleModule,
    TextComponentModuleModule,
    BrowserAnimationsModule,
    NgZorroAntdModule,
    IconModule,
    RouterModule.forRoot(routes, { 
      //preloadingStrategy: PreloadAllModules 
      preloadingStrategy: PreloadConfigService,
    }),
  ],
  declarations: [
    componentsList,
    FlyingHeroesPipe,
    UnlessDirective,
    HighlightDirective,
  ],
  bootstrap: [ AppComponent ],
  providers: [
    { provide: LocationStrategy, useClass: HashLocationStrategy },
    { provide: NZ_I18N, useValue: zh_CN } ,   //添加对应的依赖提供商
    { provide: NZ_ICONS, useValue: icons },   //添加对应的依赖提供商
    appCompProviders],
})



========================================按钮和图标========================================
一.Button按钮

nzType -> nzShape -> nzSize -> nzLoading -> disabled
[nzGhost]	幽灵属性，使按钮背景透明	boolean	false
[nzLoading]	设置按钮载入状态	boolean	false
[nzShape]	设置按钮形状，可选值为 circle 或者不设	string	-
[nzSize]	设置按钮大小，可选值为 smalllarge 或者不设	string	default
[nzType]	设置按钮类型，可选值为 primary dashed danger 或者不设	string	-
[nzBlock]	将按钮宽度调整为其父宽度的选项	boolean	false

1.按钮有四种类型：主按钮、次按钮、虚线按钮、危险按钮。主按钮在同一个操作区域最多出现一次。

button(nz-button nzType="primary") 主按钮
button(nz-button nzType="default") 次按钮
button(nz-button nzType="dashed") 虚线按钮
button(nz-button nzType="danger") 危险按钮

2.图标按钮
button(nz-button,nzType="primary",nzShape="circle")
  i(nz-icon,type="search")

button(nz-button,nzType="primary") 
  i(nz-icon type="search")
  | 搜索

button(nz-button,nzType="default",nzShape="circle")
  i(nz-icon,type="search")

button(nz-button,nzType="default") 
  i(nz-icon type="search")
  | 搜索

button(nz-button,nzType="dashed",nzShape="circle")
  i(nz-icon,type="search")

button(nz-button,nzType="dashed") 
  i(nz-icon type="search")
  | 搜索

button(nz-button,nzType="danger",nzShape="circle")
  i(nz-icon,type="search")

button(nz-button,nzType="danger") 
  i(nz-icon type="search")
  | 搜索

3.按钮尺寸
<nz-radio-group [(ngModel)]="size">
  <label nz-radio-button nzValue="large">Large</label>
  <label nz-radio-button nzValue="default">Default</label>
  <label nz-radio-button nzValue="small">Small</label>
</nz-radio-group>
<br>
<br>
<button nz-button [nzSize]="size" nzType="primary">Primary</button>
<button nz-button [nzSize]="size" nzType="default">Default</button>
<button nz-button [nzSize]="size" nzType="dashed">Dashed</button>
<button nz-button [nzSize]="size" nzType="danger">Danger</button>
<br>
<button nz-button nzType="primary" [nzSize]="size" nzShape="circle"><i nz-icon type="download"></i>
</button>
<button nz-button nzType="primary" [nzSize]="size"><i nz-icon type="download"></i>Download</button>
<br>
<nz-button-group [nzSize]="size">
  <button nz-button nzType="primary"><i nz-icon type="left"></i>Backward</button>
  <button nz-button nzType="primary">Forward<i nz-icon type="right"></i></button>
</nz-button-group>

4.按钮不可选中状态
<button nz-button nzType="primary">Primary</button>
<button nz-button nzType="primary" disabled>Primary(disabled)</button>
<br>
<button nz-button nzType="default">Default</button>
<button nz-button nzType="default" disabled>Default(disabled)</button>
<br>
<button nz-button nzType="dashed">Dashed</button>
<button nz-button nzType="dashed" disabled>Dashed(disabled)</button>
<div style="padding: 8px 8px 0px; background: rgb(190, 200, 200);">
  <button nz-button nzGhost>Ghost</button>
  <button nz-button nzGhost disabled>Ghost(disabled)</button>
</div>

5.加载中状态
<button nz-button nzType="primary" nzLoading><i nz-icon type="poweroff"></i>Loading</button>
<button nz-button nzType="primary" nzSize="small" nzLoading>Loading</button>
<br>
<button nz-button nzType="primary"  [nzLoading]="isLoadingOne">Click me!</button>
<button nz-button nzType="primary"  [nzLoading]="isLoadingTwo"><i nz-icon type="poweroff"></i>Click me!</button>
<br>
<button nz-button nzLoading nzShape="circle"></button>
<button nz-button nzLoading nzType="primary" nzShape="circle"></button>

6.多个按钮组合
<button nz-button nzType="primary">primary</button>
<button nz-button nzType="default">secondary</button>
<nz-dropdown>
  <button nz-button nz-dropdown>Actions<i nz-icon type="down"></i></button>
  <ul nz-menu>
    <li nz-menu-item>
      <a>1st item</a>
    </li>
    <li nz-menu-item>
      <a>2nd item</a>
    </li>
    <li nz-menu-item>
      <a>3rd item</a>
    </li>
  </ul>
</nz-dropdown>

7.按钮组合
<h4>Basic</h4>
<nz-button-group>
  <button nz-button>Cancel</button>
  <button nz-button nzType="primary">OK</button>
</nz-button-group>
<nz-button-group>
  <button nz-button nzType="default" disabled>L</button>
  <button nz-button nzType="default" disabled>M</button>
  <button nz-button nzType="default" disabled>R</button>
</nz-button-group>
<nz-button-group>
  <button nz-button nzType="primary" disabled>L</button>
  <button nz-button nzType="default" disabled>M</button>
  <button nz-button nzType="default">M</button>
  <button nz-button nzType="dashed" disabled>R</button>
</nz-button-group>
<h4>With Icon</h4>
<nz-button-group>
  <button nz-button nzType="primary"><i nz-icon type="left"></i> Go back</button>
  <button nz-button nzType="primary">Go forward<i nz-icon type="right"></i></button>
</nz-button-group>
<nz-button-group>
  <button nz-button nzType="primary"><i nz-icon type="cloud"></i></button>
  <button nz-button nzType="primary"><i nz-icon type="cloud-download"></i></button>
</nz-button-group>

h4 {
  margin: 16px 0;
  font-size: 14px;
  line-height: 1;
  font-weight: normal;
}

h4:first-child {
  margin-top: 0;
}

[nz-button] {
  margin-bottom: 12px;
}

nz-button-group {
  margin-bottom: 8px;
  margin-right: 8px;
}

8.幽灵按钮
<div style="background: rgb(190, 200, 200);padding: 26px 16px 16px;">
  <button nz-button nzType="primary" nzGhost>Primary</button>
  <button nz-button nzType="default" nzGhost>Default</button>
  <button nz-button nzType="dashed" nzGhost>Dashed</button>
  <button nz-button nzType="danger" nzGhost>Danger</button>
</div>

[nz-button] {
  margin-right: 8px;
  margin-bottom: 12px;
}


9.Block 按钮
<button nz-button nzType="primary" nzBlock>Primary</button>
<button nz-button nzType="default" nzBlock>Default</button>
<button nz-button nzType="dashed" nzBlock>Dashed</button>
<button nz-button nzType="danger" nzBlock>Danger</button>

[nz-button] {
  margin-bottom: 12px;
}

二.图标的使用
<i nz-icon type="thunderbolt" theme="twotone"></i>
<i nz-icon type="up-circle" theme="twotone"></i>


========================================布局========================================

一.Grid栅格
-整个设计建议区域按照 24 等分的原则进行划分
-你的内容应当放置于col内，并且，只有col可以作为row的直接元素
-栅格系统中的列是指1到24的值来表示其跨越的范围。例如，三个等宽的列可以使用.col-8来创建
-如果一个row中的col总和超过 24，那么多余的col会作为一个整体另起一行排列
-支持Flex 布局是基于 24 栅格来定义每一个『盒子』的宽度，但排版则不拘泥于栅格。

1.基础栅格
使用单一的一组 nz-row 和 nz-col 栅格组件，就可以创建一个基本的栅格系统
[nzSpan]	栅格占位格数，为 0 时相当于 display: none
<div nz-row>
  <div nz-col nzSpan="12">col-12</div>
  <div nz-col nzSpan="12">col-12</div>
</div>
<div nz-row>
  <div nz-col nzSpan="8">col-8</div>
  <div nz-col nzSpan="8">col-8</div>
  <div nz-col nzSpan="8">col-8</div>
</div>
<div nz-row>
  <div nz-col nzSpan="6">col-6</div>
  <div nz-col nzSpan="6">col-6</div>
  <div nz-col nzSpan="6">col-6</div>
  <div nz-col nzSpan="6">col-6</div>
</div>

2.区块间隔
-使用 nz-row 的 nzGutter 属性，我们推荐使用 (16+8n)px 作为栅格间隔 nzGutter="16"
-支持响应式 [nzGutter]="{ xs: 0, sm: 2, md: 4, lg: 8, xl: 16, xxl: 24 }"

<div class="gutter-example">
  <div nz-row nzGutter="16">
    <div nz-col class="gutter-row" nzSpan="6">
      <div class="gutter-box">col-6</div>
    </div>
    <div nz-col class="gutter-row" nzSpan="6">
      <div class="gutter-box">col-6</div>
    </div>
    <div nz-col class="gutter-row" nzSpan="6">
      <div class="gutter-box">col-6</div>
    </div>
    <div nz-col class="gutter-row" nzSpan="6">
      <div class="gutter-box">col-6</div>
    </div>
  </div>
</div>
<div class="gutter-example">
  <div nz-row [nzGutter]="{ xs: 0, sm: 2, md: 4, lg: 8, xl: 16, xxl: 24 }">
    <div nz-col class="gutter-row" nzSpan="6">
      <div class="gutter-box">col-6</div>
    </div>
    <div nz-col class="gutter-row" nzSpan="6">
      <div class="gutter-box">col-6</div>
    </div>
    <div nz-col class="gutter-row" nzSpan="6">
      <div class="gutter-box">col-6</div>
    </div>
    <div nz-col class="gutter-row" nzSpan="6">
      <div class="gutter-box">col-6</div>
    </div>
  </div>
</div>

.gutter-box {
  background: #00A0E9;
  padding: 5px 0;
  color:#fff;
  margin-bottom:10px;
}

3.左右偏移
使用 nzOffset 可以将列向右侧偏。例如，nzOffset="4" 将元素向右侧偏移了 4 个列（column）的宽度。
<div nz-row>
  <div nz-col nzSpan="8">col-8</div>
  <div nz-col nzSpan="8" nzOffset="8">col-8</div>
</div>
<div nz-row>
  <div nz-col nzSpan="6" nzOffset="6">col-6 col-offset-6</div>
  <div nz-col nzSpan="6" nzOffset="6">col-6 col-offset-6</div>
</div>
<div nz-row>
  <div nz-col nzSpan="12" nzOffset="6">col-12 col-offset-6</div>
</div>

4.栅格排序
-使用 nzPush 和 nzPull 类就可以很容易的改变列（column）的顺序
<div nz-row>
  <div nz-col [nzSpan]="18" [nzPush]="18">col-18 col-push-6</div>
  <div nz-col [nzSpan]="6" [nzPull]="6">col-6 col-pull-18</div>
</div>

5.Flex 布局
nzType="flex" nzJustify="start"
水平方向的排列
使用 nzType 定义 flex 布局，其子元素根据不同的值 start,center,end,space-between,space-around
<div>
  <p>sub-element align left</p>
  <div nz-row nzType="flex" nzJustify="start">
    <div nz-col nzSpan="4">col-4</div>
    <div nz-col nzSpan="4">col-4</div>
    <div nz-col nzSpan="4">col-4</div>
    <div nz-col nzSpan="4">col-4</div>
  </div>
  <p>sub-element align center</p>
  <div nz-row nzType="flex" nzJustify="center">
    <div nz-col nzSpan="4">col-4</div>
    <div nz-col nzSpan="4">col-4</div>
    <div nz-col nzSpan="4">col-4</div>
    <div nz-col nzSpan="4">col-4</div>
  </div>
  <p>sub-element align right</p>
  <div nz-row nzType="flex" nzJustify="end">
    <div nz-col nzSpan="4">col-4</div>
    <div nz-col nzSpan="4">col-4</div>
    <div nz-col nzSpan="4">col-4</div>
    <div nz-col nzSpan="4">col-4</div>
  </div>
  <p>sub-element monospaced arrangement</p>
  <div nz-row nzType="flex" nzJustify="space-between">
    <div nz-col nzSpan="4">col-4</div>
    <div nz-col nzSpan="4">col-4</div>
    <div nz-col nzSpan="4">col-4</div>
    <div nz-col nzSpan="4">col-4</div>
  </div>
  <p>sub-element align full</p>
  <div nz-row nzType="flex" nzJustify="space-around">
    <div nz-col nzSpan="4">col-4</div>
    <div nz-col nzSpan="4">col-4</div>
    <div nz-col nzSpan="4">col-4</div>
    <div nz-col nzSpan="4">col-4</div>
  </div>
</div>

6.Flex 对齐
-Flex 子元素垂直对齐
-通过 nzAlign="top" 属性设置生效
<div>
  <p>Align Top</p>
  <div nz-row nzType="flex" nzJustify="center" nzAlign="top">
    <div nz-col nzSpan="4"><p class="height-100">col-4</p></div>
    <div nz-col nzSpan="4"><p class="height-50">col-4</p></div>
    <div nz-col nzSpan="4"><p class="height-120">col-4</p></div>
    <div nz-col nzSpan="4"><p class="height-80">col-4</p></div>
  </div>
  <p>Align Center</p>
  <div nz-row nzType="flex" nzJustify="space-around" nzAlign="middle">
    <div nz-col nzSpan="4"><p class="height-100">col-4</p></div>
    <div nz-col nzSpan="4"><p class="height-50">col-4</p></div>
    <div nz-col nzSpan="4"><p class="height-120">col-4</p></div>
    <div nz-col nzSpan="4"><p class="height-80">col-4</p></div>
  </div>
  <p>Align Bottom</p>
  <div nz-row nzType="flex" nzJustify="space-between" nzAlign="bottom">
    <div nz-col nzSpan="4"><p class="height-100">col-4</p></div>
    <div nz-col nzSpan="4"><p class="height-50">col-4</p></div>
    <div nz-col nzSpan="4"><p class="height-120">col-4</p></div>
    <div nz-col nzSpan="4"><p class="height-80">col-4</p></div>
  </div>
</div>

7.Flex 排序
通过 Flex 布局的 nzOrder 来改变元素的排序。
<div nz-row nzType="flex">
  <div nz-col nzSpan="6" [nzOrder]="4">col-order-1</div>
  <div nz-col nzSpan="6" [nzOrder]="3">col-order-2</div>
  <div nz-col nzSpan="6" [nzOrder]="2">col-order-3</div>
  <div nz-col nzSpan="6" [nzOrder]="1">col-order-4</div>
</div>

8.响应式布局
参照 Bootstrap 的 响应式设计，预设五个响应尺寸：xs sm md lg xl xxl
<div nz-row>
  <div nz-col nzXs="2" nzSm="4" nzMd="6" nzLg="8" nzXl="10">Col</div>
  <div nz-col nzXs="20" nzSm="16" nzMd="12" nzLg="8" nzXl="4">Col</div>
  <div nz-col nzXs="2" nzSm="4" nzMd="6" nzLg="8" nzXl="10">Col</div>
</div>

9.span pull push offset order 属性可以通过内嵌到 nzXs nzSmn zMd nzLg nzXl nzXXl 属性中来使用。
<div nz-row>
  <div nz-col [nzXs]="{ span: 5, offset: 1 }" [nzLg]="{ span: 6, offset: 2 }">Col</div>
  <div nz-col [nzXs]="{ span: 11, offset: 1 }" [nzLg]="{ span: 6, offset: 2 }">Col</div>
  <div nz-col [nzXs]="{ span: 5, offset: 1 }" [nzLg]="{ span: 6, offset: 2 }">Col</div>
</div>

10.API
-[nz-row]
[nzAlign]	flex 布局下的垂直对齐方式：topmiddlebottom	string	top
[nzGutter]	栅格间隔，可以写成像素值或支持响应式的对象写法 { xs: 8, sm: 16, md: 24, lg: 32, xl: 32, xxl: 32 }	number/object	0
[nzJustify]	flex 布局下的水平排列方式：startendcenterspace-aroundspace-between	string	start
[nzType]	布局模式，可选 flex，现代浏览器 下有效	string

-[nz-col]
[nzOffset]	栅格左侧的间隔格数，间隔内不可以有栅格	number	0
[nzOrder]	栅格顺序，flex 布局模式下有效	number	0
[nzPull]	栅格向左移动格数	number	0
[nzPush]	栅格向右移动格数	number	0
[nzSpan]	栅格占位格数，为 0 时相当于 display: none	number	-
[nzXs]	<576px 响应式栅格，可为栅格数或一个包含其他属性的对象	number丨object	-
[nzSm]	≥576px 响应式栅格，可为栅格数或一个包含其他属性的对象	number丨object	-
[nzMd]	≥768px 响应式栅格，可为栅格数或一个包含其他属性的对象	number丨object	-
[nzLg]	≥992px 响应式栅格，可为栅格数或一个包含其他属性的对象	number丨object	-
[nzXl]	≥1200px 响应式栅格，可为栅格数或一个包含其他属性的对象	number丨object	-
[nzXXl]	≥1600px 响应式栅格，可为栅格数或一个包含其他属性的对象	number丨object


二.Layout布局
nz-layout：布局容器，
nz-header：顶部布局，自带默认样式，其下可嵌套任何元素，只能放在 nz-layout 中。
nz-sider：侧边栏，自带默认样式及基本功能，其下可嵌套任何元素，只能放在 nz-layout 中。
nz-content：内容部分，自带默认样式，其下可嵌套任何元素，只能放在 nz-layout 中。
nz-footer：底部布局，自带默认样式，其下可嵌套任何元素，只能放在 nz-layout 中。

1.基本结构(典型页面布局)
<nz-layout>
  <nz-header>Header</nz-header>
  <nz-content>Content</nz-content>
  <nz-footer>Footer</nz-footer>
</nz-layout>

<nz-layout>
  <nz-header>Header</nz-header>
  <nz-layout>
    <nz-sider>Sider</nz-sider>
    <nz-content>Content</nz-content>
  </nz-layout>
  <nz-footer>Footer</nz-footer>
</nz-layout>

<nz-layout>
  <nz-header>Header</nz-header>
  <nz-layout>
    <nz-content>Content</nz-content>
    <nz-sider>Sider</nz-sider>
  </nz-layout>
  <nz-footer>Footer</nz-footer>
</nz-layout>

<nz-layout>
  <nz-sider>Sider</nz-sider>
  <nz-layout>
    <nz-header>Header</nz-header>
    <nz-content>Content</nz-content>
    <nz-footer>Footer</nz-footer>
  </nz-layout>
</nz-layout>

:host {
  text-align: center;
}

:host ::ng-deep .ant-layout-header,
:host ::ng-deep .ant-layout-footer {
  background: #7dbcea;
  color: #fff;
}

:host ::ng-deep .ant-layout-footer {
  line-height: 1.5;
}

:host ::ng-deep .ant-layout-sider {
  background: #3ba0e9;
  color: #fff;
  line-height: 120px;
}

:host ::ng-deep .ant-layout-content {
  background: rgba(16, 142, 233, 1);
  color: #fff;
  min-height: 120px;
  line-height: 120px;
}

:host > ::ng-deep .ant-layout {
  margin-bottom: 48px;
}

:host ::ng-deep .ant-layout:last-child {
  margin: 0;
}

2.上中下布局
<nz-layout class="layout">
  <nz-header>
    <div class="logo"></div>
    <ul nz-menu [nzTheme]="'dark'" [nzMode]="'horizontal'" style="line-height: 64px;">
      <li nz-menu-item>nav 1</li>
      <li nz-menu-item>nav 2</li>
      <li nz-menu-item>nav 3</li>
    </ul>
  </nz-header>
  <nz-content style="padding:0 50px;">
    <nz-breadcrumb style="margin:16px 0;">
      <nz-breadcrumb-item>Home</nz-breadcrumb-item>
      <nz-breadcrumb-item>List</nz-breadcrumb-item>
      <nz-breadcrumb-item>App</nz-breadcrumb-item>
    </nz-breadcrumb>
    <div style="background:#fff; padding: 24px; min-height: 280px;">Content</div>
  </nz-content>
  <nz-footer style="text-align: center;">Ant Design ©2017 Implement By Angular</nz-footer>
</nz-layout>

.logo {
  width: 120px;
  height: 31px;
  background: rgba(255,255,255,.2);
  margin: 16px 24px 16px 0;
  float: left;
}

3.顶部-侧边布局-通栏
<nz-layout class="layout">
  <nz-header>
    <div class="logo"></div>
    <ul nz-menu [nzTheme]="'dark'" [nzMode]="'horizontal'" style="line-height: 64px;">
      <li nz-menu-item>nav 1</li>
      <li nz-menu-item>nav 2</li>
      <li nz-menu-item>nav 3</li>
    </ul>
  </nz-header>
  <nz-layout>
    <nz-sider [nzWidth]="200" style="background:#fff">
      <ul nz-menu [nzMode]="'inline'" style="height:100%">
        <li nz-submenu>
          <span title><i nz-icon type="user"></i>subnav 1</span>
          <ul>
            <li nz-menu-item>option1</li>
            <li nz-menu-item>option2</li>
            <li nz-menu-item>option3</li>
            <li nz-menu-item>option4</li>
          </ul>
        </li>
        <li nz-submenu>
          <span title><i nz-icon type="laptop"></i>subnav 2</span>
          <ul>
            <li nz-menu-item>option5</li>
            <li nz-menu-item>option6</li>
            <li nz-menu-item>option7</li>
            <li nz-menu-item>option8</li>
          </ul>
        </li>
        <li nz-submenu>
          <span title><i nz-icon type="notification"></i>subnav 3</span>
          <ul>
            <li nz-menu-item>option9</li>
            <li nz-menu-item>option10</li>
            <li nz-menu-item>option11</li>
            <li nz-menu-item>option12</li>
          </ul>
        </li>
      </ul>
    </nz-sider>
    <nz-layout style="padding:0 24px 24px">
      <nz-breadcrumb style="margin:16px 0;">
        <nz-breadcrumb-item>Home</nz-breadcrumb-item>
        <nz-breadcrumb-item>List</nz-breadcrumb-item>
        <nz-breadcrumb-item>App</nz-breadcrumb-item>
      </nz-breadcrumb>
      <nz-content style="background:#fff; padding: 24px; min-height: 280px;">Content</nz-content>
    </nz-layout>
  </nz-layout>
</nz-layout>

.logo {
  width: 120px;
  height: 31px;
  background: rgba(255,255,255,.2);
  margin: 16px 28px 16px 0;
  float: left;
}

4.顶部-侧边布局
<nz-layout class="layout">
  <nz-header>
    <div class="logo"></div>
    <ul nz-menu [nzTheme]="'dark'" [nzMode]="'horizontal'" style="line-height: 64px;">
      <li nz-menu-item>nav 1</li>
      <li nz-menu-item>nav 2</li>
      <li nz-menu-item>nav 3</li>
    </ul>
  </nz-header>
  <nz-content style="padding:0 50px;">
    <nz-breadcrumb style="margin:16px 0;">
      <nz-breadcrumb-item>Home</nz-breadcrumb-item>
      <nz-breadcrumb-item>List</nz-breadcrumb-item>
      <nz-breadcrumb-item>App</nz-breadcrumb-item>
    </nz-breadcrumb>
    <nz-layout style="padding:24px 0; background: #fff">
      <nz-sider [nzWidth]="200" style="background:#fff">
        <ul nz-menu [nzMode]="'inline'" style="height:100%">
          <li nz-submenu>
            <span title><i nz-icon type="user"></i>subnav 1</span>
            <ul>
              <li nz-menu-item>option1</li>
              <li nz-menu-item>option2</li>
              <li nz-menu-item>option3</li>
              <li nz-menu-item>option4</li>
            </ul>
          </li>
          <li nz-submenu>
            <span title><i nz-icon type="laptop"></i>subnav 2</span>
            <ul>
              <li nz-menu-item>option5</li>
              <li nz-menu-item>option6</li>
              <li nz-menu-item>option7</li>
              <li nz-menu-item>option8</li>
            </ul>
          </li>
          <li nz-submenu>
            <span title><i nz-icon type="notification"></i>subnav 3</span>
            <ul>
              <li nz-menu-item>option9</li>
              <li nz-menu-item>option10</li>
              <li nz-menu-item>option11</li>
              <li nz-menu-item>option12</li>
            </ul>
          </li>
        </ul>
      </nz-sider>
      <nz-content style="padding: 0 24px; min-height: 280px;">Content</nz-content>
    </nz-layout>
    <nz-footer style="text-align: center;">Ant Design ©2017 Implement By Angular</nz-footer>
  </nz-content>
</nz-layout>

.logo {
  width: 120px;
  height: 31px;
  background: rgba(255,255,255,.2);
  margin: 16px 28px 16px 0;
  float: left;
}

5.侧边布局
<nz-layout>
  <nz-sider nzCollapsible [(nzCollapsed)]="isCollapsed" [nzWidth]="width" [nzReverseArrow]="isReverseArrow">
    <div class="logo">
    </div>
    <ul nz-menu [nzTheme]="'dark'" [nzMode]="'inline'" [nzInlineCollapsed]="isCollapsed">
      <li nz-submenu>
        <span title><i nz-icon type="user"></i><span class="nav-text">User</span></span>
        <ul>
          <li nz-menu-item>Tom</li>
          <li nz-menu-item>Bill</li>
          <li nz-menu-item>Alex</li>
        </ul>
      </li>
      <li nz-submenu>
        <span title><i nz-icon type="team"></i><span class="nav-text">Team</span></span>
        <ul>
          <li nz-menu-item>Team 1</li>
          <li nz-menu-item>Team 2</li>
        </ul>
      </li>
      <li nz-menu-item><span><i nz-icon type="file"></i><span class="nav-text">File</span></span></li>
    </ul>
  </nz-sider>
  <nz-layout>
    <nz-header style="background: #fff; padding:0;"></nz-header>
    <nz-content style="margin:0 16px;">
      <nz-breadcrumb style="margin:16px 0;">
        <nz-breadcrumb-item>User</nz-breadcrumb-item>
        <nz-breadcrumb-item>Bill</nz-breadcrumb-item>
      </nz-breadcrumb>
      <div style="padding:24px; background: #fff; min-height: 360px;">Bill is a cat.</div>
    </nz-content>
    <nz-footer style="text-align: center;">Ant Design ©2017 Implement By Angular</nz-footer>
  </nz-layout>
</nz-layout>

:host ::ng-deep .logo {
  height: 32px;
  background: rgba(255, 255, 255, .2);
  margin: 16px;
}

6.自定义触发器
要使用自定义触发器，可以设置 nzTrigger={null} 来隐藏默认设定。
<nz-layout>
  <nz-sider nzCollapsible [(nzCollapsed)]="isCollapsed" [nzTrigger]="triggerTemplate">
    <div class="logo">
    </div>
    <ul nz-menu [nzTheme]="'dark'" [nzMode]="'inline'" [nzInlineCollapsed]="isCollapsed">
      <li nz-submenu>
        <span title><i nz-icon type="user"></i><span class="nav-text">User</span></span>
        <ul>
          <li nz-menu-item>Tom</li>
          <li nz-menu-item>Bill</li>
          <li nz-menu-item>Alex</li>
        </ul>
      </li>
      <li nz-submenu>
        <span title><i nz-icon type="team"></i><span class="nav-text">Team</span></span>
        <ul>
          <li nz-menu-item>Team 1</li>
          <li nz-menu-item>Team 2</li>
        </ul>
      </li>
      <li nz-menu-item><span><i nz-icon type="file"></i><span class="nav-text">File</span></span></li>
    </ul>
  </nz-sider>
  <nz-layout>
    <nz-header style="background: #fff; padding:0;">
      <i class="trigger" nz-icon [type]="isCollapsed?'menu-unfold':'menu-fold'" (click)="isCollapsed=!isCollapsed"></i>
    </nz-header>
    <nz-content style="margin:0 16px;">
      <nz-breadcrumb style="margin:16px 0;">
        <nz-breadcrumb-item>User</nz-breadcrumb-item>
        <nz-breadcrumb-item>Bill</nz-breadcrumb-item>
      </nz-breadcrumb>
      <div style="padding:24px; background: #fff; min-height: 360px;">Bill is a cat.</div>
    </nz-content>
    <nz-footer style="text-align: center;">Ant Design ©2017 Implement By Angular</nz-footer>
  </nz-layout>
</nz-layout>

:host ::ng-deep .trigger {
  font-size: 18px;
  line-height: 64px;
  padding: 0 24px;
  cursor: pointer;
  transition: color .3s;
}

:host ::ng-deep .trigger:hover {
  color: #1890ff;
}

:host ::ng-deep .logo {
  height: 32px;
  background: rgba(255, 255, 255, .2);
  margin: 16px;
}

7.响应式布局
<nz-layout>
  <nz-sider nzCollapsible [(nzCollapsed)]="isCollapsed" [nzBreakpoint]="'lg'">
    <div class="logo">
    </div>
    <ul nz-menu [nzTheme]="'dark'" [nzMode]="'inline'" [nzInlineCollapsed]="isCollapsed">
      <li nz-menu-item><span><i nz-icon type="user"></i><span class="nav-text">nav 1</span></span></li>
      <li nz-menu-item><span><i nz-icon type="video-camera"></i><span class="nav-text">nav 2</span></span>
      </li>
      <li nz-menu-item><span><i nz-icon type="upload"></i><span class="nav-text">nav 3</span></span></li>
      <li nz-menu-item><span><i nz-icon type="user"></i><span class="nav-text">nav 4</span></span></li>
    </ul>
  </nz-sider>
  <nz-layout>
    <nz-header style="background: #fff; padding:0;"></nz-header>
    <nz-content style="margin:24px 16px 0;">
      <div style="padding:24px; background: #fff; min-height: 360px;">Content</div>
    </nz-content>
    <nz-footer style="text-align: center;">Ant Design ©2017 Implement By Angular</nz-footer>
  </nz-layout>
</nz-layout>

:host ::ng-deep .logo {
  height: 32px;
  background: rgba(255,255,255,.2);
  margin: 16px;
}


8.固定头部
<nz-layout class="layout">
  <nz-header style="position:fixed; width:100%">
    <div class="logo"></div>
    <ul nz-menu [nzTheme]="'dark'" [nzMode]="'horizontal'" style="line-height: 64px;">
      <li nz-menu-item>nav 1</li>
      <li nz-menu-item>nav 2</li>
      <li nz-menu-item>nav 3</li>
    </ul>
  </nz-header>
  <nz-content style="padding:0 50px;margin-top:64px;">
    <nz-breadcrumb style="margin:16px 0;">
      <nz-breadcrumb-item>Home</nz-breadcrumb-item>
      <nz-breadcrumb-item>List</nz-breadcrumb-item>
      <nz-breadcrumb-item>App</nz-breadcrumb-item>
    </nz-breadcrumb>
    <div style="background:#fff; padding: 24px; min-height: 380px;">Content</div>
  </nz-content>
  <nz-footer style="text-align: center;">Ant Design ©2017 Implement By Angular</nz-footer>
</nz-layout>

.logo {
  width: 120px;
  height: 31px;
  background: rgba(255,255,255,.2);
  margin: 16px 24px 16px 0;
  float: left;
}

9.固定侧边栏
<nz-layout>
  <nz-sider style="overflow: auto; height: 100vh; position: fixed; left: 0">
    <div class="logo">
    </div>
    <ul nz-menu [nzTheme]="'dark'" [nzMode]="'inline'">
      <li nz-menu-item><span><i nz-icon type="file"></i><span class="nav-text">nav 1</span></span></li>
      <li nz-menu-item><span><i nz-icon type="video-camera"></i><span class="nav-text">nav 2</span></span></li>
      <li nz-menu-item><span><i nz-icon type="upload"></i><span class="nav-text">nav 3</span></span></li>
      <li nz-menu-item><span><i nz-icon type="bar-chart"></i><span class="nav-text">nav 4</span></span></li>
      <li nz-menu-item><span><i nz-icon type="cloud-o"></i><span class="nav-text">nav 5</span></span></li>
      <li nz-menu-item><span><i nz-icon type="appstore-o"></i><span class="nav-text">nav 6</span></span></li>
      <li nz-menu-item><span><i nz-icon type="team"></i><span class="nav-text">nav 7</span></span></li>
      <li nz-menu-item><span><i nz-icon type="shop"></i><span class="nav-text">nav 8</span></span></li>
    </ul>
  </nz-sider>
  <nz-layout style="margin-left: 200">
    <nz-header style="background: #fff; padding:0;"></nz-header>
    <nz-content style="margin:24px 16px 0;overflow: initial">
    <div style="padding: 24px; background: #fff; text-align: center">
      <br />
      p Really
      <br />...<br />...<br />...<br />
      p long
      <br />...<br />...<br />...<br />...<br />...<br />...
      <br />...<br />...<br />...<br />...<br />...<br />...
      <br />...<br />...<br />...<br />...<br />...<br />...
      <br />...<br />...<br />...<br />...<br />...<br />...
      <br />...<br />...<br />...<br />...<br />...<br />...
      <br />...<br />...<br />...<br />...<br />...<br />...
      <br />...<br />...<br />...<br />...<br />...<br />
      content
    </div>
    </nz-content>
    <nz-footer style="text-align: center;">Ant Design ©2017 Implement By Angular</nz-footer>
  </nz-layout>
</nz-layout>

.logo {
  height: 32px;
  background: rgba(255,255,255,.2);
  margin: 16px;
}

10.API
nz-sider 侧边栏。
[nzBreakpoint]	触发响应式布局的断点	Enum { 'xs', 'sm', 'md', 'lg', 'xl', 'xxl' }	-
[nzCollapsed]	当前收起状态	boolean	-
[nzCollapsedWidth]	收缩宽度，设置为 0 会出现特殊 trigger	number	64
[nzCollapsible]	是否可收起	boolean	false
[nzCollapsed]	当前收起状态，可双向绑定	boolean	false
[nzReverseArrow]	翻转折叠提示箭头的方向，当 Sider 在右边时可以使用	boolean	false
[nzTrigger]	自定义 trigger，设置为 null 时隐藏 trigger	string丨TemplateRef<void>	-
[nzWidth]	宽度	number丨string	200
(nzCollapsedChange)	展开-收起时的回调函数	EventEmitter<boolean>	-

breakpoint width 响应式断点宽度
{
  xs: '480px',
  sm: '768px',
  md: '992px',
  lg: '1200px',
  xl: '1600px',
  xxl: '1600px'
}


========================================导航========================================
一.Affix固钉
将页面元素钉在可视范围

1.最简单的用法
<nz-affix>
  <button nz-button [nzType]="'primary'">
    <span>Affix top</span>
  </button>
</nz-affix>
<br>
<nz-affix nzOffsetBottom="0">
  <button nz-button [nzType]="'primary'">
    <span>Affix bottom</span>
  </button>
</nz-affix>

2.固定状态改变的回调,可以获得是否固定的状态。
<nz-affix [nzOffsetTop]="120" (nzChange)="onChange($event)">
  <button nz-button>
    <span>120px to affix top</span>
  </button>
</nz-affix>

onChange(status: boolean) {
  console.log('status',status);
}

3.滚动容器
用 nzTarget 设置 nz-affix 需要监听其滚动事件的元素，默认为 window。
<div class="scrollable-container" #target>
  <div class="background">
    <nz-affix [nzTarget]="target" id="affix-container-target">
      <button nz-button [nzType]="'primary'">
          <span>Fixed at the top of container</span>
      </button>
    </nz-affix>
  </div>
</div>

:host ::ng-deep .scrollable-container {
  height: 100px;
  overflow-y: scroll;
}

:host ::ng-deep .background {
  padding-top: 60px;
  height: 300px;
  background-image: url(//zos.alipayobjects.com/rmsportal/RmjwQiJorKyobvI.jpg);
}

4.API
nz-affix 内的元素不要使用绝对定位，如需要绝对定位的效果，可以直接设置 nz-affix 为绝对定位：
[nzOffsetBottom]	距离窗口底部达到指定偏移量后触发	number	
[nzOffsetTop]	距离窗口顶部达到指定偏移量后触发	number	
[nzTarget]	设置 nz-affix 需要监听其滚动事件的元素，值为一个返回对应 DOM 元素的函数	HTMLElement	window
(nzChange)	固定状态改变时触发的回调函数	EventEmitter<boolean>	无

二.Breadcrumb面包屑
1.基本用法
<nz-breadcrumb>
  <nz-breadcrumb-item>Home</nz-breadcrumb-item>
  <nz-breadcrumb-item><a>Application List</a></nz-breadcrumb-item>
  <nz-breadcrumb-item>An Application</nz-breadcrumb-item>
</nz-breadcrumb>

2.带有图标的 图标放在文字前面。
<nz-breadcrumb>
  <nz-breadcrumb-item><i nz-icon type="home"></i></nz-breadcrumb-item>
  <nz-breadcrumb-item><a><i nz-icon type="user"></i><span>Application List</span></a></nz-breadcrumb-item>
  <nz-breadcrumb-item>Application</nz-breadcrumb-item>
</nz-breadcrumb>

3.路由和 RouterLink 进行结合使用。
<nz-breadcrumb>
  <nz-breadcrumb-item><a [routerLink]="'/login'">Home</a></nz-breadcrumb-item>
  <nz-breadcrumb-item>Breadcrumb</nz-breadcrumb-item>
</nz-breadcrumb>

4.自动生成 通过配置 router.data 自动生成面包屑。

5.分隔符 使用 nzSeparator 可以自定义分隔符。
<h4>String</h4>
  <nz-breadcrumb nzSeparator=">">
    <nz-breadcrumb-item>Home</nz-breadcrumb-item>
    <nz-breadcrumb-item><a>Application List</a></nz-breadcrumb-item>
    <nz-breadcrumb-item>An Application</nz-breadcrumb-item>
  </nz-breadcrumb>
  <br>
  <h4>TemplateRef</h4>
  <nz-breadcrumb [nzSeparator]="iconTemplate">
    <nz-breadcrumb-item>Home</nz-breadcrumb-item>
    <nz-breadcrumb-item><a>Application List</a></nz-breadcrumb-item>
    <nz-breadcrumb-item>An Application</nz-breadcrumb-item>
  </nz-breadcrumb>
<ng-template #iconTemplate><i nz-icon type="arrow-right"></i></ng-template>

6.API
[nzSeparator]	分隔符自定义	string丨TemplateRef<void>		'/'
[nzAutoGenerate]	自动生成 Breadcrumb	boolean		false

使用 [nzAutoGenerate] 时，需要在路由类中定义 data:
{
  path: '/path',
  component: SomeComponent,
  data: {
    breadcrumb: 'Display Name'
  }
}


三.Dropdown下拉菜单
1.基本 最简单的下拉菜单。
<nz-dropdown>
  <a nz-dropdown> Hover me <i nz-icon type="down"></i></a>
  <ul nz-menu nzSelectable>
    <li nz-menu-item>
      <a>1st menu item</a>
    </li>
    <li nz-menu-item>
      <a>2nd menu item</a>
    </li>
    <li nz-menu-item>
      <a>3rd menu item</a>
    </li>
  </ul>
</nz-dropdown>

2.支持 6 个弹出位置。
<div>
  <nz-dropdown [nzPlacement]="'bottomLeft'">
    <button nz-button nz-dropdown>bottomLeft</button>
    <ul nz-menu>
      <li nz-menu-item>
        <a>1st menu item length</a>
      </li>
      <li nz-menu-item>
        <a>2nd menu item length</a>
      </li>
      <li nz-menu-item>
        <a>3rd menu item length</a>
      </li>
    </ul>
  </nz-dropdown>
  <nz-dropdown [nzPlacement]="'bottomCenter'">
    <button nz-button nz-dropdown>bottomCenter</button>
    <ul nz-menu>
      <li nz-menu-item>
        <a>1st menu item length</a>
      </li>
      <li nz-menu-item>
        <a>2nd menu item length</a>
      </li>
      <li nz-menu-item>
        <a>3rd menu item length</a>
      </li>
    </ul>
  </nz-dropdown>
  <nz-dropdown [nzPlacement]="'bottomRight'">
    <button nz-button nz-dropdown>bottomRight</button>
    <ul nz-menu>
      <li nz-menu-item>
        <a>1st menu item length</a>
      </li>
      <li nz-menu-item>
        <a>2nd menu item length</a>
      </li>
      <li nz-menu-item>
        <a>3rd menu item length</a>
      </li>
    </ul>
  </nz-dropdown>
  <nz-dropdown [nzPlacement]="'topLeft'">
    <button nz-button nz-dropdown>topLeft</button>
    <ul nz-menu>
      <li nz-menu-item>
        <a>1st menu item length</a>
      </li>
      <li nz-menu-item>
        <a>2nd menu item length</a>
      </li>
      <li nz-menu-item>
        <a>3rd menu item length</a>
      </li>
    </ul>
  </nz-dropdown>
  <nz-dropdown [nzPlacement]="'topCenter'">
    <button nz-button nz-dropdown>topCenter</button>
    <ul nz-menu>
      <li nz-menu-item>
        <a>1st menu item length</a>
      </li>
      <li nz-menu-item>
        <a>2nd menu item length</a>
      </li>
      <li nz-menu-item>
        <a>3rd menu item length</a>
      </li>
    </ul>
  </nz-dropdown>
  <nz-dropdown [nzPlacement]="'topRight'">
    <button nz-button nz-dropdown>topRight</button>
    <ul nz-menu>
      <li nz-menu-item>
        <a>1st menu item length</a>
      </li>
      <li nz-menu-item>
        <a>2nd menu item length</a>
      </li>
      <li nz-menu-item>
        <a>3rd menu item length</a>
      </li>
    </ul>
  </nz-dropdown>
</div>

:host ::ng-deep .ant-btn {
  margin-right: 8px;
  margin-bottom: 8px;
}

3.分割线和不可用菜单项。
<nz-dropdown>
  <a nz-dropdown>Hover me <i nz-icon type="down"></i></a>
  <ul nz-menu>
    <li nz-menu-item>
      <a>1st menu item</a>
    </li>
    <li nz-menu-item>
      <a>2nd menu item</a>
    </li>
    <li nz-menu-divider></li>
    <li nz-menu-item nzDisabled>3rd menu item（disabled）</li>
  </ul>
</nz-dropdown>

4.触发事件
点击菜单项后会触发事件，用户可以自由添加各种事件进行不同的操作。
<nz-dropdown>
  <a nz-dropdown>Hover me, Click menu item <i nz-icon type="down"></i>
  </a>
  <ul nz-menu>
    <li nz-menu-item (click)="log('1st menu item')">1st menu item</li>
    <li nz-menu-item (click)="log('2nd menu item')">2nd menu item</li>
    <li nz-menu-item (click)="log('3rd menu item')">3rd menu item</li>
  </ul>
</nz-dropdown>

log(data: string): void {
  console.log(data);
}

6.多级菜单
传入的菜单里有多个层级。
<nz-dropdown (nzVisibleChange)="change($event)">
  <a nz-dropdown>Cascading menu <i nz-icon type="down"></i></a>
  <ul nz-menu>
    <li nz-menu-item>1st menu item</li>
    <li nz-menu-item>2nd menu item</li>
    <li nz-submenu>
      <span title>sub menu</span>
      <ul>
        <li nz-menu-item>3rd menu item</li>
        <li nz-menu-item>4th menu item</li>
      </ul>
    </li>
    <li nz-submenu nzDisabled>
      <span title>disabled sub menu</span>
      <ul>
        <li nz-menu-item>3rd menu item</li>
        <li nz-menu-item>4th menu item</li>
      </ul>
    </li>
  </ul>
</nz-dropdown>

change(value: boolean): void {
  console.log(value);  //鼠标移进来是true 移出去是false
}

7.右键菜单
在区域内任意右击触发。
<div style="background: rgb(190, 200, 200); padding: 32px;text-align: center" (contextmenu)="contextMenu($event,template)">
  <ng-template #template>
    <ul nz-menu nzInDropDown (nzClick)="close($event)">
      <li nz-menu-item>1st menu item</li>
      <li nz-menu-item>2nd menu item</li>
      <li nz-menu-item nzDisabled>disabled menu item</li>
      <li nz-submenu>
        <span title>sub menu</span>
        <ul>
          <li nz-menu-item>3rd menu item</li>
          <li nz-menu-item>4th menu item</li>
        </ul>
      </li>
      <li nz-submenu nzDisabled>
        <span title>disabled sub menu</span>
        <ul>
          <li nz-menu-item>3rd menu item</li>
          <li nz-menu-item>4th menu item</li>
        </ul>
      </li>
    </ul>
  </ng-template>
  <span style="color:#fff;font-size: 14px;">Context Menu</span>
</div>

import { Component, TemplateRef, ViewChild } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';

private dropdown: NzDropdownContextComponent;

contextMenu($event: MouseEvent, template: TemplateRef<void>): void {
  this.dropdown = this.nzDropdownService.create($event, template);
}

close(e: NzMenuItemDirective): void {
  console.log(e);
  this.dropdown.close();
}

constructor(private nzDropdownService: NzDropdownService) {

}

8.触发方式
默认是移入触发菜单，可以点击触发。
<nz-dropdown [nzTrigger]="'click'">
  <a nz-dropdown>Click me <i nz-icon type="down"></i></a>
  <ul nz-menu>
    <li nz-menu-item>1st menu item</li>
    <li nz-menu-item>2nd menu item</li>
    <li nz-menu-divider></li>
    <li nz-menu-item nzDisabled>disabled menu item</li>
    <li nz-submenu>
      <span title>sub menu</span>
      <ul>
        <li nz-menu-item>3rd menu item</li>
        <li nz-menu-item>4th menu item</li>
      </ul>
    </li>
    <li nz-submenu nzDisabled>
      <span title>disabled sub menu</span>
      <ul>
        <li nz-menu-item>3rd menu item</li>
        <li nz-menu-item>4th menu item</li>
      </ul>
    </li>
  </ul>
</nz-dropdown>

9.带下拉框的按钮
左边是按钮，右边是额外的相关功能菜单。
<div style="height: 28px;">
  <nz-dropdown-button (nzClick)="log()"> DropDown
    <ul nz-menu>
      <li nz-menu-item>1st menu item</li>
      <li nz-menu-item>2nd menu item</li>
      <li nz-submenu>
        <span title>sub menu</span>
        <ul>
          <li nz-menu-item>3rd menu item</li>
          <li nz-menu-item>4th menu item</li>
        </ul>
      </li>
    </ul>
  </nz-dropdown-button>
  <nz-dropdown-button nzDisabled> DropDown
    <ul nz-menu>
      <li nz-menu-item>
        <a>1st menu item</a>
      </li>
      <li nz-menu-item>
        <a>2nd menu item</a>
      </li>
      <li nz-menu-item>
        <a>3rd menu item</a>
      </li>
    </ul>
  </nz-dropdown-button>
  <nz-dropdown>
    <button nz-button nz-dropdown><span>Button</span> <i nz-icon type="down"></i></button>
    <ul nz-menu>
      <li nz-menu-item>
        <a>1st menu item</a>
      </li>
      <li nz-menu-item>
        <a>2nd menu item</a>
      </li>
      <li nz-menu-item>
        <a>3rd menu item</a>
      </li>
    </ul>
  </nz-dropdown>
</div>

nz-dropdown-button {
  margin-right: 8px;
}

log(): void {
  console.log('click dropdown button');
}

10.菜单隐藏方式
默认是点击关闭菜单，可以关闭此功能。

<nz-dropdown [nzClickHide]="false" [(nzVisible)]="visible">
  <a nz-dropdown>Hover me <i nz-icon type="down"></i></a>
  <ul nz-menu>
    <li nz-menu-item>Clicking me will not close the menu.</li>
    <li nz-menu-item>Clicking me will not close the menu also.</li>
    <li nz-menu-item (click)="visible = false">Clicking me will close the menu</li>
  </ul>
</nz-dropdown>

visible = false;
  
11.API
需要在触发下拉菜单的元素上加入 [nz-dropdown] 标记用于定位元素位置
[nzDisabled]	菜单是否禁用	boolean	-
[nzPlacement]	菜单弹出位置：bottomLeft ｜ bottomCenter ｜ bottomRight ｜ topLeft ｜ topCenter ｜ topRight	String	bottomLeft
[nzTrigger]	触发下拉的行为	click丨hover	hover
[nzClickHide]	点击后是否隐藏菜单	boolean	true
[nzVisible]	菜单是否显示，可双向绑定	boolean	-
(nzVisibleChange)	菜单显示状态改变时调用，参数为 nzVisible	EventEmitter<boolean>

nz-dropdown-button
[nzDisabled]	菜单是否禁用	boolean	-
[nzPlacement]	菜单弹出位置：bottomLeft ｜ bottomCenter ｜ bottomRight ｜ topLeft ｜ topCenter ｜ topRight	String	bottomLeft
[nzSize]	按钮大小，和 nz-button 一致	string	'default'
[nzType]	按钮类型，和 nz-button 一致	string	'default'
[nzTrigger]	触发下拉的行为	click丨hover	hover
[nzClickHide]	点击后是否隐藏菜单	boolean	true
[nzVisible]	菜单是否显示	boolean	-
(nzVisibleChange)	菜单显示状态改变时调用，参数为 nzVisible	EventEmitter<boolean>	-
(nzClick)	点击左侧按钮的回调	EventEmitter<MouseEvent>	-

NzDropdownService
create	创建右键菜单	($event:MouseEvent, template:TemplateRef<void>)	NzDropdownContextComponent
close	关闭右键菜单		

四.Menu导航菜单
1.顶部导航 水平的顶部导航菜单。
<ul nz-menu [nzMode]="'horizontal'">
  <li nz-menu-item><i nz-icon type="mail"></i> Navigation One</li>
  <li nz-menu-item nzDisabled><i nz-icon type="appstore"></i> Navigation Two</li>
  <li nz-submenu>
    <span title><i nz-icon type="setting"></i> Navigation Three - Submenu</span>
    <ul>
      <li nz-menu-group>
        <span title>Item 1</span>
        <ul>
          <li nz-menu-item>Option 1</li>
          <li nz-menu-item>Option 2</li>
        </ul>
      </li>
      <li nz-menu-group>
        <span title>Item 2</span>
        <ul>
          <li nz-menu-item>Option 3</li>
          <li nz-menu-item>Option 4</li>
          <li nz-submenu>
            <span title>Sub Menu</span>
            <ul>
              <li nz-menu-item nzDisabled>Option 5</li>
              <li nz-menu-item>Option 6</li>
            </ul>
          </li>
          <li nz-submenu nzDisabled>
            <span title>Disabled Sub Menu</span>
            <ul>
              <li nz-menu-item>Option 5</li>
              <li nz-menu-item>Option 6</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li nz-menu-item>
    <a href="https://ng.ant.design" target="_blank" rel="noopener noreferrer">Navigation Four - Link</a>
  </li>
</ul>

2.内嵌菜单
垂直菜单，子菜单内嵌在菜单区域。
<ul nz-menu [nzMode]="'inline'" style="width: 240px;">
  <li nz-submenu>
    <span title><i nz-icon type="mail"></i> Navigation One</span>
    <ul>
      <li nz-menu-group>
        <span title>Item 1</span>
        <ul>
          <li nz-menu-item>Option 1</li>
          <li nz-menu-item>Option 2</li>
        </ul>
      </li>
      <li nz-menu-group>
        <span title>Item 2</span>
        <ul>
          <li nz-menu-item>Option 3</li>
          <li nz-menu-item>Option 4</li>
        </ul>
      </li>
    </ul>
  </li>
  <li nz-submenu>
    <span title><i nz-icon type="appstore"></i> Navigation Two</span>
    <ul>
      <li nz-menu-item>Option 5</li>
      <li nz-menu-item>Option 6</li>
      <li nz-submenu>
        <span title>Submenu</span>
        <ul>
          <li nz-menu-item>Option 7</li>
          <li nz-menu-item>Option 8</li>
          <li nz-submenu>
            <span title>Submenu</span>
            <ul>
              <li nz-menu-item>Option 9</li>
              <li nz-menu-item>Option 10</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li nz-submenu>
    <span title><i nz-icon type="setting"></i> Navigation Three</span>
    <ul>
      <li nz-menu-item>Option 11</li>
      <li nz-menu-item>Option 12</li>
      <li nz-menu-item>Option 13</li>
    </ul>
  </li>
</ul>

3.缩起内嵌菜单
内嵌菜单可以被缩起/展开。

<div style="width: 240px;">
  <button nz-button [nzType]="'primary'" (click)="toggleCollapsed()" style="margin-bottom: 10px;">
    <i nz-icon [type]="isCollapsed?'menu-unfold':'menu-fold'"></i>
  </button>
  <ul nz-menu [nzMode]="'inline'" nzTheme='dark' [nzInlineCollapsed]="isCollapsed">
    <li nz-menu-item nz-tooltip nzPlacement="right" [nzTitle]="isCollapsed ? 'Navigation One' : ''">
      <span title>
        <i nz-icon type="mail"></i>
        <span>Navigation One</span>
      </span>
    </li>
    <li nz-submenu>
      <span title>
        <i nz-icon type="appstore"></i>
        <span>Navigation Two</span>
      </span>
      <ul>
        <li nz-menu-item>Option 5</li>
        <li nz-menu-item>Option 6</li>
        <li nz-submenu>
          <span title>Submenu</span>
          <ul>
            <li nz-menu-item>Option 7</li>
            <li nz-menu-item>Option 8</li>
          </ul>
        </li>
      </ul>
    </li>
    <li nz-submenu>
      <span title>
        <i nz-icon type="setting"></i>
        <span>Navigation Three</span>
      </span>
      <ul>
        <li nz-menu-item>Option 9</li>
        <li nz-menu-item>Option 10</li>
        <li nz-menu-item>Option 11</li>
      </ul>
    </li>
  </ul>
</div>

isCollapsed = false;

toggleCollapsed(): void {
  this.isCollapsed = !this.isCollapsed;
}

4.只展开当前父级菜单
点击菜单，收起其他展开的所有菜单，保持菜单聚焦简洁。
<ul nz-menu [nzMode]="'inline'" style="width: 240px;">
  <li nz-submenu [(nzOpen)]="openMap.sub1" (nzOpenChange)="openHandler('sub1')">
    <span title><i nz-icon type="mail"></i> Navigation One</span>
    <ul>
      <li nz-menu-group>
        <span title>Item 1</span>
        <ul>
          <li nz-menu-item>Option 1</li>
          <li nz-menu-item>Option 2</li>
        </ul>
      </li>
      <li nz-menu-group>
        <span title>Item 2</span>
        <ul>
          <li nz-menu-item>Option 3</li>
          <li nz-menu-item>Option 4</li>
        </ul>
      </li>
    </ul>
  </li>
  <li nz-submenu [(nzOpen)]="openMap.sub2" (nzOpenChange)="openHandler('sub2')">
    <span title><i nz-icon type="appstore"></i> Navigation Two</span>
    <ul>
      <li nz-menu-item>Option 5</li>
      <li nz-menu-item>Option 6</li>
      <li nz-submenu>
        <span title>Submenu</span>
        <ul>
          <li nz-menu-item>Option 7</li>
          <li nz-menu-item>Option 8</li>
        </ul>
      </li>
    </ul>
  </li>
  <li nz-submenu [(nzOpen)]="openMap.sub3" (nzOpenChange)="openHandler('sub3')">
    <span title><i nz-icon type="setting"></i> Navigation Three</span>
    <ul>
      <li nz-menu-item>Option 9</li>
      <li nz-menu-item>Option 10</li>
      <li nz-menu-item>Option 11</li>
    </ul>
  </li>
</ul>

openMap = {
  sub1: true,
  sub2: false,
  sub3: false
};

openHandler(value: string): void {
  for (const key in this.openMap) {
    if (key !== value) {
      this.openMap[ key ] = false;
    }
  }
}

5.垂直菜单
子菜单是弹出的形式。
<ul nz-menu [nzMode]="'vertical'" style="width: 240px;">
  <li nz-submenu>
    <span title><i nz-icon type="mail"></i> Navigation One</span>
    <ul>
      <li nz-menu-group>
        <span title>Item 1</span>
        <ul>
          <li nz-menu-item>Option 1</li>
          <li nz-menu-item>Option 2</li>
        </ul>
      </li>
      <li nz-menu-group>
        <span title>Item 2</span>
        <ul>
          <li nz-menu-item>Option 3</li>
          <li nz-menu-item>Option 4</li>
        </ul>
      </li>
    </ul>
  </li>
  <li nz-submenu (nzOpenChange)="change($event)">
    <span title><i nz-icon type="appstore"></i> Navigation Two</span>
    <ul>
      <li nz-menu-item>Option 5</li>
      <li nz-menu-item>Option 6</li>
      <li nz-submenu>
        <span title>Submenu</span>
        <ul>
          <li nz-menu-item>Option 7</li>
          <li nz-menu-item>Option 8</li>
        </ul>
      </li>
    </ul>
  </li>
  <li nz-submenu>
    <span title><i nz-icon type="setting"></i> Navigation Three</span>
    <ul>
      <li nz-menu-item>Option 9</li>
      <li nz-menu-item>Option 10</li>
      <li nz-menu-item>Option 11</li>
    </ul>
  </li>
</ul>

change(value: boolean): void {
  console.log(value);
}

6.主题
内建了两套主题 light|dark，默认 light。
<nz-switch [(ngModel)]="theme">
  <span checked>Dark</span>
  <span unchecked>Light</span>
</nz-switch>
<br>
<br>
<ul nz-menu [nzMode]="'inline'" style="width: 240px;" [nzTheme]="theme?'dark':'light'">
  <li nz-submenu nzOpen>
    <span title><i nz-icon type="mail"></i> Navigation One</span>
    <ul>
      <li nz-menu-group>
        <span title>Item 1</span>
        <ul>
          <li nz-menu-item>Option 1</li>
          <li nz-menu-item>Option 2</li>
        </ul>
      </li>
      <li nz-menu-group>
        <span title>Item 2</span>
        <ul>
          <li nz-menu-item>Option 3</li>
          <li nz-menu-item>Option 4</li>
        </ul>
      </li>
    </ul>
  </li>
  <li nz-submenu>
    <span title><i nz-icon type="appstore"></i> Navigation Two</span>
    <ul>
      <li nz-menu-item>Option 5</li>
      <li nz-menu-item>Option 6</li>
      <li nz-submenu>
        <span title>Submenu</span>
        <ul>
          <li nz-menu-item>Option 7</li>
          <li nz-menu-item>Option 8</li>
        </ul>
      </li>
    </ul>
  </li>
  <li nz-submenu>
    <span title><i nz-icon type="setting"></i> Navigation Three</span>
    <ul>
      <li nz-menu-item>Option 9</li>
      <li nz-menu-item>Option 10</li>
      <li nz-menu-item>Option 11</li>
    </ul>
  </li>
</ul>

theme = true;

7.切换菜单类型
展示动态切换模式。
<nz-switch [(ngModel)]="mode">
</nz-switch>
span Change Mode
<nz-divider nzType="vertical"></nz-divider>
<nz-switch [(ngModel)]="dark">
</nz-switch>
span Change Theme
<br>
<br>
<ul nz-menu [nzMode]="mode?'vertical':'inline'" [nzTheme]="dark?'dark':'light'" style="width: 240px;">
  <li nz-submenu>
    <span title><i nz-icon type="mail"></i> Navigation One</span>
    <ul>
      <li nz-menu-group>
        <span title>Item 1</span>
        <ul>
          <li nz-menu-item>Option 1</li>
          <li nz-menu-item>Option 2</li>
        </ul>
      </li>
      <li nz-menu-group>
        <span title>Item 2</span>
        <ul>
          <li nz-menu-item>Option 3</li>
          <li nz-menu-item>Option 4</li>
        </ul>
      </li>
    </ul>
  </li>
  <li nz-submenu>
    <span title><i nz-icon type="appstore"></i> Navigation Two</span>
    <ul>
      <li nz-menu-item>Option 5</li>
      <li nz-menu-item>Option 6</li>
      <li nz-submenu>
        <span title>Submenu</span>
        <ul>
          <li nz-menu-item>Option 7</li>
          <li nz-menu-item>Option 8</li>
        </ul>
      </li>
    </ul>
  </li>
  <li nz-submenu>
    <span title><i nz-icon type="setting"></i> Navigation Three</span>
    <ul>
      <li nz-menu-item>Option 9</li>
      <li nz-menu-item>Option 10</li>
      <li nz-menu-item>Option 11</li>
    </ul>
  </li>
</ul>

mode = false;
dark = false;


8.API 
<ul nz-menu>
  <li nz-menu-item>菜单项</li>
  <li nz-submenu>
    <span title>子菜单</span>
    <ul>
      <li nz-menu-item>子菜单项</li>
    </ul>
  </li>
</ul>

[nz-menu]
[nzInlineCollapsed]	inline 时菜单是否收起状态	boolean	-
[nzInlineIndent]	inline 模式的菜单缩进宽度	number	24
[nzMode]	菜单类型，现在支持垂直、水平、和内嵌模式三种	string: verticalhorizontalinline	vertical
[nzSelectable]	是否允许选中	boolean	true
[nzTheme]	主题颜色	string: lightdark	light
(nzClick)	点击 nz-menu-item 输出属性	EventEmitter<NzMenuItemDirective>

[nz-menu-item]
[nzDisabled]	是否禁用	boolean	false
[nzSelected]	是否被选中	boolean	false

[nz-submenu]
使用 title 标识符来标定子菜单标题部分
[nzOpen]	是否展开，可双向绑定	boolean	false
[nzDisabled]	是否禁用	boolean	false
(nzOpenChange)	展开回调	EventEmitter<boolean>	

[nz-menu-group]
使用 title 标识符来标定标题部分

[nz-menu-divider]
菜单项分割线，只用在弹出菜单内。

9.Pagination分页


五.Pagination分页
1.基本 基础分页。
<nz-pagination [nzPageIndex]="1" [nzTotal]="50"></nz-pagination>

2.更多分页
<nz-pagination [nzPageIndex]="1" [nzTotal]="500"></nz-pagination>

3.改变每页显示条目数。
<nz-pagination [nzPageIndex]="3" [nzTotal]="500" nzShowSizeChanger [nzPageSize]="10"></nz-pagination>

4.快速跳转到某一页。
<nz-pagination [nzPageIndex]="2" [nzTotal]="500" nzShowQuickJumper></nz-pagination>

5.迷你版本
<nz-pagination [(nzPageIndex)]="current" [nzTotal]="50" [nzSize]="'small'"></nz-pagination>
<br>
<nz-pagination [(nzPageIndex)]="current" [nzTotal]="50" [nzSize]="'small'" nzShowSizeChanger nzShowQuickJumper></nz-pagination>
<br>
<nz-pagination [(nzPageIndex)]="current" [nzTotal]="50" [nzSize]="'small'" [nzShowTotal]="totalTemplate"></nz-pagination>
<ng-template #totalTemplate let-total>Total {{total}} items</ng-template>

current = 1;

6.简单的翻页。
<nz-pagination [nzPageIndex]="2" [nzTotal]="50" nzSimple></nz-pagination>

7.改变页码
<nz-pagination [nzPageIndex]="3" [nzTotal]="50"></nz-pagination>

8.通过设置 nzShowTotal 展示总共有多少数据
<nz-pagination [nzPageIndex]="1" [nzTotal]="85" [nzPageSize]="20" [nzShowTotal]="totalTemplate"></nz-pagination>
<br>
<nz-pagination [nzPageIndex]="1" [nzTotal]="85" [nzPageSize]="20" [nzShowTotal]="rangeTemplate"></nz-pagination>
<ng-template #totalTemplate let-total> Total {{total}} items</ng-template>
<ng-template #rangeTemplate let-range="range" let-total> {{range[0]}}-{{range[1]}} of {{total}} items</ng-template>

9.上一步和下一步
修改上一步和下一步为文字链接
<nz-pagination [nzPageIndex]="1" [nzTotal]="500" [nzItemRender]="renderItemTemplate"></nz-pagination>
<ng-template #renderItemTemplate let-type let-page="page">
  <a *ngIf="type==='pre'">Previous</a>
  <a *ngIf="type==='next'">Next</a>
  <a *ngIf="type==='page'">{{page}}</a>
</ng-template>

10.API
nz-pagination
[nzTotal]	数据总数	number	-
[nzPageIndex]	当前页数，可双向绑定	number	1
[nzPageSize]	每页条数 ，可双向绑定	number	10
[nzShowQuickJumper]	是否可以快速跳转至某页	boolean	false
[nzShowSizeChanger]	是否可以改变 nzPageSize	boolean	false
[nzSimple]	当添加该属性时，显示为简单分页	boolean	-
[nzSize]	当为「small」时，是小尺寸分页	string	""
[nzPageSizeOptions]	指定每页可以显示多少条	number[]	[10, 20, 30, 40]
[nzItemRender]	用于自定义页码的结构	TemplateRef<{ $implicit: 'page' ｜ 'prev' ｜ 'next', page: number }>	-
[nzShowTotal]	用于显示数据总量和当前数据范围，具体使用方式见代码演示部分	TemplateRef<{ $implicit: number, range: [ number, number ] }>	-
[nzHideOnSinglePage]	只有一页时是否隐藏分页器	boolean	false
(nzPageIndexChange)	页码改变的回调	EventEmitter<number>	-
(nzPageSizeChange)	每页条数改变的回调	EventEmitter<number>	-

六.Steps步骤条
引导用户按照流程完成任务的导航条。
当任务复杂或者存在先后关系时，将其分解成一系列步骤，从而简化任务

1.简单的步骤条。
<nz-steps>
  <nz-step nzTitle="Finished" nzDescription="This is a description."></nz-step>
  <nz-step nzTitle="In Progress" nzDescription="This is a description."></nz-step>
  <nz-step nzTitle="Waiting" nzDescription="This is a description."></nz-step>
</nz-steps>

2.迷你版
迷你版的步骤条，通过设置 <nz-steps nzSize="small"> 启用
<nz-steps [nzCurrent]="current" nzSize="small">
  <nz-step nzTitle="Finished"></nz-step>
  <nz-step nzTitle="In Progress"></nz-step>
  <nz-step nzTitle="Waiting"></nz-step>
</nz-steps>

3.起始序号
通过 nzStartIndex 来设置步骤条的起始序号. 请注意 nzCurrent 也应该有对应的偏移.
<nz-steps [nzCurrent]="current" [nzStartIndex]="3" nzSize="small">
  <nz-step nzTitle="Finished"></nz-step>
  <nz-step nzTitle="In Progress"></nz-step>
  <nz-step nzTitle="Waiting"></nz-step>
</nz-steps>

4.带图标的步骤条
通过设置 nz-step 的 nzIcon 属性，可以启用自定义图标。
<nz-steps>
  <nz-step nzTitle="Login" nzStatus="finish" nzIcon="user"></nz-step>
  <nz-step nzTitle="Verification" nzStatus="finish" nzIcon="solution"></nz-step>
  <nz-step nzTitle="Pay" nzStatus="process" nzIcon="loading"></nz-step>
  <nz-step nzTitle="Done" nzStatus="wait" [nzIcon]="iconTemplate"></nz-step>
  <ng-template #iconTemplate><i nz-icon type="smile"></i></ng-template>
</nz-steps>

5.步骤切换
通常配合内容及按钮使用，表示一个流程的处理进度。

<nz-steps [nzCurrent]="current">
  <nz-step nzTitle="Finished"></nz-step>
  <nz-step nzTitle="In Progress"></nz-step>
  <nz-step nzTitle="Waiting"></nz-step>
</nz-steps>

<div class="steps-content">{{ index }}</div>
<div class="steps-action">
  <button nz-button nzType="default" (click)="pre()" *ngIf="current > 0">
    <span>Previous</span>
  </button>
  <button nz-button nzType="default" (click)="next()" *ngIf="current < 2">
    <span>Next</span>
  </button>
  <button nz-button nzType="primary" (click)="done()" *ngIf="current === 2">
    <span>Done</span>
  </button>
</div>

.steps-content {
  margin-top: 16px;
  border: 1px dashed #e9e9e9;
  border-radius: 6px;
  background-color: #fafafa;
  min-height: 200px;
  text-align: center;
  padding-top: 80px;
}

.steps-action {
  margin-top: 24px;
}

button {
  margin-right: 8px;
}

current = 0;
index = 'First-content';

pre(): void {
  this.current -= 1;
  this.changeContent();
}

next(): void {
  this.current += 1;
  this.changeContent();
}

done(): void {
  console.log('done');
}

changeContent(): void {
  switch (this.current) {
    case 0: {
      this.index = 'First-content';
      break;
    }
    case 1: {
      this.index = 'Second-content';
      break;
    }
    case 2: {
      this.index = 'third-content';
      break;
    }
    default: {
      this.index = 'error';
    }
  }
}

6.竖直方向的步骤条
简单的竖直方向的步骤条。
<nz-steps [nzCurrent]="1" nzDirection="vertical">
  <nz-step nzTitle="Finished" nzDescription="This is a description."></nz-step>
  <nz-step nzTitle="In Progress" nzDescription="This is a description."></nz-step>
  <nz-step nzTitle="Waiting" nzDescription="This is a description."></nz-step>
</nz-steps>

7.竖直方向的小型步骤条
简单的竖直方向的小型步骤条。


8.竖直方向的小型步骤条(迷你型)
简单的竖直方向的小型步骤条。
<nz-steps [nzCurrent]="1" nzDirection="vertical" nzSize="small">
  <nz-step nzTitle="Finished" nzDescription="This is a description."></nz-step>
  <nz-step nzTitle="In Progress" nzDescription="This is a description."></nz-step>
  <nz-step nzTitle="Waiting" nzDescription="This is a description."></nz-step>
</nz-steps>

9.步骤运行错误
使用 nz-steps 的 nzStatus 属性来指定当前步骤的状态。
<nz-steps [nzCurrent]="1" nzStatus="error">
  <nz-step nzTitle="Finished" nzDescription="This is a description."></nz-step>
  <nz-step nzTitle="In Progress" nzDescription="This is a description."></nz-step>
  <nz-step nzTitle="Waiting" nzDescription="This is a description."></nz-step>
</nz-steps>

10.点状步骤条
<nz-steps [nzCurrent]="1" nzProgressDot>
  <nz-step nzTitle="Finished" nzDescription="This is a description."></nz-step>
  <nz-step nzTitle="In Progress" nzDescription="This is a description."></nz-step>
  <nz-step nzTitle="Waiting" nzDescription="This is a description."></nz-step>
</nz-steps>

11.自定义点状步骤条(鼠标移动到点上的时候会有弹出提示层)
为点状步骤条增加自定义展示。
<nz-steps [nzCurrent]="1" [nzProgressDot]="progressTemplate">
  <nz-step nzTitle="Finished" nzDescription="You can hover on the dot."></nz-step>
  <nz-step nzTitle="In Progress" nzDescription="You can hover on the dot."></nz-step>
  <nz-step nzTitle="Waiting" nzDescription="You can hover on the dot."></nz-step>
  <nz-step nzTitle="Waiting" nzDescription="You can hover on the dot."></nz-step>
</nz-steps>
<ng-template #progressTemplate let-dot let-status="status" let-index="index">
  <nz-popover nzContent="steps {{index}} status: {{status}}">
    <span nz-popover style="margin-left: -100%;">
      <ng-template [ngTemplateOutlet]="dot"></ng-template>
    </span>
  </nz-popover>
</ng-template>

12.API
<nz-steps>
  <nz-step nzTitle="第一步"></nz-step>
  <nz-step nzTitle="第二步"></nz-step>
  <nz-step nzTitle="第三步"></nz-step>
</nz-steps>

nz-steps 整体步骤条。
[nzCurrent]	指定当前步骤，从 0 开始记数。在子 nz-step 元素中，可以通过 nzStatus 属性覆盖状态	number	0
[nzDirection]	指定步骤条方向。目前支持水平（horizontal）和竖直（vertical）两种方向	string	horizontal
[nzProgressDot]	点状步骤条，可以设置为一个 TemplateRef	Boolean 丨 TemplateRef<{ $implicit: TemplateRef<void>, status: string, index: number }>	false
[nzSize]	指定大小，目前支持普通（default）和迷你（small）	string	default
[nzStatus]	指定当前步骤的状态，可选 waitprocessfinisherror	string	process
[nzStartIndex]	指定起始位置的序号	number	0

nz-step 步骤条内的每一个步骤。
[nzDescription]	步骤的详情描述，可选	string 丨 TemplateRef<void>	-
[nzIcon]	步骤图标的类型，可选	string 丨 string[] 丨 Set<string> 丨 { [klass: string]: any; }; 丨 TemplateRef<void>	-
[nzStatus]	指定状态。当不配置该属性时，会使用 nz-steps 的 nzCurrent 来自动指定状态。可选：waitprocessfinisherror	string	wait
[nzTitle]	标题	string 丨 TemplateRef<void>	


======================================== Data Entry 数据录入 ========================================

一.Autocomplete自动完成 输入框自动完成功能

1.基本使用。通过 nzDataSource 设置自动完成的数据源
<div class="example-input">
  <input placeholder="input here" nz-input [(ngModel)]="inputValue" (input)="onInput($event.target?.value)" [nzAutocomplete]="auto">
  <nz-autocomplete nzBackfill #auto>
  <nz-auto-option *ngFor="let option of options" [nzValue]="option">{{option}}</nz-auto-option>
  </nz-autocomplete>
</div>

inputValue: string;
options = [];

onInput(value: string): void {
  this.options = value ? [
    value,
    value + value,
    value + value + value
  ] : [];
}

2.自定义输入组件
自定义输入组件。
<div class="example-input">
  <textarea placeholder="input here" nz-input row="4"  [(ngModel)]="inputValue" (input)="onInput($event.target?.value)" [nzAutocomplete]="auto"></textarea>
  <nz-autocomplete #auto>
    <nz-auto-option *ngFor="let option of options" [nzValue]="option">{{option}}</nz-auto-option>
  </nz-autocomplete>
</div>

inputValue: string;
options = [];

onInput(value: string): void {
  this.options = value ? [
    value,
    value + value,
    value + value + value,
  ] : [];
}

3.查询模式: 确定类目 示例。
<div class="example-input">
  <nz-input-group nzSize="large" [nzSuffix]="suffixIcon">
    <input placeholder="input here" nz-input [(ngModel)]="inputValue" (ngModelChange)="onChange($event)" [nzAutocomplete]="auto"/>
  </nz-input-group>
  <ng-template #suffixIcon>
    <i nz-icon type="search"></i>
  </ng-template>
  <nz-autocomplete #auto>
    <nz-auto-optgroup *ngFor="let group of optionGroups" [nzLabel]="groupTitle">
      <ng-template #groupTitle>
        <span>{{group.title}}
          <a class="more-link" href="https://www.google.com/search?q=ng+zorro" target="_blank">更多</a>
        </span>
      </ng-template>
      <nz-auto-option *ngFor="let option of group.children" [nzLabel]="option.title" [nzValue]="option">{{option.title}}<span class="certain-search-item-count">{{option.count}} 人  关注</span></nz-auto-option>
    </nz-auto-optgroup>
  </nz-autocomplete>
</div>

.certain-search-item-count {
  position: absolute;
  color: #999;
  right: 16px;
}

.more-link {
  float: right;
}

import { ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation } from '@angular/core';

@Component({
  selector: 'login',
  encapsulation: ViewEncapsulation.None,
  changeDetection: ChangeDetectionStrategy.OnPush,
  templateUrl: './login.component.pug',
  styleUrls: ['./login.component.less'],
})


inputValue: string;
optionGroups: any[];

onChange(value: any): void {
  console.log(value);
}

ngOnInit(): void {
  setTimeout(() => {
    this.optionGroups = [{
      title: '话题',
      children: [{
        title: 'AntDesign',
        count: 10000
      },         {
        title: 'AntDesign UI',
        count: 10600
      }]
    },              {
      title: '问题',
      children: [{
        title: 'AntDesign UI 有多好',
        count: 60100
      },         {
        title: 'AntDesign 是啥',
        count: 30010
      }]
    },              {
      title: '文章',
      children: [{
        title: 'AntDesign 是一个设计语言',
        count: 100000
      }]
    }];
  }, 1000);
}

4.自定义选项
也可以直接传 nz-option 作为 nz-autocomplete 的 Content，而非使用 nzDataSource。

<div class="example-input">
  <input placeholder="input here" nz-input [(ngModel)]="inputValue" (ngModelChange)="onChange($event)" [nzAutocomplete]="auto">
  <nz-autocomplete #auto>
    <nz-auto-option *ngFor="let option of options" [nzValue]="option">{{option}}</nz-auto-option>
  </nz-autocomplete>
</div>

import { Component, ViewEncapsulation } from '@angular/core';

encapsulation: ViewEncapsulation.None,

inputValue: string;
options = [];

onChange(value: string): void {
  if (!value || value.indexOf('@') >= 0) {
    this.options = [];
  } else {
    this.options = ['gmail.com', '163.com', 'qq.com'].map(domain => `${value}@${domain}`);
  }
}

5.不区分大小写
不区分大小写的 AutoComplete
<div class="example-input">
  <input placeholder="try to type \`b\`" nz-input [(ngModel)]="inputValue" (input)="onInput($event.target?.value)" [nzAutocomplete]="auto">
  <nz-autocomplete [nzDataSource]="filteredOptions" #auto>
  </nz-autocomplete>
</div>


import { Component, ViewEncapsulation } from '@angular/core';

encapsulation: ViewEncapsulation.None,

inputValue: string;
filteredOptions = [];
options = ['Burns Bay Road', 'Downing Street', 'Wall Street'];

constructor() {
  this.filteredOptions = this.options;
}

onInput(value: string): void {
  this.filteredOptions = this.options
  .filter(option => option.toLowerCase().indexOf(value.toLowerCase()) === 0);
}

6.查询模式 - 不确定类目
查询模式: 不确定类目 示例。
<div class="example-input">
  <nz-input-group nzSearch nzSize="large" [nzSuffix]="suffixIconButton">
    <input placeholder="input here" nz-input [(ngModel)]="inputValue" (ngModelChange)="onChange($event)" [nzAutocomplete]="auto"/>
  </nz-input-group>
  <ng-template #suffixIconButton>
    <button nz-button nzType="primary" nzSize="large" nzSearch><i nz-icon type="search" theme="outline"></i></button>
  </ng-template>
  <nz-autocomplete #auto>
    <nz-auto-option *ngFor="let option of options" [nzValue]="option.category">{{option.value}} 在<a [href]="'https://s.taobao.com/search?q=' + option.query" target="_blank" rel="noopener noreferrer"> {{option.category}}</a>区块中<span class="global-search-item-count">约 {{option.count}} 个结果</span></nz-auto-option>
  </nz-autocomplete>
</div>

.global-search-item-count {
  position: absolute;
  right: 16px;
}

inputValue: string;
options = [];

onChange(value: string): void {
  this.options = new Array(this.getRandomInt(15, 5)).join('.').split('.')
  .map((item, idx) => ({
    value,
    category: `${value}${idx}`,
    count: this.getRandomInt(200, 100),
  }));
}

private getRandomInt(max: number, min: number = 0): number {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

7.API
<input nz-input [(ngModel)]="value" [nzAutocomplete]="auto">
<nz-autocomplete [nzDataSource]="['12345', '23456', '34567']" #auto></nz-autocomplete>

或

<input nz-input [(ngModel)]="value" [nzAutocomplete]="auto">
<nz-autocomplete #auto>
  <nz-auto-option [nzValue]="'12345'">12345</nz-auto-option>
  <nz-auto-option [nzValue]="'23456'">23456</nz-auto-option>
  <nz-auto-option [nzValue]="'34567'">34567</nz-auto-option>
</nz-autocomplete>

[nzAutocomplete]
[nzAutocomplete]	用于绑定 nzAutocomplete 组件	NzAutocompleteComponent

nz-autocomplete
[nzBackfill]	使用键盘选择选项的时候把选中项回填到输入框中	boolean	false
[nzDataSource]	自动完成的数据源	AutocompleteDataSource	-
[nzDefaultActiveFirstOption]	是否默认高亮第一个选项。	boolean	true
[nzWidth]	自定义宽度单位 px	number	触发元素宽度

nz-auto-option
[nzValue]	绑定到触发元素 ngModel 的值	any	-
[nzLabel]	填入触发元素显示的值	string	-
[nzDisabled]	禁用选项	boolean	false

二.Cascader级联选择(有问题 点击并不会直接弹出)
需要从一组相关联的数据集合进行选择，例如省市区，公司层级，事物分类等。
从一个较大的数据集合中进行选择时，用多级分类进行分隔，方便选择。
比起 Select 组件，可以在同一个浮层中完成选择，有较好的体验。

1.基本 省市区级联。
<nz-cascader [nzOptions]="nzOptions" [(ngModel)]="values" (ngModelChange)="onChanges($event)"></nz-cascader> 
<a href="javascript:;" (click)="changeNzOptions()" class="change-options">Change Options </a>

const options = [{
  value: 'zhejiang',
  label: 'Zhejiang',
  children: [{
    value: 'hangzhou',
    label: 'Hangzhou',
    children: [{
      value: 'xihu',
      label: 'West Lake',
      isLeaf: true
    }]
  }, {
    value: 'ningbo',
    label: 'Ningbo',
    isLeaf: true
  }]
}, {
  value: 'jiangsu',
  label: 'Jiangsu',
  children: [{
    value: 'nanjing',
    label: 'Nanjing',
    children: [{
      value: 'zhonghuamen',
      label: 'Zhong Hua Men',
      isLeaf: true
    }]
  }]
}];

const otherOptions = [{
  value: 'fujian',
  label: 'Fujian',
  children: [{
    value: 'xiamen',
    label: 'Xiamen',
    children: [{
      value: 'Kulangsu',
      label: 'Kulangsu',
      isLeaf: true
    }]
  }]
}, {
  value: 'guangxi',
  label: 'Guangxi',
  children: [{
    value: 'guilin',
    label: 'Guilin',
    children: [{
      value: 'Lijiang',
      label: 'Li Jiang River',
      isLeaf: true
    }]
  }]
}];

/** init data */
public nzOptions = null;

/** ngModel value */
public values: any[] = null;

ngOnInit(): void {
  // let's set nzOptions in a asynchronous way
  setTimeout(() => {
      this.nzOptions = options;
  }, 100);
}

public changeNzOptions(): void {
  if (this.nzOptions === options) {
    this.nzOptions = otherOptions;
  } else {
    this.nzOptions = options;
  }
}

public onChanges(values: any): void {
  console.log(values, this.values);
}


.ant-cascader-picker {
  width: 300px;
}
.change-options {
  display: inline-block;
  font-size: 12px;
  margin-top: 8px;
}

2.默认值
默认值通过数组的方式指定。
<nz-cascader [nzOptions]="nzOptions" [(ngModel)]="values" (ngModelChange)="onChanges($event)"></nz-cascader>

const options = [{
  value: 'zhejiang',
  label: 'Zhejiang',
  children: [{
    value: 'hangzhou',
    label: 'Hangzhou',
    children: [{
      value: 'xihu',
      label: 'West Lake',
      isLeaf: true
    }]
  }, {
    value: 'ningbo',
    label: 'Ningbo',
    isLeaf: true
  }]
}, {
  value: 'jiangsu',
  label: 'Jiangsu',
  children: [{
    value: 'nanjing',
    label: 'Nanjing',
    children: [{
      value: 'zhonghuamen',
      label: 'Zhong Hua Men',
      isLeaf: true
    }]
  }]
}];

/** init data */
public nzOptions = options;

/** ngModel value */
public values: any[] = ['zhejiang', 'hangzhou', 'xihu'];
/* // or like this:
public values: any[] = [{
  value: 'zhejiang',
  label: 'Zhejiang'
}, {
  value: 'hangzhou',
  label: 'Hangzhou'
}, {
  value: 'xihu',
  label: 'West Lake'
}]; */

public onChanges(values: any): void {
  console.log(values, this.values);
}

.ant-cascader-picker {
  width: 300px;
}

3.可以自定义显示
切换按钮和结果分开。
p {{text}}
<nz-cascader [nzShowInput]="false" [nzOptions]="nzOptions" [(ngModel)]="values" (ngModelChange)="onChanges($event)" (nzSelectionChange)="onSelectionChange($event)">
  <a href="javascript: void(0)">Change city</a>
</nz-cascader>

const options = [{
  value: 'zhejiang',
  label: 'Zhejiang',
  children: [{
    value: 'hangzhou',
    label: 'Hangzhou',
    children: [{
      value: 'xihu',
      label: 'West Lake',
      isLeaf: true
    }]
  }, {
    value: 'ningbo',
    label: 'Ningbo',
    isLeaf: true
  }]
}, {
  value: 'jiangsu',
  label: 'Jiangsu',
  children: [{
    value: 'nanjing',
    label: 'Nanjing',
    children: [{
      value: 'zhonghuamen',
      label: 'Zhong Hua Men',
      isLeaf: true
    }]
  }]
}];

/** init data */
nzOptions = options;

/** ngModel value */
public values: any[] = null;

public text = 'Unselect';

public onChanges(values: any): void {
  console.log(values, this.values);
}

public onSelectionChange(selectedOptions: any[]): void {
  this.text = selectedOptions.map(o => o.label).join(', ');
}

.ant-cascader-picker {
  width: 300px;
}

4.移入展开
通过移入展开下级菜单，点击完成选择。
<nz-cascader [nzExpandTrigger]="'hover'" [nzOptions]="nzOptions" [(ngModel)]="values" (ngModelChange)="onChanges($event)">
</nz-cascader>

const options = [{
  value: 'zhejiang',
  label: 'Zhejiang',
  children: [{
    value: 'hangzhou',
    label: 'Hangzhou',
    children: [{
      value: 'xihu',
      label: 'West Lake',
      isLeaf: true
    }]
  }, {
    value: 'ningbo',
    label: 'Ningbo',
    isLeaf: true
  }]
}, {
  value: 'jiangsu',
  label: 'Jiangsu',
  children: [{
    value: 'nanjing',
    label: 'Nanjing',
    children: [{
      value: 'zhonghuamen',
      label: 'Zhong Hua Men',
      isLeaf: true
    }]
  }]
}];

/** init data */
nzOptions = options;

/** ngModel value */
public values: any[] = null;

public onChanges(values: any): void {
  console.log(values, this.values);
}

.ant-cascader-picker {
  width: 300px;
}

5.禁用选项
通过指定 options 里的 disabled 字段。
<nz-cascader [nzOptions]="nzOptions" [(ngModel)]="values" (ngModelChange)="onChanges($event)">
</nz-cascader>

const options = [{
  value: 'zhejiang',
  label: 'Zhejiang',
  children: [{
    value: 'hangzhou',
    label: 'Hangzhou',
    children: [{
      value: 'xihu',
      label: 'West Lake',
      isLeaf: true
    }]
  }, {
    value: 'ningbo',
    label: 'Ningbo',
    isLeaf: true
  }]
}, {
  value: 'jiangsu',
  label: 'Jiangsu',
  disabled: true,
  children: [{
    value: 'nanjing',
    label: 'Nanjing',
    children: [{
      value: 'zhonghuamen',
      label: 'Zhong Hua Men',
      isLeaf: true
    }]
  }]
}];

/** init data */
nzOptions = options;

/** ngModel value */
public values: any[] = null;

public onChanges(values: any): void {
  console.log(values, this.values);
}

.ant-cascader-picker {
  width: 300px;
}

6.选择即改变
这种交互允许只选中父级选项。
<nz-cascader nzChangeOnSelect [nzOptions]="nzOptions" [(ngModel)]="values" (ngModelChange)="onChanges($event)">
</nz-cascader>

const options = [{
  value: 'zhejiang',
  label: 'Zhejiang',
  children: [{
    value: 'hangzhou',
    label: 'Hangzhou',
    children: [{
      value: 'xihu',
      label: 'West Lake',
      isLeaf: true
    }]
  }, {
    value: 'ningbo',
    label: 'Ningbo',
    isLeaf: true
  }]
}, {
  value: 'jiangsu',
  label: 'Jiangsu',
  children: [{
    value: 'nanjing',
    label: 'Nanjing',
    children: [{
      value: 'zhonghuamen',
      label: 'Zhong Hua Men',
      isLeaf: true
    }]
  }]
}];

/** init data */
nzOptions = options;

/** ngModel value */
public values: any[] = null;

public onChanges(values: any): void {
  console.log(values, this.values);
}

.ant-cascader-picker {
  width: 300px;
}

7.大小
不同大小的级联选择器。
<nz-cascader [nzSize]="'large'" [nzOptions]="nzOptions" [(ngModel)]="value1" (ngModelChange)="onChanges($event)">
</nz-cascader>
<nz-cascader [nzOptions]="nzOptions" [(ngModel)]="value2" (ngModelChange)="onChanges($event)">
</nz-cascader>
<nz-cascader [nzSize]="'small'" [nzOptions]="nzOptions" [(ngModel)]="value3" (ngModelChange)="onChanges($event)">
</nz-cascader>

const options = [{
  value: 'zhejiang',
  label: 'Zhejiang',
  children: [{
    value: 'hangzhou',
    label: 'Hangzhou',
    children: [{
      value: 'xihu',
      label: 'West Lake',
      isLeaf: true
    }]
  }, {
    value: 'ningbo',
    label: 'Ningbo',
    isLeaf: true
  }]
}, {
  value: 'jiangsu',
  label: 'Jiangsu',
  children: [{
    value: 'nanjing',
    label: 'Nanjing',
    children: [{
      value: 'zhonghuamen',
      label: 'Zhong Hua Men',
      isLeaf: true
    }]
  }]
}];

/** init data */
nzOptions = options;

/** ngModel value */
public value1: any[] = null;
public value2: any[] = null;
public value3: any[] = null;

public onChanges(values: any): void {
  console.log(values);
}

8.自定义已选项
例如给最后一项加上邮编链接。
<nz-cascader [nzLabelRender]="renderTpl" [nzOptions]="nzOptions" [(ngModel)]="values" (ngModelChange)="onChanges($event)">
</nz-cascader>

<ng-template #renderTpl let-labels="labels" let-selectedOptions="selectedOptions">
  <ng-container *ngFor="let label of labels; let i = index; let isLast = last">
    <span *ngIf="!isLast">{{label}} / </span>
    <span *ngIf="isLast"> {{label}} (<a href="javascript:;" (click)="handleAreaClick($event, label, selectedOptions[i])"> {{selectedOptions[i].code}} </a>)</span>
  </ng-container>
</ng-template>

const options = [{
  value: 'zhejiang',
  label: 'Zhejiang',
  children: [{
    value: 'hangzhou',
    label: 'Hangzhou',
    children: [{
      value: 'xihu',
      label: 'West Lake',
      code: 752100,
      isLeaf: true
    }]
  }, {
    value: 'ningbo',
    label: 'Ningbo',
    code: '315000',
    isLeaf: true
  }]
}, {
  value: 'jiangsu',
  label: 'Jiangsu',
  children: [{
    value: 'nanjing',
    label: 'Nanjing',
    children: [{
      value: 'zhonghuamen',
      label: 'Zhong Hua Men',
      code: 453400,
      isLeaf: true
    }]
  }]
}];

/** init data */
nzOptions = options;

/** ngModel value */
public values: any[] = null;

public onChanges(values: any): void {
  console.log(values, this.values);
}

handleAreaClick(e: Event, label: string, option: any): void {
  e.preventDefault();
  e.stopPropagation();
  console.log('clicked \"', label, '\"', option);
}

9.动态加载选项
使用 nzLoadData 实现动态加载选项。
<nz-cascader [(ngModel)]="values" [nzLoadData]="loadData" (ngModelChange)="onChanges($event)">
</nz-cascader>

const provinces = [{
  value: 'zhejiang',
  label: 'Zhejiang'
}, {
  value: 'jiangsu',
  label: 'Jiangsu'
}];

const cities = {
  zhejiang: [{
    value: 'hangzhou',
    label: 'Hangzhou'
  }, {
    value: 'ningbo',
    label: 'Ningbo',
    isLeaf: true
  }],
  jiangsu: [{
    value: 'nanjing',
    label: 'Nanjing'
  }]
};

const scenicspots = {
  hangzhou: [{
    value: 'xihu',
    label: 'West Lake',
    isLeaf: true
  }],
  nanjing: [{
    value: 'zhonghuamen',
    label: 'Zhong Hua Men',
    isLeaf: true
  }]
};

/** ngModel value */
public values: any[] = null;

public onChanges(values: any): void {
  console.log(values);
}

/** load data async execute by `nzLoadData` method */
public loadData(node: any, index: number): PromiseLike<any> {
  return new Promise((resolve) => {
    setTimeout(() => {
      if (index < 0) { // if index less than 0 it is root node
        node.children = provinces;
      } else if (index === 0) {
        node.children = cities[node.value];
      } else {
        node.children = scenicspots[node.value];
      }
      resolve();
    }, 1000);
  });
}

10.响应表单
通过表单的重置功能清空已选择的值。
<form [formGroup]="form" novalidate> 
<nz-cascader [nzOptions]="nzOptions" (nzChange)="onChanges($event)" [formControlName]="'name'"></nz-cascader>
</form>
<br>
<button nz-button (click)="reset()">Reset</button>
<button nz-button (click)="submit()">Submit</button>

import { FormBuilder, FormGroup, Validators } from '@angular/forms';

const options = [ {
  value   : 'zhejiang',
  label   : 'Zhejiang',
  children: [ {
    value   : 'hangzhou',
    label   : 'Hangzhou',
    children: [ {
      value : 'xihu',
      label : 'West Lake',
      isLeaf: true
    } ]
  }, {
    value : 'ningbo',
    label : 'Ningbo',
    isLeaf: true
  } ]
}, {
  value   : 'jiangsu',
  label   : 'Jiangsu',
  children: [ {
    value   : 'nanjing',
    label   : 'Nanjing',
    children: [ {
      value : 'zhonghuamen',
      label : 'Zhong Hua Men',
      isLeaf: true
    } ]
  } ]
} ];

/** init data */
nzOptions = options;

public form: FormGroup;

constructor(private fb: FormBuilder) {
  this.createForm();
}

private createForm(): void {
  this.form = this.fb.group({
    name: [ null, Validators.required ]
  });
}

public reset(): void {
  this.form.reset();
  console.log(this.form.value);
}

public submit(): void {
  console.log(this.form.value);
}

public onChanges(values: any): void {
  console.log(values);
}

.ant-cascader-picker {
  width: 300px;
}

button {
  margin-right: 8px;
}

11.指定选择
通过函数来判断选项是否可以选择。
<nz-cascader [nzChangeOn]="validate" [nzOptions]="nzOptions" [(ngModel)]="values" (ngModelChange)="onChanges($event)">
</nz-cascader>

const options = [{
  value: 'zhejiang',
  label: 'Zhejiang',
  children: [{
    value: 'hangzhou',
    label: 'Hangzhou',
    children: [{
      value: 'xihu',
      label: 'West Lake',
      isLeaf: true
    }]
  }, {
    value: 'ningbo',
    label: 'Ningbo',
    children: [{
      value: 'dongqianlake',
      label: 'Dongqian Lake',
      isLeaf: true
    }]
  }]
}, {
  value: 'jiangsu',
  label: 'Jiangsu',
  children: [{
    value: 'nanjing',
    label: 'Nanjing',
    children: [{
      value: 'zhonghuamen',
      label: 'Zhong Hua Men',
      isLeaf: true
    }]
  }]
}];

/** init data */
nzOptions = options;

/** ngModel value */
public values: any[] = null;

public onChanges(values: any): void {
  console.log(values, this.values);
}

public validate(option: any, index: number): boolean {
  const value = option.value;
  return ['hangzhou', 'xihu', 'nanjing', 'zhonghuamen'].indexOf(value) >= 0;
}

.ant-cascader-picker {
  width: 300px;
}

button {
  margin-right: 8px;
}

12.模态窗口
在模态窗口中使用级联控件。

<nz-modal [(nzVisible)]="isVisible" nzTitle="Please select" (nzOnCancel)="handleCancel($event)" (nzOnOk)="handleOk($event)">
  <nz-cascader [nzOptions]="nzOptions" [(ngModel)]="values" (ngModelChange)="onChanges($event)">
  </nz-cascader>
</nz-modal>
<button nz-button (click)="open()">Open Dialog</button>

const options = [{
  value: 'zhejiang',
  label: 'Zhejiang',
  children: [{
    value: 'hangzhou',
    label: 'Hangzhou',
    children: [{
      value: 'xihu',
      label: 'West Lake',
      isLeaf: true
    }]
  }, {
    value: 'ningbo',
    label: 'Ningbo',
    isLeaf: true
  }]
}, {
  value: 'jiangsu',
  label: 'Jiangsu',
  children: [{
    value: 'nanjing',
    label: 'Nanjing',
    children: [{
      value: 'zhonghuamen',
      label: 'Zhong Hua Men',
      isLeaf: true
    }]
  }]
}];

/** init data */
public nzOptions = options;

/** ngModel value */
public values: any[] = null;

public isVisible = false;

public onChanges(values: any): void {
  console.log(values, this.values);
}

public open(): void {
  this.isVisible = true;
}

handleOk($event: MouseEvent): void {
  console.log('Button ok clicked!', this.values);
  this.isVisible = false;
}

handleCancel($event: MouseEvent): void {
  console.log('Button cancel clicked!', $event);
  this.isVisible = false;
}

13.鼠标移入触发
鼠标移入触发显示菜单，移出隐藏菜单。
<nz-cascader [nzTriggerAction]="'hover'" [nzExpandTrigger]="'hover'" [nzOptions]="nzOptions" [(ngModel)]="values" (ngModelChange)="onChanges($event)">
</nz-cascader>

const options = [{
  value: 'zhejiang',
  label: 'Zhejiang',
  children: [{
    value: 'hangzhou',
    label: 'Hangzhou',
    children: [{
      value: 'xihu',
      label: 'West Lake',
      isLeaf: true
    }]
  }, {
    value: 'ningbo',
    label: 'Ningbo',
    isLeaf: true
  }]
}, {
  value: 'jiangsu',
  label: 'Jiangsu',
  children: [{
    value: 'nanjing',
    label: 'Nanjing',
    children: [{
      value: 'zhonghuamen',
      label: 'Zhong Hua Men',
      isLeaf: true
    }]
  }]
}];

/** init data */
nzOptions = options;

/** ngModel value */
public values: any[] = null;

public onChanges(values: any): void {
  console.log(values, this.values);
}

14.搜索
可以直接搜索选项并选择。
<nz-cascader [nzOptions]="nzOptions" [(ngModel)]="values" [nzShowSearch]="true" (ngModelChange)="onChanges($event)">
</nz-cascader>
<a href="javascript:;" (click)="changeNzOptions()" class="change-options">Change Options</a>

const options = [ {
  value: 'zhejiang',
  label: 'Zhejiang',
  children: [ {
    value: 'hangzhou',
    label: 'Hangzhou',
    children: [ {
      value: 'xihu',
      label: 'West Lake',
      isLeaf: true
    } ]
  }, {
    value: 'ningbo',
    label: 'Ningbo',
    isLeaf: true,
    disabled: true
  } ]
}, {
  value: 'jiangsu',
  label: 'Jiangsu',
  children: [ {
    value: 'nanjing',
    label: 'Nanjing',
    children: [ {
      value: 'zhonghuamen',
      label: 'Zhong Hua Men',
      isLeaf: true
    } ]
  } ]
} ];

const otherOptions = [ {
  value: 'fujian',
  label: 'Fujian',
  children: [ {
    value: 'xiamen',
    label: 'Xiamen',
    children: [ {
      value: 'Kulangsu',
      label: 'Kulangsu',
      isLeaf: true
    } ]
  } ]
}, {
  value: 'guangxi',
  label: 'Guangxi',
  children: [ {
    value: 'guilin',
    label: 'Guilin',
    children: [ {
      value: 'Lijiang',
      label: 'Li Jiang River',
      isLeaf: true
    } ]
  } ]
} ];

/** init data */
public nzOptions = null;

/** ngModel value */
public values: any[] = null;

ngOnInit(): void {
  // let's set nzOptions in a asynchronous way
  setTimeout(() => {
    this.nzOptions = options;
  }, 100);
}

public changeNzOptions(): void {
  if (this.nzOptions === options) {
    this.nzOptions = otherOptions;
  } else {
    this.nzOptions = options;
  }
}

public onChanges(values: any): void {
  console.log(values, this.values);
}

.ant-cascader-picker {
  width: 300px;
}
.change-options {
  display: inline-block;
  font-size: 12px;
  margin-top: 8px;
}

15.默认值与延迟加载
默认值通过数组的方式指定，但nzOptions没有赋值，通过nzLoadData函数延迟加载。
<nz-cascader [(ngModel)]="values" [nzLoadData]="loadData" (ngModelChange)="onChanges($event)">
</nz-cascader>
const provinces = [{
  value: 'zhejiang',
  label: 'Zhejiang'
}, {
  value: 'jiangsu',
  label: 'Jiangsu'
}];

const cities = {
  zhejiang: [{
    value: 'hangzhou',
    label: 'Hangzhou'
  }, {
    value: 'ningbo',
    label: 'Ningbo',
    isLeaf: true
  }],
  jiangsu: [{
    value: 'nanjing',
    label: 'Nanjing'
  }]
};

const scenicspots = {
  hangzhou: [{
    value: 'xihu',
    label: 'West Lake',
    isLeaf: true
  }],
  nanjing: [{
    value: 'zhonghuamen',
    label: 'Zhong Hua Men',
    isLeaf: true
  }]
};

/** ngModel value */
public values: any[] = ['zhejiang', 'hangzhou', 'xihu'];

public onChanges(values: any): void {
  console.log(values, this.values);
}

/** load data async execute by `nzLoadData` method */
public loadData(node: any, index: number): PromiseLike<any> {
  return new Promise((resolve) => {
    setTimeout(() => {
      if (index < 0) { // if index less than 0 it is root node
        node.children = provinces;
      } else if (index === 0) {
        node.children = cities[node.value];
      } else {
        node.children = scenicspots[node.value];
      }
      resolve();
    }, 1000);
  });
}

16.默认值与异步列表
默认值通过数组的方式指定，但nzOptions通过异步加载。
<nz-cascader [(ngModel)]="values" [nzOptions]="nzOptions" (ngModelChange)="onChanges($event)">
</nz-cascader>
const options = [{
  value: 'zhejiang',
  label: 'Zhejiang',
  children: [{
    value: 'hangzhou',
    label: 'Hangzhou',
    children: [{
      value: 'xihu',
      label: 'West Lake',
      isLeaf: true
    }]
  }, {
    value: 'ningbo',
    label: 'Ningbo',
    isLeaf: true
  }]
}, {
  value: 'jiangsu',
  label: 'Jiangsu',
  children: [{
    value: 'nanjing',
    label: 'Nanjing',
    children: [{
      value: 'zhonghuamen',
      label: 'Zhong Hua Men',
      isLeaf: true
    }]
  }]
}];

/** init data */
public nzOptions = null;

/** ngModel value */
public values: any[] = ['zhejiang', 'hangzhou', 'xihu'];

public onChanges(values: any): void {
  console.log(values, this.values);
}

ngOnInit(): void {
  setTimeout(() => {
    this.nzOptions = options;
  }, 500);
}

17.API
<nz-cascader [nzOptions]="options" [(ngModel)]="values"></nz-cascader>

nz-cascader
[ngModel]	指定选中项	any[]	-
[nzAllowClear]	是否支持清除	boolean	true
[nzAutoFocus]	是否自动聚焦，当存在输入框时	boolean	false
[nzChangeOn]	点击父级菜单选项时，可通过该函数判断是否允许值的变化	function(option: any, index: number) => boolean	-
[nzChangeOnSelect]	当此项为 true 时，点选每级菜单选项值都会发生变化，具体见上面的演示	boolean	false
[nzColumnClassName]	自定义浮层列类名	string	-
[nzDisabled]	禁用	boolean	false
[nzExpandTrigger]	次级菜单的展开方式，可选 'click' 和 'hover'	string	'click'
[nzMenuClassName]	自定义浮层类名	string	-
[nzMenuStyle]	自定义浮层样式	object	-
[nzLabelProperty]	选项的显示值的属性名	string	'label'
[nzLabelRender]	选择后展示的渲染模板	TemplateRef<any>	-
[nzLoadData]	用于动态加载选项。如果提供了ngModel初始值，且未提供nzOptions值，则会立即触发动态加载。	(option: any, index?: index) => PromiseLike<any>	-
[nzOptions]	可选项数据源	object[]	-
[nzPlaceHolder]	输入框占位文本	string	'请选择'
[nzShowArrow]	是否显示箭头	boolean	true
[nzShowInput]	显示输入框	boolean	true
[nzShowSearch]	是否支持搜索，默认情况下对 label 进行全匹配搜索，不能和 [nzLoadData] 同时使用	booleanNzShowSearchOptions	false
[nzSize]	输入框大小，可选 largedefaultsmall	string	default
[nzValueProperty]	选项的实际值的属性名	string	'value'
(ngModelChange)	值发生变化时触发	EventEmitter<any[]>	-
(nzClear)	清空值时触发	EventEmitter<void>	-
(nzVisibleChange)	菜单浮层的显示/隐藏	EventEmitter<boolean>	-
(nzSelect)	选中菜单选项时触发	EventEmitter<{option: any, index: number}>	-
(nzSelectionChange)	选中菜单选项时触发	EventEmitter<any[]>	-

nzShowSearch 为对象时需遵守 NzShowSearchOptions 接口：
filter	可选，选择是否保留选项的过滤函数，每级菜单的选项都会被匹配	(inputValue: string, path: CascaderOption[]): boolean	-
sorter	可选，按照到每个最终选项的路径进行排序，默认按照原始数据的顺序	(a: CascaderOption[], b: CascaderOption[], inputValue: string): number	

方法
blur()	移除焦点
focus()	获取焦点
closeMenu()	隐藏菜单


三.Checkbox多选框
1.基本用法 简单的 checkbox。
<label nz-checkbox [(ngModel)]="checked">Checkbox</label>
checked = true;

2.checkbox 不可用
<label nz-checkbox nzDisabled [ngModel]="false"></label>
<br>
<label nz-checkbox nzDisabled [ngModel]="true"></label>

3.受控的 Checkbox
联动 checkbox。
<p style="margin-bottom: 20px;">
  <label nz-checkbox [(ngModel)]="isCheckedButton" [nzDisabled]="isDisabledButton">{{ isCheckedButton ? 'Checked' : 'Unchecked' }} - {{ isDisabledButton ? 'Disabled' : 'Enabled' }}</label>
</p>
<p>
  <button nz-button [nzType]="'primary'" (click)="checkButton()" [nzSize]="'small'">{{ !isCheckedButton ? 'Checked' : 'Unchecked' }}</button>
  <button nz-button [nzType]="'primary'" (click)="disableButton()" [nzSize]="'small'">{{ isDisabledButton ? 'Enabled' : 'Disabled' }}</button>
</p>

isCheckedButton = true;
isDisabledButton = false;

checkButton(): void {
  this.isCheckedButton = !this.isCheckedButton;
}

disableButton(): void {
  this.isDisabledButton = !this.isDisabledButton;
}

button {
  margin-right: 8px;
}

4.Checkbox 组
方便的从数组生成 Checkbox 组。
<nz-checkbox-group [(ngModel)]="checkOptionsOne" (ngModelChange)="log(checkOptionsOne)"></nz-checkbox-group>
<br>
<br>
<nz-checkbox-group [(ngModel)]="checkOptionsTwo" (ngModelChange)="log(checkOptionsTwo)"></nz-checkbox-group>
<br>
<br>
<nz-checkbox-group [(ngModel)]="checkOptionsThree" (ngModelChange)="log(checkOptionsThree)"></nz-checkbox-group>

checkOptionsOne = [
  { label: 'Apple', value: 'Apple', checked: true },
  { label: 'Pear', value: 'Pear' },
  { label: 'Orange', value: 'Orange' }
];
checkOptionsTwo = [
  { label: 'Apple', value: 'Apple' },
  { label: 'Pear', value: 'Pear', checked: true },
  { label: 'Orange', value: 'Orange' }
];
checkOptionsThree = [
  { label: 'Apple', value: 'Apple', disabled: true, checked: true },
  { label: 'Pear', value: 'Pear', disabled: true },
  { label: 'Orange', value: 'Orange' }
];

log(value: object[]): void {
  console.log(value);
}

5.全选
在实现全选效果时，你可能会用到 nzIndeterminate 属性。
<div style="border-bottom: 1px solid rgb(233, 233, 233);">
  <label nz-checkbox [(ngModel)]="allChecked" (ngModelChange)="updateAllChecked()" [nzIndeterminate]="indeterminate">Check all</label>
</div>
<br>
<nz-checkbox-group [(ngModel)]="checkOptionsOne" (ngModelChange)="updateSingleChecked()"></nz-checkbox-group>

allChecked = false;
indeterminate = true;
checkOptionsOne = [
  { label: 'Apple', value: 'Apple', checked: true },
  { label: 'Pear', value: 'Pear', checked: false },
  { label: 'Orange', value: 'Orange', checked: false }
];

updateAllChecked(): void {
  this.indeterminate = false;
  if (this.allChecked) {
    this.checkOptionsOne.forEach(item => item.checked = true);
  } else {
    this.checkOptionsOne.forEach(item => item.checked = false);
  }
}

updateSingleChecked(): void {
  if (this.checkOptionsOne.every(item => item.checked === false)) {
    this.allChecked = false;
    this.indeterminate = false;
  } else if (this.checkOptionsOne.every(item => item.checked === true)) {
    this.allChecked = true;
    this.indeterminate = false;
  } else {
    this.indeterminate = true;
  }
}

6.布局
nz-checkbox-wrapper 内嵌 nz-checkbox 并与 Grid 组件一起使用，可以实现灵活的布局。
<nz-checkbox-wrapper style="width: 100%;" (nzOnChange)="log($event)">
  <div nz-row>
    <div nz-col nzSpan="8"><label nz-checkbox nzValue="A" [ngModel]="true">A</label></div>
    <div nz-col nzSpan="8"><label nz-checkbox nzValue="B">B</label></div>
    <div nz-col nzSpan="8"><label nz-checkbox nzValue="C">C</label></div>
    <div nz-col nzSpan="8"><label nz-checkbox nzValue="D">D</label></div>
    <div nz-col nzSpan="8"><label nz-checkbox nzValue="E">E</label></div>
  </div>
</nz-checkbox-wrapper>

log(value: string[]): void {
  console.log(value);
}

7.API
[nz-checkbox]
[nzAutoFocus]	自动获取焦点	boolean	false
[nzDisabled]	设定 disable 状态	boolean	false
[ngModel]	指定当前是否选中，可双向绑定	boolean	false
[nzIndeterminate]	设置 indeterminate 状态，只负责样式控制	boolean	false
[nzValue]	仅与 nz-checkbox-wrapper 的选中回调配合使用	string	-
(ngModelChange)	选中变化时回调	EventEmitter<boolean>	-

nz-checkbox-group
[ngModel]	指定可选项，可双向绑定	Array<{ label: string; value: string; checked?: boolean; }>	[]
[nzDisabled]	设定全部 checkbox disable 状态	boolean	false
(ngModelChange)	选中数据变化时的回调	EventEmitter<Array<{ label: string; value: string; checked?: boolean; }>>	-

nz-checkbox-wrapper
(nzOnChange)	选中数据变化时的回调	EventEmitter<string[]>	-

方法
focus()	获取焦点
blur()	移除焦点


四.DatePicker日期选择框
1.最简单的用法，在浮层中可以选择或者输入日期。
<nz-date-picker [(ngModel)]="date" (ngModelChange)="onChange($event)"></nz-date-picker>
<br>
<nz-month-picker [(ngModel)]="date" (ngModelChange)="onChange($event)" nzPlaceHolder="Select month"></nz-month-picker>
<br>
<nz-year-picker [(ngModel)]="date" (ngModelChange)="onChange($event)" nzPlaceHolder="Select year"></nz-year-picker>
<br>
<nz-range-picker [(ngModel)]="dateRange" (ngModelChange)="onChange($event)" nzShowTime></nz-range-picker>
<br>
<nz-week-picker [(ngModel)]="date" (ngModelChange)="getWeek($event)" nzPlaceHolder="Select week"></nz-week-picker>
<br>
<button nz-button nzType="default" (click)="changeLanguage()">Switch language for all pickers</button>

cnpm i date-fns -S //安装date-fns模块

import { getISOWeek } from 'date-fns';
import { en_US, zh_CN, NzI18nService } from 'ng-zorro-antd';

date = null; // new Date();
dateRange = []; // [ new Date(), addDays(new Date(), 3) ];
isEnglish = false;

constructor(private i18n: NzI18nService) {}

onChange(result: Date): void {
  console.log('onChange: ', result);
}

getWeek(result: Date): void {
  console.log('result',result);
  console.log('week: ', getISOWeek(result));
}

changeLanguage(): void {
  this.i18n.setLocale(this.isEnglish ? zh_CN : en_US);
  this.isEnglish = !this.isEnglish;
}

2.日期格式
使用 nzFormat 属性，可以自定义日期显示格式。
<nz-date-picker [nzFormat]="dateFormat"></nz-date-picker>
<br>
<nz-month-picker [nzFormat]="monthFormat"></nz-month-picker>
<br>
<nz-range-picker [nzFormat]="dateFormat"></nz-range-picker>

dateFormat = 'yyyy/MM/dd';
monthFormat = 'yyyy/MM';

3.三种大小
三种大小的输入框，若不设置，则为 default。
<nz-radio-group [(ngModel)]="size">
  <label nz-radio-button nzValue="large">large</label>
  <label nz-radio-button nzValue="default">default</label>
  <label nz-radio-button nzValue="small">small</label>
</nz-radio-group>
<br /><br />
<nz-date-picker [nzSize]="size"></nz-date-picker>
<br />
<nz-month-picker [nzSize]="size" nzPlaceHolder="Select Month"></nz-month-picker>
<br />
<nz-range-picker [nzSize]="size"></nz-range-picker>
<br />
<nz-week-picker [nzSize]="size" nzPlaceHolder="Select Week"></nz-week-picker>

size = 'default';

4.日期时间选择
增加选择时间功能，当 showTime 为一个对象时，其属性会传递给内建的 TimePicker。
<nz-date-picker nzShowTime nzFormat="yyyy-MM-dd HH:mm:ss" nzPlaceHolder="Select Time" (ngModelChange)="onChange($event)" (nzOnOk)="onOk($event)">
</nz-date-picker>
<br>
<nz-range-picker [nzShowTime]="{ nzFormat: 'HH:mm' }" nzFormat="yyyy-MM-dd HH:mm" [nzPlaceHolder]="[ 'Start Time', 'End Time' ]" (ngModelChange)="onChange($event)" (nzOnOk)="onOk($event)"></nz-range-picker>

onChange(result: Date): void {
  console.log('Selected Time: ', result);
}

onOk(result: Date): void {
  console.log('onOk', result);
}

5.禁用
选择框的不可用状态。
<nz-date-picker nzDisabled></nz-date-picker>
<br>
<nz-month-picker nzDisabled></nz-month-picker>
<br>
<nz-range-picker nzDisabled></nz-range-picker>

6.不可选择日期和时间
可用 nzDisabledDate 和 nzDisabledTime 分别禁止选择部分日期和时间。
<nz-date-picker nzFormat="yyyy-MM-dd HH:mm:ss" [nzDisabledDate]="disabledDate" [nzDisabledTime]="disabledDateTime" [nzShowTime]="{ nzDefaultOpenValue: timeDefaultValue }">
</nz-date-picker>
<br>
<nz-month-picker [nzDisabledDate]="disabledDate" nzPlaceHolder="Select month"></nz-month-picker>
<br>
<nz-range-picker [nzDisabledDate]="disabledDate" [nzDisabledTime]="disabledRangeTime" [nzShowTime]="{ nzHideDisabledOptions: true, nzDefaultOpenValue: timeDefaultValue }" nzFormat="yyyy-MM-dd HH:mm:ss"></nz-range-picker>

import { getISOWeek ,differenceInCalendarDays ,setHours} from 'date-fns';

today = new Date();
timeDefaultValue = setHours(new Date(), 0);

range(start: number, end: number): number[] {
  const result = [];
  for (let i = start; i < end; i++) {
    result.push(i);
  }
  return result;
}

disabledDate = (current: Date): boolean => {
  // Can not select days before today and today
  return differenceInCalendarDays(current, this.today) > 0;
};

disabledDateTime = (): object => {
  return {
    nzDisabledHours  : () => this.range(0, 24).splice(4, 20),
    nzDisabledMinutes: () => this.range(30, 60),
    nzDisabledSeconds: () => [ 55, 56 ]
  };
};

disabledRangeTime = (value: Date[], type: 'start' | 'end'): object => {
  if (type === 'start') {
    return {
      nzDisabledHours  : () => this.range(0, 60).splice(4, 20),
      nzDisabledMinutes: () => this.range(30, 60),
      nzDisabledSeconds: () => [ 55, 56 ]
    };
  }
  return {
    nzDisabledHours  : () => this.range(0, 60).splice(20, 4),
    nzDisabledMinutes: () => this.range(0, 31),
    nzDisabledSeconds: () => [ 55, 56 ]
  };
};

7.自定义日期范围选择
当 RangePicker 无法满足业务需求时，可以使用两个 DatePicker 实现类似的功能。

通过设置 nzDisabledDate 方法，来约束开始和结束日期。
通过 nzOpennzOnOpenChange 来优化交互。

<nz-date-picker [nzDisabledDate]="disabledStartDate" nzShowTime nzFormat="yyyy-MM-dd HH:mm:ss" [(ngModel)]="startValue" nzPlaceHolder="Start" (ngModelChange)="onStartChange($event)" (nzOnOpenChange)="handleStartOpenChange($event)">
</nz-date-picker>
<nz-date-picker [nzDisabledDate]="disabledEndDate" nzShowTime nzFormat="yyyy-MM-dd HH:mm:ss" [(ngModel)]="endValue" nzPlaceHolder="End" [nzOpen]="endOpen" (ngModelChange)="onEndChange($event)" (nzOnOpenChange)="handleEndOpenChange($event)">
</nz-date-picker>

startValue: Date = null;
  endValue: Date = null;
  endOpen: boolean = false;

  disabledStartDate = (startValue: Date): boolean => {
    if (!startValue || !this.endValue) {
      return false;
    }
    console.log(startValue.getTime() > this.endValue.getTime());
    return startValue.getTime() > this.endValue.getTime();
  };

  disabledEndDate = (endValue: Date): boolean => {
    if (!endValue || !this.startValue) {
      return false;
    }
    console.log(endValue.getTime() <= this.startValue.getTime());
    return endValue.getTime() <= this.startValue.getTime();
  };

  onStartChange(date: Date): void {
    this.startValue = date;
  }

  onEndChange(date: Date): void {
    this.endValue = date;
  }

  handleStartOpenChange(open: boolean): void {
    if (!open) {
      this.endOpen = true;
    }
    console.log('handleStartOpenChange', open, this.endOpen);
  }

  handleEndOpenChange(open: boolean): void {
    console.log(open);
    this.endOpen = open;
  }

8.预设范围
RangePicker 可以设置常用的 预设范围 提高用户体验。
<nz-range-picker [nzRanges]="ranges1" ngModel (ngModelChange)="onChange($event)"></nz-range-picker>
<br>
<nz-range-picker [nzRanges]="ranges1" nzShowTime nzFormat="yyyy/MM/dd HH:mm:ss" ngModel (ngModelChange)="onChange($event)"></nz-range-picker>

import { getISOWeek ,differenceInCalendarDays ,setHours ,endOfMonth} from 'date-fns';

ranges1 = { 'Today': [ new Date(), new Date() ], 'This Month': [ new Date(), endOfMonth(new Date()) ] };
ranges2 = { 'Today': [ new Date(), new Date() ], 'This Month': [ new Date(), endOfMonth(new Date()) ] };

onChange(result: Date[]): void {
  console.log('From: ', result[ 0 ], ', to: ', result[ 1 ]);
}

9.受控面板
通过组合 nzMode 与 nzOnPanelChange 控制要展示的面板。
<nz-date-picker [nzMode]="dateMode" nzShowTime (nzOnOpenChange)="handleDateOpenChange($event)" (nzOnPanelChange)="handleDatePanelChange($event)">
</nz-date-picker>

dateMode = 'time';

handleDateOpenChange(open: boolean): void {
  if (open) {
    this.dateMode = 'time';
  }
}

handleDatePanelChange(mode: string): void {
  console.log('handleDatePanelChange: ', mode);
}

10.额外的页脚
在浮层中加入额外的页脚，以满足某些定制信息的需求。
<nz-date-picker [nzRenderExtraFooter]="footerRender"></nz-date-picker>
<nz-date-picker [nzRenderExtraFooter]="plainFooter" nzShowTime></nz-date-picker>
<nz-range-picker [nzRenderExtraFooter]="footerRender"></nz-range-picker>
<nz-range-picker [nzRenderExtraFooter]="plainFooter" nzShowTime></nz-range-picker>
<nz-month-picker [nzRenderExtraFooter]="footerRender" nzPlaceHolder="Select month"></nz-month-picker>

plainFooter = 'plain extra footer';
footerRender = () => 'extra footer';

11.定制日期单元格
使用 nzDateRender 可以自定义日期单元格的内容和样式。
<nz-date-picker [nzDateRender]="tplRender"></nz-date-picker>
<nz-range-picker [nzDateRender]="tplRender"></nz-range-picker>

<ng-template #tplRender let-current>
  <div class="ant-calendar-date" [class.border]="current.getDate() === 1">{{ current.getDate() }}</div>
</ng-template>

nz-date-picker, nz-month-picker, nz-range-picker, nz-week-picker {
  margin: 0 8px 12px 0;
}
.border{
  border: 1px solid #1890ff;
  border-radius: 50%;
}

12.API
注意：nz-date-picker 的部分 locale 来自于 Angular 自身的国际化支持，需要在 app.module.ts 文件中 引入相应的 Angular 语言包。
例如：

import { registerLocaleData } from '@angular/common';
import zh from '@angular/common/locales/zh';
registerLocaleData(zh);

日期类组件包括以下四种形式。
nz-date-picker
nz-month-picker
nz-range-picker
nz-week-picker
注意： 所有输入输出日期对象均为 Date，你可以通过 date-fns 工具库获得你需要的数据。


以下 API 为 nz-date-picker、nz-month-picker、nz-range-picker, nz-week-picker 共享的 API。
[nzAllowClear]	是否显示清除按钮	boolean	true
[nzAutoFocus]	自动获取焦点	boolean	false
[nzClassName]	选择器 className	string	''
[nzDateRender]	自定义日期单元格的内容（month-picker/year-picker不支持）	TemplateRef<Date> / string or (d: Date) => TemplateRef<Date> / string	-
[nzDisabled]	禁用	boolean	false
[nzDisabledDate]	不可选择的日期（year-picker不支持）	(current: Date) => boolean	无
[nzLocale]	国际化配置	object	默认配置
[nzOpen]	控制弹层是否展开	boolean	-
[nzPopupStyle]	额外的弹出日历样式	object	{}
[nzDropdownClassName]	额外的弹出日历 className	string	-
[nzSize]	输入框大小，large 高度为 40px，small 为 24px，默认是 32px	string	无
[nzStyle]	自定义输入框样式	object	{}
(nzOnOpenChange)	弹出日历和关闭日历的回调	EventEmitter<boolean>	无

nz-date-picker
[ngModel]	日期	Date	无
[nzDisabledTime]	不可选择的时间	(current: Date) => { nzDisabledHours, nzDisabledMinutes, nzDisabledSeconds }	无
[nzFormat]	展示的日期格式，配置参考 DatePipe	string	"yyyy-MM-dd"
[nzRenderExtraFooter]	在面板中添加额外的页脚	TemplateRef / string or () => TemplateRef / string	-
[nzShowTime]	增加时间选择功能	object / boolean	TimePicker Options
[nzShowToday]	是否展示“今天”按钮	boolean	true
[nzPlaceHolder]	输入框提示文字	string	-
(nzOnOk)	点击确定按钮的回调	EventEmitter<Date>	-
(ngModelChange)	时间发生变化的回调	EventEmitter<Date>	无

nz-year-picker
[ngModel]	日期	Date	无
[nzFormat]	展示的日期格式，配置参考 DatePipe	string	"yyyy"
[nzRenderExtraFooter]	在面板中添加额外的页脚	TemplateRef / string or () => TemplateRef / string	-
[nzPlaceHolder]	输入框提示文字	string	-
(ngModelChange)	时间发生变化的回调	EventEmitter<Date>	无


nz-month-picker
[ngModel]	日期	Date	无
[nzFormat]	展示的日期格式，配置参考 DatePipe	string	"yyyy-MM"
[nzRenderExtraFooter]	在面板中添加额外的页脚	TemplateRef / string or () => TemplateRef / string	-
[nzPlaceHolder]	输入框提示文字	string	-
(ngModelChange)	时间发生变化的回调	EventEmitter<Date>	无

nz-week-picker
[ngModel]	日期	Date	无
[nzFormat]	展示的日期格式，配置参考 DatePipe	string	"yyyy-ww"
[nzPlaceHolder]	输入框提示文字	string	-
(ngModelChange)	时间发生变化的回调	EventEmitter<Date>	无

nz-range-picker
[ngModel]	日期	Date[]	无
[nzDisabledTime]	不可选择的时间	(current: Date, partial: 'start' / 'end') => { nzDisabledHours, nzDisabledMinutes, nzDisabledSeconds }	无
[nzFormat]	展示的日期格式	string	"yyyy-MM-dd"
[nzRanges]	预设时间范围快捷选择	{ [ key: string ]: Date[] }	无
[nzRenderExtraFooter]	在面板中添加额外的页脚	TemplateRef / string or () => TemplateRef / string	-
[nzShowTime]	增加时间选择功能	object / boolean	TimePicker Options
[nzPlaceHolder]	输入框提示文字	string[]	-
(nzOnOk)	点击确定按钮的回调	EventEmitter<Date[]>	-
(ngModelChange)	时间发生变化的回调	EventEmitter<Date[]>	无

nzShowTime 中当前支持的 nz-time-picker 参数有：nzFormat, nzHourStep, nzMinuteStep, nzSecondStep, nzDisabledHours, nzDisabledMinutes, nzDisabledSeconds, nzHideDisabledOptions, nzDefaultOpenValue, nzAddOn

五.Form表单

我们提供了以下三种排列方式：
水平排列：标签和表单控件水平排列；（默认）
垂直排列：标签和表单控件上下垂直排列；
行内排列：表单项水平行内排列。

表单项 nz-form-item#
表单项用于区分表单中不同的区域，包含表单域和表单标签(可选)。

表单标签 nz-form-label#
用于标示当前表单项的内容，可选。

表单域 nz-form-control#
表单一定会包含表单域，表单域可以是输入控件，标准表单域，标签，下拉菜单，文本域等。

<form nz-form>
  <nz-form-item>
    <nz-form-label [nzSpan]="6" nzFor="email">E-mail</nz-form-label>
    <nz-form-control [nzSpan]="14">
      <input nz-input name="email" type="email" id="email">
    </nz-form-control>
  </nz-form-item >
</form>


1.水平登录栏
水平登录栏，常用在顶部导航栏中。
import { Component, OnInit } from '@angular/core';
import {
  FormBuilder,
  FormGroup,
  Validators
} from '@angular/forms';

@Component({
  selector: 'nz-demo-form-horizontal-login',
  template: `
    <form nz-form [nzLayout]="'inline'" [formGroup]="validateForm" (ngSubmit)="submitForm()">
      <nz-form-item>
        <nz-form-control>
          <nz-input-group [nzPrefix]="prefixUser">
            <input formControlName="userName" nz-input placeholder="Username">
          </nz-input-group>
          <nz-form-explain *ngIf="validateForm.get('userName').dirty && validateForm.get('userName').errors">Please input your username!</nz-form-explain>
        </nz-form-control>
      </nz-form-item>
      <nz-form-item>
        <nz-form-control>
          <nz-input-group [nzPrefix]="prefixLock">
            <input formControlName="password" nz-input type="password" placeholder="Password">
          </nz-input-group>
          <nz-form-explain *ngIf="validateForm.get('password').dirty && validateForm.get('password').errors">Please input your Password!</nz-form-explain>
        </nz-form-control>
      </nz-form-item>
      <nz-form-item>
        <nz-form-control>
          <button nz-button nzType="primary" [disabled]="!validateForm.valid">Log in</button>
        </nz-form-control>
      </nz-form-item>
    </form>
    <ng-template #prefixUser><i nz-icon type="user"></i></ng-template>
    <ng-template #prefixLock><i nz-icon type="lock"></i></ng-template>
`
})
export class NzDemoFormHorizontalLoginComponent implements OnInit {
  validateForm: FormGroup;

  submitForm(): void {
    console.log('userName',this.validateForm.get('userName').value);
    console.log('password',this.validateForm.get('password').value);
    for (const i in this.validateForm.controls) {
      this.validateForm.controls[ i ].markAsDirty();
      this.validateForm.controls[ i ].updateValueAndValidity();
    }
  }

  constructor(private fb: FormBuilder) {
  }

  ngOnInit(): void {
    this.validateForm = this.fb.group({
      userName: [ null, [ Validators.required ] ],
      password: [ null, [ Validators.required ] ],
      remember: [ true ]
    });
  }
}

2.登录框
普通的登录框，可以容纳更多的元素。
import { Component, OnInit } from '@angular/core';
import {
  AbstractControl,
  FormBuilder,
  FormGroup,
  Validators
} from '@angular/forms';

@Component({
  selector: 'nz-demo-form-normal-login',
  template: `
    <form nz-form [formGroup]="validateForm" class="login-form" (ngSubmit)="submitForm()">
      <nz-form-item>
        <nz-form-control>
          <nz-input-group [nzPrefix]="prefixUser">
            <input type="text" nz-input formControlName="userName" placeholder="Username">
          </nz-input-group>
          <nz-form-explain *ngIf="validateForm.get('userName').dirty && validateForm.get('userName').errors">Please input your username!</nz-form-explain>
        </nz-form-control>
      </nz-form-item>
      <nz-form-item>
        <nz-form-control>
          <nz-input-group [nzPrefix]="prefixLock">
            <input type="password" nz-input formControlName="password" placeholder="Password">
          </nz-input-group>
          <nz-form-explain *ngIf="validateForm.get('password').dirty && validateForm.get('password').errors">Please input your Password!</nz-form-explain>
        </nz-form-control>
      </nz-form-item>
      <nz-form-item>
        <nz-form-control>
          <label nz-checkbox formControlName="remember">
            <span>Remember me</span>
          </label>
          <a class="login-form-forgot" class="login-form-forgot">Forgot password</a>
          <button nz-button class="login-form-button" [nzType]="'primary'">Log in</button>
          Or
          <a href="">register now!</a>
        </nz-form-control>
      </nz-form-item>
    </form>
    <ng-template #prefixUser><i nz-icon type="user"></i></ng-template>
    <ng-template #prefixLock><i nz-icon type="lock"></i></ng-template>
  `,
  styles: [ `
    .login-form {
      max-width: 300px;
    }

    .login-form-forgot {
      float: right;
    }

    .login-form-button {
      width: 100%;
    }
  `
  ]
})
export class NzDemoFormNormalLoginComponent implements OnInit {
  validateForm: FormGroup;

  submitForm(): void {
    for (const i in this.validateForm.controls) {
      this.validateForm.controls[ i ].markAsDirty();
      this.validateForm.controls[ i ].updateValueAndValidity();
    }
  }

  constructor(private fb: FormBuilder) {
  }

  ngOnInit(): void {
    this.validateForm = this.fb.group({
      userName: [ null, [ Validators.required ] ],
      password: [ null, [ Validators.required ] ],
      remember: [ true ]
    });
  }
}

3.注册新用户
用户填写必须的信息以注册新用户。
import { Component, OnInit } from '@angular/core';
import {
  FormBuilder,
  FormControl,
  FormGroup,
  Validators
} from '@angular/forms';


@Component({
  selector: 'login',
  // templateUrl: './login.component.pug',
  // styleUrls: ['./login.component.less'],
  template: `
    <form nz-form [formGroup]="validateForm" (ngSubmit)="submitForm()">
      <nz-form-item>
        <nz-form-label [nzSm]="6" [nzXs]="24" nzRequired nzFor="email">E-mail</nz-form-label>
        <nz-form-control [nzSm]="14" [nzXs]="24">
          <input nz-input formControlName="email" id="email">
          <nz-form-explain *ngIf="validateForm.get('email').dirty && validateForm.get('email').errors">The input is not valid E-mail!</nz-form-explain>
        </nz-form-control>
      </nz-form-item>
      <nz-form-item>
        <nz-form-label [nzSm]="6" [nzXs]="24" nzFor="password" nzRequired>Password</nz-form-label>
        <nz-form-control [nzSm]="14" [nzXs]="24">
          <input nz-input type="password" id="password" formControlName="password" (ngModelChange)="updateConfirmValidator()">
          <nz-form-explain *ngIf="validateForm.get('password').dirty && validateForm.get('password').errors">Please input your password!</nz-form-explain>
        </nz-form-control>
      </nz-form-item>
      <nz-form-item>
        <nz-form-label [nzSm]="6" [nzXs]="24" nzFor="checkPassword" nzRequired>Confirm Password</nz-form-label>
        <nz-form-control [nzSm]="14" [nzXs]="24">
          <input nz-input type="password" formControlName="checkPassword" id="checkPassword">
          <nz-form-explain *ngIf="validateForm.get('checkPassword').dirty && validateForm.get('checkPassword').errors">
            <ng-container *ngIf="validateForm.get('checkPassword').hasError('required')">
              Please confirm your password!
            </ng-container>
            <ng-container *ngIf="validateForm.get('checkPassword').hasError('confirm')">
              Two passwords that you enter is inconsistent!
            </ng-container>
          </nz-form-explain>
        </nz-form-control>
      </nz-form-item>
      <nz-form-item>
        <nz-form-label [nzSm]="6" [nzXs]="24" nzFor="nickname" nzRequired>
          <span>
            Nickname
            <i nz-icon nz-tooltip nzTitle="What do you want other to call you" type="question-circle" theme="outline"></i>
          </span>
        </nz-form-label>
        <nz-form-control [nzSm]="14" [nzXs]="24">
          <input nz-input id="nickname" formControlName="nickname">
          <nz-form-explain *ngIf="validateForm.get('nickname').dirty && validateForm.get('nickname').errors">Please input your nickname!</nz-form-explain>
        </nz-form-control>
      </nz-form-item>
      <nz-form-item>
        <nz-form-label [nzSm]="6" [nzXs]="24" nzFor="phoneNumber" nzRequired>Phone Number</nz-form-label>
        <nz-form-control [nzSm]="14" [nzXs]="24" [nzValidateStatus]="validateForm.controls['phoneNumber']">
          <nz-input-group [nzAddOnBefore]="addOnBeforeTemplate">
            <ng-template #addOnBeforeTemplate>
              <nz-select formControlName="phoneNumberPrefix" style="width: 70px;">
                <nz-option nzLabel="+86" nzValue="+86"></nz-option>
                <nz-option nzLabel="+87" nzValue="+87"></nz-option>
              </nz-select>
            </ng-template>
            <input formControlName="phoneNumber" id="'phoneNumber'" nz-input>
          </nz-input-group>
          <nz-form-explain *ngIf="validateForm.get('phoneNumber').dirty && validateForm.get('phoneNumber').errors">Please input your phone number!</nz-form-explain>
        </nz-form-control>
      </nz-form-item>
      <nz-form-item>
        <nz-form-label [nzSm]="6" [nzXs]="24" nzFor="website" nzRequired>Website</nz-form-label>
        <nz-form-control [nzSm]="14" [nzXs]="24">
          <input nz-input id="website" formControlName="website" placeholder="website">
          <nz-form-explain *ngIf="validateForm.get('website').dirty && validateForm.get('website').errors">Please input website!</nz-form-explain>
        </nz-form-control>
      </nz-form-item>
      <nz-form-item>
        <nz-form-label [nzSm]="6" [nzXs]="24" nzFor="captcha" nzRequired>Captcha</nz-form-label>
        <nz-form-control [nzSm]="14" [nzXs]="24">
          <div nz-row [nzGutter]="8">
            <div nz-col [nzSpan]="12">
              <input nz-input formControlName="captcha" id="captcha">
            </div>
            <div nz-col [nzSpan]="12">
              <button nz-button (click)="getCaptcha($event)">Get captcha</button>
            </div>
          </div>
          <nz-form-explain *ngIf="validateForm.get('captcha').dirty && validateForm.get('captcha').errors">Please input the captcha you got!</nz-form-explain>
          <nz-form-extra>We must make sure that your are a human.</nz-form-extra>
        </nz-form-control>
      </nz-form-item>
      <nz-form-item nz-row style="margin-bottom:8px;">
        <nz-form-control [nzSpan]="14" [nzOffset]="6">
          <label nz-checkbox formControlName="agree">
            <span>I have read the <a>agreement</a></span>
          </label>
        </nz-form-control>
      </nz-form-item>
      <nz-form-item nz-row style="margin-bottom:8px;">
        <nz-form-control [nzSpan]="14" [nzOffset]="6">
          <button nz-button nzType="primary">Register</button>
        </nz-form-control>
      </nz-form-item>
    </form>`,

  styles: [
    `[nz-form] {
      max-width: 600px;
    }`
  ]
})
export class LoginComponent {
  validateForm: FormGroup;

  submitForm(): void {
    for (const i in this.validateForm.controls) {
      this.validateForm.controls[ i ].markAsDirty();  // 标记为修改过状态
      this.validateForm.controls[ i ].updateValueAndValidity(); // 标记为有效并更新
    }
  }

  updateConfirmValidator(): void {
    /** wait for refresh value */
    Promise.resolve().then(() => this.validateForm.controls.checkPassword.updateValueAndValidity());
  }

  confirmationValidator = (control: FormControl): { [ s: string ]: boolean } => {
    // 设置自定义验证条件
    // { [ s: string ]: boolean } 表示返回key ：value 其中value为true
    // validateForm.get('checkPassword').hasError('confirm') 捕获自定义错误

    if (!control.value) {
      return { required: true };
    } else if (control.value !== this.validateForm.controls.password.value) {
      return { confirm: true, error: true };
    }
  };

  getCaptcha(e: MouseEvent): void {
    e.preventDefault(); //阻止默认事件
  }

  constructor(private fb: FormBuilder) {
  }

  ngOnInit(): void {
    this.validateForm = this.fb.group({ 
      // 表单控件生成模型
      email            : [ null, [ Validators.email ] ],
      password         : [ null, [ Validators.required ] ],
      checkPassword    : [ null, [ Validators.required, this.confirmationValidator ] ],
      nickname         : [ null, [ Validators.required ] ],
      phoneNumberPrefix: [ '+86' ],
      phoneNumber      : [ null, [ Validators.required ] ],
      website          : [ null, [ Validators.required ] ],
      captcha          : [ null, [ Validators.required ] ],
      agree            : [ false ]
    });
  }
}

4.高级搜索
三列栅格式的表单排列方式，常用于数据表格的高级搜索。
有部分定制的样式代码，由于输入标签长度不确定，需要根据具体情况自行调整。
import { Component, OnInit } from '@angular/core';
import {
  FormBuilder,
  FormControl,
  FormGroup
} from '@angular/forms';



@Component({
  selector: 'login',
  // templateUrl: './login.component.pug',
  // styleUrls: ['./login.component.less'],
  template: `
    <form nz-form [formGroup]="validateForm" class="ant-advanced-search-form">
      <div nz-row [nzGutter]="24">
        <div nz-col [nzSpan]="8" *ngFor="let control of controlArray" [style.display]="control.show?'block':'none'">
          <nz-form-item nzFlex>
            <nz-form-label [nzFor]="'field'+control.index">Field {{control.index}}</nz-form-label>
            <nz-form-control>
              <input nz-input placeholder="placeholder" [formControlName]="'field'+control.index" [attr.id]="'field'+control.index">
            </nz-form-control>
          </nz-form-item>
        </div>
      </div>
      <div nz-row>
        <div nz-col [nzSpan]="24" style="text-align: right;">
          <button nz-button [nzType]="'primary'">Search</button>
          <button nz-button (click)="resetForm()">Clear</button>
          <a style="margin-left:8px;font-size:12px;" (click)="toggleCollapse()">
            Collapse
            <i nz-icon [type]="isCollapse?'down':'up'"></i>
          </a>
        </div>
      </div>
    </form>
    <div class="search-result-list">
      Search Result List
    </div>
  `,

  styles: [
      `
      .ant-advanced-search-form {
        padding: 24px;
        background: #fbfbfb;
        border: 1px solid #d9d9d9;
        border-radius: 6px;
      }

      .search-result-list {
        margin-top: 16px;
        border: 1px dashed #e9e9e9;
        border-radius: 6px;
        background-color: #fafafa;
        min-height: 200px;
        text-align: center;
        padding-top: 80px;
      }

      [nz-form-label] {
        overflow: visible;
      }

      button {
        margin-left: 8px;
      }
    `
  ]
})
export class LoginComponent {
  validateForm: FormGroup;
  controlArray = [];
  isCollapse = true;

  toggleCollapse(): void {
    this.isCollapse = !this.isCollapse;
    this.controlArray.forEach((c, index) => {
      c.show = this.isCollapse ? (index < 6) : true;
    });
  }

  resetForm(): void {
    this.validateForm.reset(); // 重置表单
  }

  constructor(private fb: FormBuilder) {
  }

  ngOnInit(): void {
    this.validateForm = this.fb.group({});
    for (let i = 0; i < 10; i++) {
      this.controlArray.push({ index: i, show: i < 6 });
      this.validateForm.addControl(`field${i}`, new FormControl()); // 往组中添加一个控件。包括控件名formControlName
    }
  }
}

5.动态增减表单项
动态增加、减少表单项。
import { Component, OnInit } from '@angular/core';
import {
  AbstractControl,
  FormBuilder,
  FormControl,
  FormGroup,
  Validators
} from '@angular/forms';



@Component({
  selector: 'login',
  // templateUrl: './login.component.pug',
  // styleUrls: ['./login.component.less'],
  template: `
    <form nz-form [formGroup]="validateForm" (ngSubmit)="submitForm()">
      <nz-form-item *ngFor="let control of controlArray;let i = index">
        <nz-form-label [nzXs]="24" [nzSm]="4" *ngIf="i==0" [nzFor]="control.controlInstance">Passengers</nz-form-label>
        <nz-form-control [nzXs]="24" [nzSm]="20" [nzOffset]="i==0?0:4">
          <input nz-input style="width: 60%; margin-right:8px;" placeholder="placeholder" [attr.id]="control.id" [formControlName]="control.controlInstance">
          <i nz-icon type="minus-circle-o" class="dynamic-delete-button" (click)="removeField(control,$event)"></i>
          <nz-form-explain *ngIf="getFormControl(control.controlInstance)?.dirty&&getFormControl(control.controlInstance)?.hasError('required')">
            Please input passenger's name or delete this field.
          </nz-form-explain>
        </nz-form-control>
      </nz-form-item>
      <nz-form-item>
        <nz-form-control [nzXs]="{span:24,offset:0}" [nzSm]="{span:20,offset:4}">
          <button nz-button nzType="dashed" style="width:60%" (click)="addField($event)"><i nz-icon type="plus"></i> Add field</button>
        </nz-form-control>
      </nz-form-item>
      <nz-form-item>
        <nz-form-control [nzXs]="{span:24,offset:0}" [nzSm]="{span:20,offset:4}">
          <button nz-button nzType="primary">Submit</button>
        </nz-form-control>
      </nz-form-item>
    </form>
  `,

  styles: [
      `
      .dynamic-delete-button {
        cursor: pointer;
        position: relative;
        top: 4px;
        font-size: 24px;
        color: #999;
        transition: all .3s;
      }

      .dynamic-delete-button:hover {
        color: #777;
      }

      [nz-form] {
        max-width: 600px;
      }
    `
  ]
})
export class LoginComponent {
  validateForm: FormGroup;
  controlArray: Array<{ id: number, controlInstance: string }> = [];

  addField(e?: MouseEvent): void {
    if (e) {
      e.preventDefault();
    }
    const id = (this.controlArray.length > 0) ? this.controlArray[ this.controlArray.length - 1 ].id + 1 : 0;

    const control = {
      id, // 相当于 id : id 避免重复的简写方式
      controlInstance: `passenger${id}`
    };
    const index = this.controlArray.push(control); // 返回新的长度
    console.log(this.controlArray[ this.controlArray.length - 1 ]);
    // 动态新增控件
    this.validateForm.addControl(this.controlArray[ index - 1 ].controlInstance, new FormControl(null, Validators.required));
  }

  removeField(i: { id: number, controlInstance: string }, e: MouseEvent): void {
    e.preventDefault(); // 阻止默认事件
    if (this.controlArray.length > 1) {
      const index = this.controlArray.indexOf(i);
      this.controlArray.splice(index, 1);
      console.log(this.controlArray);
      this.validateForm.removeControl(i.controlInstance); // FormGroup 从该组中移除一个控件。
    }
  }

  getFormControl(name: string): AbstractControl {
    return this.validateForm.controls[ name ];  //根据控件名 获取控件 
  }

  submitForm(): void {
    for (const i in this.validateForm.controls) {
      // 确认控件值已经被修改 并 更新 
      this.validateForm.controls[ i ].markAsDirty();
      this.validateForm.controls[ i ].updateValueAndValidity();
    }
    console.log(this.validateForm.value);
  }

  constructor(private fb: FormBuilder) {
  }

  ngOnInit(): void {
    this.validateForm = this.fb.group({});
    this.addField();
  }
}

6.时间类控件
时间类组件的输入和输出类型均为 Date 类型，可以通过 date-fns 工具库进行进一步的处理。
import { Component, OnInit } from '@angular/core';
import {
  FormBuilder,
  FormGroup,
  Validators
} from '@angular/forms';


@Component({
  selector: 'login',
  // templateUrl: './login.component.pug',
  // styleUrls: ['./login.component.less'],
  template: `
    <form nz-form [formGroup]="validateForm" (ngSubmit)="submitForm()">
      <nz-form-item>
        <nz-form-label [nzSm]="8" [nzXs]="24" nzRequired>DatePicker</nz-form-label>
        <nz-form-control [nzSm]="16" [nzXs]="24">
          <nz-date-picker formControlName="datePicker"></nz-date-picker>
        </nz-form-control>
      </nz-form-item>
      <nz-form-item>
        <nz-form-label [nzSm]="8" [nzXs]="24" nzRequired>DatePicker[ShowTime]</nz-form-label>
        <nz-form-control [nzSm]="16" [nzXs]="24">
          <nz-date-picker nzShowTime formControlName="datePickerTime"></nz-date-picker>
        </nz-form-control>
      </nz-form-item>
      <nz-form-item>
        <nz-form-label [nzSm]="8" [nzXs]="24" nzRequired>MonthPicker</nz-form-label>
        <nz-form-control [nzSm]="16" [nzXs]="24">
          <nz-month-picker formControlName="monthPicker"></nz-month-picker>
        </nz-form-control>
      </nz-form-item>
      <nz-form-item>
        <nz-form-label [nzSm]="8" [nzXs]="24" nzRequired>RangePicker</nz-form-label>
        <nz-form-control [nzSm]="16" [nzXs]="24">
          <nz-range-picker formControlName="rangePicker"></nz-range-picker>
        </nz-form-control>
      </nz-form-item>
      <nz-form-item>
        <nz-form-label [nzSm]="8" [nzXs]="24" nzRequired>RangePicker[showTime]</nz-form-label>
        <nz-form-control [nzSm]="16" [nzXs]="24">
          <nz-range-picker nzShowTime formControlName="rangePickerTime"></nz-range-picker>
        </nz-form-control>
      </nz-form-item>
      <nz-form-item>
        <nz-form-label [nzSm]="8" [nzXs]="24" nzRequired>TimePicker</nz-form-label>
        <nz-form-control [nzSm]="16" [nzXs]="24">
          <nz-time-picker formControlName="timePicker"></nz-time-picker>
        </nz-form-control>
      </nz-form-item>
      <nz-form-item>
        <nz-form-control [nzXs]="{ span: 24, offset: 0 }" [nzSm]="{ span: 16, offset: 8 }">
          <button nz-button nzType="primary">Submit</button>
        </nz-form-control>
      </nz-form-item>
    </form>`,
  styles  : [ `
    form {
        max-width: 600px;
    }
  ` ]
})
export class LoginComponent {
  validateForm: FormGroup;

  submitForm(): void {
    console.log(this.validateForm.value);
  }

  constructor(private fb: FormBuilder) {
  }

  ngOnInit(): void {
    this.validateForm = this.fb.group({
      datePicker     : [ null ],
      datePickerTime : [ null ],
      monthPicker    : [ null ],
      rangePicker    : [ [] ],
      rangePickerTime: [ [] ],
      timePicker     : [ null ]
    });
  }
}

7.响应式表单验证
我们在 nz-form-control 上 提供了 nzValidateStatusnzHasFeedback 等属性，当使用响应式表单时，可以自己定义校验的时机和内容。

nzValidateStatus: 校验状态，默认自动从 nz-form-control 中的 NgControl 获得校验状态，也可以手动指定为特定的 NgControl。
nzHasFeedback：用于给输入框添加反馈图标。
nz-form-explain：设置校验文案。

import { Component } from '@angular/core';

import {
  FormBuilder,
  FormControl,
  FormGroup,
  ValidationErrors,
  Validators
} from '@angular/forms';
import { Observable, Observer } from 'rxjs';


@Component({
  selector: 'login',
  // templateUrl: './login.component.pug',
  // styleUrls: ['./login.component.less'],
  template: `
    <form nz-form [formGroup]="validateForm" (ngSubmit)="submitForm($event,validateForm.value)">
      <nz-form-item>
        <nz-form-label [nzSpan]="7" nzRequired>Username</nz-form-label>
        <nz-form-control [nzSpan]="12" nzHasFeedback>
          <input nz-input formControlName="userName" placeholder="async validate try to write JasonWood">
          <nz-form-explain *ngIf="validateForm.get('userName').dirty && validateForm.get('userName').errors || validateForm.get('userName').pending ">
            <ng-container *ngIf="validateForm.get('userName').hasError('required')">
              Please input your username!
            </ng-container>
            <ng-container *ngIf="validateForm.get('userName').hasError('duplicated')">
              The username is redundant!
            </ng-container>
            <ng-container *ngIf="validateForm.get('userName').pending">
              Validating...
            </ng-container>
          </nz-form-explain>
        </nz-form-control>
      </nz-form-item>
      <nz-form-item>
        <nz-form-label [nzSpan]="7" nzRequired>E-mail</nz-form-label>
        <nz-form-control [nzSpan]="12" nzHasFeedback>
          <input nz-input formControlName="email" placeholder="email" type="email">
          <nz-form-explain *ngIf="validateForm.get('email').dirty&&validateForm.get('email').errors">
            <ng-container *ngIf="validateForm.get('email').hasError('email')">
              The input is not valid E-mail!
            </ng-container>
            <ng-container *ngIf="validateForm.get('email').hasError('required')">
              Please input your E-mail!
            </ng-container>
          </nz-form-explain>
        </nz-form-control>
      </nz-form-item>
      <nz-form-item>
        <nz-form-label [nzSpan]="7" nzRequired>Password</nz-form-label>
        <div>
          <nz-form-control [nzSpan]="12" nzHasFeedback>
            <input nz-input type="password" formControlName="password" (ngModelChange)="validateConfirmPassword()">
            <nz-form-explain *ngIf="validateForm.get('password').dirty&&validateForm.get('password').hasError('required')">Please input your password!</nz-form-explain>
          </nz-form-control>
        </div>
      </nz-form-item>
      <nz-form-item>
        <nz-form-label [nzSpan]="7" nzRequired>Confirm Password</nz-form-label>
        <nz-form-control [nzSpan]="12" nzHasFeedback>
          <input nz-input type="password" formControlName="confirm" placeholder="confirm your password">
          <nz-form-explain *ngIf="validateForm.get('confirm').dirty&&validateForm.get('confirm').errors">
            <ng-container *ngIf="validateForm.get('confirm').hasError('required')">
              Please confirm your password!
            </ng-container>
            <ng-container *ngIf="validateForm.get('confirm').hasError('confirm')">
              Password is inconsistent!
            </ng-container>
          </nz-form-explain>
        </nz-form-control>
      </nz-form-item>
      <nz-form-item>
        <nz-form-label [nzSpan]="7" nzRequired>Comment</nz-form-label>
        <nz-form-control [nzSpan]="12" >
          <textarea formControlName="comment" nz-input rows="2" placeholder="write any thing"></textarea>
          <nz-form-explain *ngIf="validateForm.get('comment').dirty&&validateForm.get('comment').hasError('required')">Please write something here!</nz-form-explain>
        </nz-form-control>
      </nz-form-item>
      <nz-form-item>
        <nz-form-control [nzOffset]="7" [nzSpan]="12">
          <button nz-button nzType="primary" [disabled]="!validateForm.valid">Submit</button>
          <button nz-button (click)="resetForm($event)">Reset</button>
        </nz-form-control>
      </nz-form-item>
    </form>`,

  styles: [
    `
      [nz-form] {
        max-width: 600px;
      }
      button {
        margin-left: 8px;
      }
    `
  ]
})
export class LoginComponent {
  validateForm: FormGroup;
  submitForm = ($event, value) => {
    $event.preventDefault();
    for (const key in this.validateForm.controls) {
      this.validateForm.controls[ key ].markAsDirty();
      this.validateForm.controls[ key ].updateValueAndValidity();
    }
    console.log(value);
  };

  resetForm(e: MouseEvent): void {
    e.preventDefault();
    this.validateForm.reset();
    for (const key in this.validateForm.controls) {
      this.validateForm.controls[ key ].markAsPristine();
      this.validateForm.controls[ key ].updateValueAndValidity();
    }
  }

  validateConfirmPassword(): void {
    setTimeout(() => this.validateForm.controls.confirm.updateValueAndValidity());
  }

  userNameAsyncValidator = (control: FormControl) => Observable.create((observer: Observer<ValidationErrors>) => {
    // 自定义异步校验器
    setTimeout(() => {
      if (control.value === 'JasonWood') {
        observer.next({ error: true, duplicated: true });
      } else {
        observer.next(null);
      }
      observer.complete();
    }, 1000);
  });

  confirmValidator = (control: FormControl): { [ s: string ]: boolean } => {
    // 同步校验器
    //  { [ s: string ]: boolean } 返回 {key:value} key是string类型 value是boolean类型
    if (!control.value) {
      return { required: true };
    } else if (control.value !== this.validateForm.controls.password.value) {
      // validateForm.get('confirm').hasError('confirm') 通过这样可获取对应的错误
      return { confirm: true, error: true };
    }
  };

  constructor(private fb: FormBuilder) {
    this.validateForm = this.fb.group({
      userName: [ '', [ Validators.required ], [ this.userNameAsyncValidator ] ], // 第三个参数用于添加异步校验器
      email   : [ '', [ Validators.email ] ],
      password: [ '', [ Validators.required ] ],
      confirm : [ '', [ this.confirmValidator ] ], // 添加同步校验器
      comment : [ '', [ Validators.required ] ]
    });
  }
}


8.模板驱动表单验证
我们在 nz-form-control 上 提供了 nzValidateStatusnzHasFeedback 等属性，当使用模板驱动表单时，可以自己定义校验的时机和内容。
nzValidateStatus: 校验状态，可选 'success', 'warning', 'error', 'validating'。
nzHasFeedback：用于给输入框添加反馈图标。
nz-form-explain：设置校验文案。

import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-form-validate-static',
  template: `
    <form nz-form>
      <nz-form-item>
        <nz-form-label [nzSpan]="5">Fail</nz-form-label>
        <nz-form-control nzValidateStatus="error" [nzSpan]="12">
          <input nz-input [ngModel]="'unavailable choice'" name="errorValid">
          <nz-form-explain>Should be combination of numbers & alphabets</nz-form-explain>
        </nz-form-control>
      </nz-form-item>
      <nz-form-item>
        <nz-form-label [nzSpan]="5">Warning</nz-form-label>
        <nz-form-control nzValidateStatus="warning" [nzSpan]="12">
          <input nz-input [ngModel]="'Warning'" name="warningValid">
        </nz-form-control>
      </nz-form-item>
      <nz-form-item>
        <nz-form-label [nzSpan]="5">Validating</nz-form-label>
        <nz-form-control [nzSpan]="12" nzValidateStatus="validating" nzHasFeedback>
          <input nz-input [ngModel]="'The content is being validating'" name="validating">
          <nz-form-explain>I'm the content is being validating</nz-form-explain>
        </nz-form-control>
      </nz-form-item>
      <nz-form-item>
        <nz-form-label [nzSpan]="5">Success</nz-form-label>
        <nz-form-control [nzSpan]="12" nzValidateStatus="success" nzHasFeedback>
          <input nz-input [ngModel]="'The content'" name="successValid">
        </nz-form-control>
      </nz-form-item>
      <nz-form-item>
        <nz-form-label [nzSpan]="5">Warning</nz-form-label>
        <nz-form-control [nzSpan]="12" nzValidateStatus="warning" nzHasFeedback>
          <input nz-input [ngModel]="'Warning'" name="warningHighValid">
          <nz-form-explain>Should be combination of numbers & alphabets</nz-form-explain>
        </nz-form-control>
      </nz-form-item>
      <nz-form-item>
        <nz-form-label [nzSpan]="5">Fail</nz-form-label>
        <nz-form-control [nzSpan]="12" nzValidateStatus="error" nzHasFeedback>
          <input nz-input [ngModel]="'unavailable choice'" name="invalidValid">
          <nz-form-explain>Should be combination of numbers & alphabets</nz-form-explain>
        </nz-form-control>
      </nz-form-item>
      <nz-form-item>
        <nz-form-label [nzSpan]="5">Success</nz-form-label>
        <nz-form-control [nzSpan]="12" nzValidateStatus="success" nzHasFeedback>
          <nz-date-picker name="date-picker-success" style="width: 100%"></nz-date-picker>
        </nz-form-control>
      </nz-form-item>
      <nz-form-item>
        <nz-form-label [nzSpan]="5">Warning</nz-form-label>
        <nz-form-control [nzSpan]="12" nzValidateStatus="warning" nzHasFeedback>
          <nz-time-picker name="time-picker-warning" style="width: 100%"></nz-time-picker>
        </nz-form-control>
      </nz-form-item>
      <nz-form-item>
        <nz-form-label [nzSpan]="5">Error</nz-form-label>
        <nz-form-control [nzSpan]="12" nzValidateStatus="error" nzHasFeedback>
          <nz-select name="select-error" [ngModel]="'Option 1'">
            <nz-option nzValue="Option 1" nzLabel="Option 1"></nz-option>
            <nz-option nzValue="Option 2" nzLabel="Option 2"></nz-option>
          </nz-select>
        </nz-form-control>
      </nz-form-item>
      <nz-form-item>
        <nz-form-label [nzSpan]="5">Validating</nz-form-label>
        <nz-form-control [nzSpan]="12" nzValidateStatus="validating" nzHasFeedback>
          <nz-select name="select-validate" [ngModel]="'Option 2'">
            <nz-option nzValue="Option 1" nzLabel="Option 1"></nz-option>
            <nz-option nzValue="Option 2" nzLabel="Option 2"></nz-option>
          </nz-select>
        </nz-form-control>
      </nz-form-item>
      <nz-form-item>
        <nz-form-label [nzSpan]="5">Success</nz-form-label>
        <nz-form-control [nzSpan]="12" nzValidateStatus="success" nzHasFeedback>
          <nz-input-number name="inputnumber-success" style="width:100%"></nz-input-number>
        </nz-form-control>
      </nz-form-item>
    </form>`,
  styles  : [
    `
      [nz-form] {
        max-width: 600px;
      }
      nz-date-picker ::ng-deep .ant-calendar-picker{
        width: 100%;
      }
    `
  ]
})
export class NzDemoFormValidateStaticComponent {
}

9.表单联动
使用 setValue 来动态设置其他控件的值。
import { Component, OnInit } from '@angular/core';
import {
  AbstractControl,
  FormBuilder,
  FormGroup,
  Validators
} from '@angular/forms';

@Component({
  selector: 'nz-demo-form-coordinated',
  template: `
    <form nz-form [formGroup]="validateForm" (ngSubmit)="submitForm()">
      <nz-form-item>
        <nz-form-label [nzSpan]="5" nzRequired nzFor="note">Note</nz-form-label>
        <nz-form-control [nzSpan]="12">
          <input id="note" type="text" nz-input formControlName="note">
          <nz-form-explain *ngIf="validateForm.get('note').dirty && validateForm.get('note').errors">Please input your username!</nz-form-explain>
        </nz-form-control>
      </nz-form-item>
      <nz-form-item>
        <nz-form-label [nzSpan]="5" nzFor="gender" nzRequired>Gender</nz-form-label>
        <nz-form-control [nzSpan]="12">
          <nz-select id="gender" formControlName="gender" nzPlaceHolder="Select a option and change input text above" (ngModelChange)="genderChange($event)">
            <nz-option nzValue="male" nzLabel="male"></nz-option>
            <nz-option nzValue="female" nzLabel="female"></nz-option>
          </nz-select>
          <nz-form-explain *ngIf="validateForm.get('gender').dirty && validateForm.get('gender').errors">Please select your gender!</nz-form-explain>
        </nz-form-control>
      </nz-form-item>
      <nz-form-item>
        <nz-form-control [nzSpan]="12" [nzOffset]="5">
          <button nz-button nzType="primary">Submit</button>
        </nz-form-control>
      </nz-form-item>
    </form>
  `,
  styles  : [
      `[nz-form] {
      max-width: 600px;
    }`
  ]
})
export class NzDemoFormCoordinatedComponent implements OnInit {
  validateForm: FormGroup;

  submitForm(): void {
    for (const i in this.validateForm.controls) {
      this.validateForm.controls[ i ].markAsDirty();
      this.validateForm.controls[ i ].updateValueAndValidity();
    }
  }

  genderChange(value: string): void {
    this.validateForm.get('note').setValue(value === 'male' ? 'Hi, man!' : 'Hi, lady!');
  }

  constructor(private fb: FormBuilder) {
  }

  ngOnInit(): void {
    this.validateForm = this.fb.group({
      note  : [ null, [ Validators.required ] ],
      gender: [ null, [ Validators.required ] ]
    });
  }
}

10.表单布局
表单有三种布局。
import { Component, OnInit } from '@angular/core';
import {
  FormBuilder,
  FormGroup,
  Validators
} from '@angular/forms';

@Component({
  selector: 'nz-demo-form-layout',
  template: `
    <form nz-form [nzLayout]="validateForm.get('formLayout')?.value" [formGroup]="validateForm" (ngSubmit)="submitForm()">
      <nz-form-item>
        <nz-form-label [nzSpan]="isHorizontal? 4:null">Form Layout</nz-form-label>
        <nz-form-control [nzSpan]="isHorizontal? 14:null">
          <nz-radio-group formControlName="formLayout">
            <label nz-radio-button [nzValue]="'horizontal'">Horizontal</label>
            <label nz-radio-button [nzValue]="'vertical'">Vertical</label>
            <label nz-radio-button [nzValue]="'inline'">Inline</label>
          </nz-radio-group>
        </nz-form-control>
      </nz-form-item>
      <nz-form-item>
        <nz-form-label [nzSpan]="isHorizontal? 4:null">Field A</nz-form-label>
        <nz-form-control [nzSpan]="isHorizontal? 14:null">
          <input nz-input formControlName="fieldA" placeholder="input placeholder">
          <nz-form-explain *ngIf="validateForm.get('fieldA').dirty && validateForm.get('fieldA').errors">Please input your username!</nz-form-explain>
        </nz-form-control>
      </nz-form-item>
      <nz-form-item>
        <nz-form-label [nzSpan]="isHorizontal? 4:null">Field B</nz-form-label>
        <nz-form-control [nzSpan]="isHorizontal? 14:null">
          <input nz-input formControlName="filedB" placeholder="input placeholder">
          <nz-form-explain *ngIf="validateForm.get('filedB').dirty && validateForm.get('filedB').errors">Please input your Password!</nz-form-explain>
        </nz-form-control>
      </nz-form-item>
      <nz-form-item>
        <nz-form-control [nzSpan]="isHorizontal? 14:null" [nzOffset]="isHorizontal? 4:null">
          <button nz-button nzType="primary">Submit</button>
        </nz-form-control>
      </nz-form-item>
    </form>`,
  styles  : [
      `
      [nz-form]:not(.ant-form-inline):not(.ant-form-vertical) {
        max-width: 600px;
      }
    `
  ]
})
export class NzDemoFormLayoutComponent implements OnInit {
  validateForm: FormGroup;

  submitForm(): void {
    for (const i in this.validateForm.controls) {
      this.validateForm.controls[ i ].markAsDirty();
      this.validateForm.controls[ i ].updateValueAndValidity();
    }
  }

  get isHorizontal(): boolean {
    return this.validateForm.controls.formLayout && this.validateForm.controls.formLayout.value === 'horizontal';
  }

  constructor(private fb: FormBuilder) {
  }

  ngOnInit(): void {
    this.validateForm = this.fb.group({
      formLayout: [ 'horizontal' ],
      fieldA    : [ null, [ Validators.required ] ],
      filedB    : [ null, [ Validators.required ] ]
    });
  }
}

11.动态校验规则
根据不同情况执行不同的校验规则。
import { Component, OnInit } from '@angular/core';
import {
  FormBuilder,
  FormGroup,
  Validators
} from '@angular/forms';

@Component({
  selector: 'nz-demo-form-dynamic-rule',
  template: `
    <form nz-form [formGroup]="validateForm" (ngSubmit)="submitForm()">
      <nz-form-item>
        <nz-form-label [nzSpan]="4" nzRequired nzFor="name">Name</nz-form-label>
        <nz-form-control [nzSpan]="8">
          <input type="text" nz-input formControlName="name" placeholder="Please input your name">
          <nz-form-explain *ngIf="validateForm.get('name').dirty && validateForm.get('name').errors">Please input your name</nz-form-explain>
        </nz-form-control>
      </nz-form-item>
      <nz-form-item>
        <nz-form-label [nzSpan]="4" nzFor="nickname" [nzRequired]="validateForm.get('required')?.value">Nickname</nz-form-label>
        <nz-form-control [nzSpan]="8">
          <input type="text" nz-input formControlName="nickname" placeholder="Please input your nickname">
          <nz-form-explain *ngIf="validateForm.get('nickname').dirty && validateForm.get('nickname').errors">Please input your nickname</nz-form-explain>
        </nz-form-control>
      </nz-form-item>
      <nz-form-item>
        <nz-form-control [nzSpan]="8" [nzOffset]="4">
          <label nz-checkbox formControlName="required" (ngModelChange)="requiredChange($event)">Nickname is required</label>
        </nz-form-control>
      </nz-form-item>
      <nz-form-item>
        <nz-form-control [nzSpan]="8" [nzOffset]="4">
          <button nz-button nzType="primary">Check</button>
        </nz-form-control>
      </nz-form-item>
    </form>
  `
})
export class NzDemoFormDynamicRuleComponent implements OnInit {
  validateForm: FormGroup;

  submitForm(): void {
    for (const i in this.validateForm.controls) {
      this.validateForm.controls[ i ].markAsDirty();
      this.validateForm.controls[ i ].updateValueAndValidity();
    }
  }

  requiredChange(required: boolean): void {
    if (!required) {
      this.validateForm.get('nickname').clearValidators();
      this.validateForm.get('nickname').markAsPristine();
    } else {
      this.validateForm.get('nickname').setValidators(Validators.required);
      this.validateForm.get('nickname').markAsDirty();
    }
    this.validateForm.get('nickname').updateValueAndValidity();
  }

  constructor(private fb: FormBuilder) {
  }

  ngOnInit(): void {
    this.validateForm = this.fb.group({
      name    : [ null, [ Validators.required ] ],
      nickname: [ null ],
      required: [ false ]
    });
  }
}

12.API#
nz-formCOMPONENT#
参数	说明	类型	默认值
[nzLayout]	表单布局	'horizontal'丨'vertical'丨'inline'	'horizontal'
nz-form-itemCOMPONENT#
表单项用于区分表单中不同的区域，包含表单域和表单标签(可选)。

所有 nz-row 的参数在 nz-form-item 上均可直接使用。

参数	说明	类型	默认值
[nzFlex]	是否Flex布局	boolean	false
nz-form-labelCOMPONENT#
用于标示当前表单项的内容，可选。

所有 nz-col 的参数在 nz-form-label 上均可直接使用。

参数	说明	类型	默认值
[nzRequired]	当前项是否为必填，仅影响样式	boolean	false
[nzFor]	label 标签的 for 属性	string	-
nz-form-controlCOMPONENT#
表单一定会包含表单域，表单域可以是输入控件，标准表单域，标签，下拉菜单，文本域等。

所有 nz-col 的参数在 nz-form-control 上均可直接使用。

参数	说明	类型	默认值
[nzValidateStatus](Reactive Forms)	会根据 FormControl 的状态自动生成校验状态	FormControl	nz-form-control 中包裹的第一个 FormControl
[nzValidateStatus](Template-driven Forms)	校验状态，可选：'success' 'warning' 'error' 'validating'	string	
[nzHasFeedback]	配合 nzValidateStatus 属性使用，展示校验状态图标	boolean	false
nz-form-explainCOMPONENT#
用于显示提示信息，会自动根据当前的 nzValidateStatus 显示不同的颜色

注意：每个 nz-form-item 下最多只能有一个 nz-form-explain 。

nz-form-extraCOMPONENT#
用于显示表单额外提示信息

nz-form-splitCOMPONENT#
用于显示分隔符 -

nz-form-textCOMPONENT#
在 nz-form-control 中直接显示文本

六.Input输入框
1.基本使用
基本使用。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-input-basic',
  template: `
    <input nz-input placeholder="Basic usage" [(ngModel)]="value">
  `
})
export class NzDemoInputBasicComponent {
  value: string;
}

2.三种大小
我们为 <Input /> 输入框定义了三种尺寸（大、默认、小），高度分别为 40px、32px 和 24px。
注意： 在表单里面，我们只使用大尺寸的输入框。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-input-size',
  template: `
    <div class="example-input">
      <input nz-input placeholder="large size" nzSize="large">
      <input nz-input placeholder="default size" nzSize="default">
      <input nz-input placeholder="small size" nzSize="small">
    </div>
  `,
  styles  : [
      `
      .example-input .ant-input {
        width: 200px;
        margin: 0 8px 8px 0;
      }
    `
  ]
})
export class NzDemoInputSizeComponent {
}

3.前置/后置标签
用于配置一些固定组合。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-input-addon',
  template: `
    <div style="margin-bottom: 16px;">
      <nz-input-group nzAddOnBefore="Http://" nzAddOnAfter=".com">
        <input type="text" nz-input [(ngModel)]="inputValue">
      </nz-input-group>
    </div>
    <div style="margin-bottom: 16px;">
      <nz-input-group [nzAddOnBefore]="addOnBeforeTemplate" [nzAddOnAfter]="addOnAfterTemplate">
        <input type="text" nz-input [(ngModel)]="inputValue">
      </nz-input-group>
      <ng-template #addOnBeforeTemplate>
        <nz-select [ngModel]="'Http://'">
          <nz-option [nzLabel]="'Http://'" [nzValue]="'Http://'"></nz-option>
          <nz-option [nzLabel]="'Https://'" [nzValue]="'Https://'"></nz-option>
        </nz-select>
      </ng-template>
      <ng-template #addOnAfterTemplate>
        <nz-select [ngModel]="'.com'">
          <nz-option [nzLabel]="'.com'" [nzValue]="'.com'"></nz-option>
          <nz-option [nzLabel]="'.jp'" [nzValue]="'.jp'"></nz-option>
          <nz-option [nzLabel]="'.cn'" [nzValue]="'.cn'"></nz-option>
          <nz-option [nzLabel]="'.org'" [nzValue]="'.org'"></nz-option>
        </nz-select>
      </ng-template>
    </div>
    <div style="margin-bottom: 16px;">
      <nz-input-group [nzAddOnAfter]="addOnAfterIconTemplate">
        <input type="text" nz-input [(ngModel)]="inputValue">
      </nz-input-group>
      <ng-template #addOnAfterIconTemplate>
        <i nz-icon type="setting"></i>
      </ng-template>
    </div>
  `
})
export class NzDemoInputAddonComponent {
  inputValue: string = 'my site';
}

4.输入框组合
输入框的组合展现。
注意：使用 nzCompact 模式时，不需要通过 nz-col 来控制宽度。

import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-input-group',
  template: `
    <nz-input-group [nzSize]="'large'">
      <div nz-col nzSpan="4">
        <input type="text" nz-input [ngModel]="'0571'">
      </div>
      <div nz-col nzSpan="8">
        <input type="text" nz-input [ngModel]="'26888888'">
      </div>
    </nz-input-group>
    <br>
    <nz-input-group nzCompact>
      <input type="text" nz-input [ngModel]="'0571'" style="width: 20%;">
      <input type="text" nz-input [ngModel]="'26888888'" style="width:30%;">
    </nz-input-group>
    <br>
    <nz-input-group nzCompact>
      <nz-select [ngModel]="'Zhejiang'">
        <nz-option [nzLabel]="'Zhejiang'" [nzValue]="'Zhejiang'"></nz-option>
        <nz-option [nzLabel]="'Jiangsu'" [nzValue]="'Jiangsu'"></nz-option>
      </nz-select>
      <input type="text" nz-input [ngModel]="'Xihu District, Hangzhou'" style="width:50%;">
    </nz-input-group>
    <br>
    <nz-input-group nzCompact>
      <nz-select [ngModel]="'Option1'">
        <nz-option [nzLabel]="'Option1'" [nzValue]="'Option1'"></nz-option>
        <nz-option [nzLabel]="'Option2'" [nzValue]="'Option2'"></nz-option>
      </nz-select>
      <input type="text" nz-input [ngModel]="'input content'" style="width:50%;">
      <nz-input-number></nz-input-number>
    </nz-input-group>
    <br>
    <nz-input-group nzCompact>
      <input type="text" nz-input [ngModel]="'input content'" style="width:50%;">
      <nz-date-picker></nz-date-picker>
    </nz-input-group>
    <br>
    <nz-input-group nzCompact>
      <nz-select [ngModel]="'Option1-1'">
        <nz-option [nzLabel]="'Option1-1'" [nzValue]="'Option1-1'"></nz-option>
        <nz-option [nzLabel]="'Option1-2'" [nzValue]="'Option1-2'"></nz-option>
      </nz-select>
      <nz-select [ngModel]="'Option2-1'">
        <nz-option [nzLabel]="'Option2-1'" [nzValue]="'Option2-1'"></nz-option>
        <nz-option [nzLabel]="'Option2-2'" [nzValue]="'Option2-2'"></nz-option>
      </nz-select>
    </nz-input-group>
    <br>
    <nz-input-group nzCompact>
      <nz-select [ngModel]="'Between'">
        <nz-option [nzLabel]="'Between'" [nzValue]="'Between'"></nz-option>
        <nz-option [nzLabel]="'Except'" [nzValue]="'Except'"></nz-option>
      </nz-select>
      <input type="text" nz-input placeholder="Minimum" style="width:100px; text-align: center;">
      <input type="text" disabled nz-input placeholder="~" style="width: 30px; border-left: 0px; pointer-events: none; background-color: rgb(255, 255, 255);">
      <input type="text" nz-input placeholder="Maximum" style="width: 100px; text-align: center; border-left: 0px;">
    </nz-input-group>
    <br>
    <nz-input-group nzCompact>
      <nz-select [ngModel]="'Sign Up'">
        <nz-option [nzLabel]="'Sign Up'" [nzValue]="'Sign Up'"></nz-option>
        <nz-option [nzLabel]="'Sign In'" [nzValue]="'Sign In'"></nz-option>
      </nz-select>
      <input type="email" nz-input placeholder="Email" style="width: 200px;">
    </nz-input-group>
    <br>
    <nz-input-group nzCompact>
      <nz-select [ngModel]="'Home'" style="width: 30%;">
        <nz-option [nzLabel]="'Home'" [nzValue]="'Home'"></nz-option>
        <nz-option [nzLabel]="'Company'" [nzValue]="'Company'"></nz-option>
      </nz-select>
      <nz-cascader [nzOptions]="options" style="width: 70%;"></nz-cascader>
    </nz-input-group>
  `
})
export class NzDemoInputGroupComponent {
  options = [{
    value: 'zhejiang',
    label: 'Zhejiang',
    children: [{
      value: 'hangzhou',
      label: 'Hangzhou',
      children: [{
        value: 'xihu',
        label: 'West Lake',
        isLeaf: true
      }]
    }, {
      value: 'ningbo',
      label: 'Ningbo',
      isLeaf: true
    }]
  }, {
    value: 'jiangsu',
    label: 'Jiangsu',
    children: [{
      value: 'nanjing',
      label: 'Nanjing',
      children: [{
        value: 'zhonghuamen',
        label: 'Zhong Hua Men',
        isLeaf: true
      }]
    }]
  }];
}

5.搜索框
带有搜索按钮的输入框。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-input-search-input',
  template: `
    <nz-input-group [nzSuffix]="suffixIconSearch">
      <input type="text" nz-input placeholder="input search text">
    </nz-input-group>
    <ng-template #suffixIconSearch>
      <i nz-icon type="search"></i>
    </ng-template>
    <br>
    <br>
    <nz-input-group nzSearch [nzSuffix]="suffixIconButton">
      <input type="text" nz-input placeholder="input search text">
    </nz-input-group>
    <ng-template #suffixIconButton>
      <button nz-button nzType="primary" nzSearch><i nz-icon type="search"></i></button>
    </ng-template>
    <br>
    <br>
    <nz-input-group nzSearch nzSize="large" [nzSuffix]="suffixButton">
      <input type="text" nz-input placeholder="input search text">
    </nz-input-group>
    <ng-template #suffixButton>
      <button nz-button nzType="primary" nzSize="large" nzSearch>Search</button>
    </ng-template>
  `
})
export class NzDemoInputSearchInputComponent {
}

6.文本域
用于多行输入。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-input-textarea',
  template: `
    <textarea rows="4" nz-input [(ngModel)]="inputValue"></textarea>
  `,

  styles: []
})
export class NzDemoInputTextareaComponent {
  inputValue: string;
}

7.适应文本高度的文本域
nzAutosize 属性适用于 textarea 节点，并且只有高度会自动变化。另外 nzAutosize 可以设定为一个对象，指定最小行数和最大行数。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-input-autosize-textarea',
  template: `
    <div>
      <textarea nz-input placeholder="Autosize height based on content lines" nzAutosize></textarea>
      <div style="margin:24px 0;"></div>
      <textarea nz-input placeholder="Autosize height with minimum and maximum number of lines" [nzAutosize]="{ minRows: 2, maxRows: 6 }"></textarea>
    </div>

  `,

  styles: []
})
export class NzDemoInputAutosizeTextareaComponent {
}

8.输入时格式化展示
结合 Tooltip 组件，实现一个数值输入框，方便内容超长时的全量展现。
import { Component, ElementRef, ViewChild, ViewEncapsulation } from '@angular/core';

@Component({
  selector     : 'nz-demo-input-tooltip',
  encapsulation: ViewEncapsulation.None,
  template     : `
    <nz-tooltip nzTrigger="focus" nzPlacement="topLeft" nzOverlayClassName="numeric-input" [nzTitle]="title">
      <input #inputElement style="width: 120px" nz-input nz-tooltip placeholder="Input a number" [ngModel]="value" (ngModelChange)="onChange($event)" (blur)="onBlur()">
    </nz-tooltip>
  `,
  styles       : [
      `
      .numeric-input .ant-tooltip-inner {
        min-width: 32px;
        min-height: 37px;
      }

      .numeric-input .numeric-input-title {
        font-size: 14px;
      }

    `
  ]
})
export class NzDemoInputTooltipComponent {
  value = '';
  title = 'Input a number';

  @ViewChild('inputElement') inputElement: ElementRef;

  onChange(value: string): void {
    this.updateValue(value);
  }

  // '.' at the end or only '-' in the input box.
  onBlur(): void {
    if (this.value.charAt(this.value.length - 1) === '.' || this.value === '-') {
      this.updateValue(this.value.slice(0, -1));
    }
  }

  updateValue(value: string): void {
    const reg = /^-?(0|[1-9][0-9]*)(\.[0-9]*)?$/;
    if ((!isNaN(+value) && reg.test(value)) || value === '' || value === '-') {
      this.value = value;
    }
    this.inputElement.nativeElement.value = this.value;
    this.updateTitle();
  }

  updateTitle(): void {
    this.title = (this.value !== '-' ? this.formatNumber(this.value) : '-') || 'Input a number';
  }

  formatNumber(value: string): string {
    const string = `${value}`;
    const list = string.split('.');
    const prefix = list[ 0 ].charAt(0) === '-' ? '-' : '';
    let num = prefix ? list[ 0 ].slice(1) : list[ 0 ];
    let result = '';
    while (num.length > 3) {
      result = `,${num.slice(-3)}${result}`;
      num = num.slice(0, num.length - 3);
    }
    if (num) {
      result = num + result;
    }
    return `${prefix}${result}${list[ 1 ] ? `.${list[ 1 ]}` : ''}`;
  }

}

8.前缀和后缀
在输入框上添加前缀或后缀图标。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-input-presuffix',
  template: `
    <nz-input-group [nzSuffix]="suffixTemplate" [nzPrefix]="prefixTemplate">
      <input type="text" nz-input placeholder="Enter your username" [(ngModel)]="username">
    </nz-input-group>
    <ng-template #prefixTemplate><i nz-icon type="user"></i></ng-template>
    <ng-template #suffixTemplate><i nz-icon type="close-circle" (click)="username=null" *ngIf="username"></i></ng-template>
  `,
  styles  : [
      `
      .anticon-close-circle {
        cursor: pointer;
        color: #ccc;
        transition: color 0.3s;
        font-size: 12px;
      }

      .anticon-close-circle:hover {
        color: #999;
      }

      .anticon-close-circle:active {
        color: #666;
      }
    `
  ]
})
export class NzDemoInputPresuffixComponent {
  username: string;
}

9.API#
[nz-input]DIRECTIVE#
nz-input 可以使用所有的W3C标准下的所有 使用方式 和 Angular对 input 的全部额外功能支持。

参数	说明	类型	默认值
[nzAutosize]	只可以用于 textarea，自适应内容高度，可设置为 boolean 或对象：{ minRows: 2, maxRows: 6 }	boolean丨 { minRows: number, maxRows: number }	false
[nzSize]	控件大小。注：标准表单内的输入框大小限制为 large。可选 largedefaultsmall	string	default
nz-input-groupCOMPONENT#
参数	说明	类型	默认值
[nzAddOnAfter]	带标签的 input，设置后置标签	string 丨 TemplateRef<void>	
[nzAddOnBefore]	带标签的 input，设置前置标签	string 丨 TemplateRef<void>	
[nzPrefix]	带有前缀图标的 input	string丨 TemplateRef<void>	
[nzSuffix]	带有后缀图标的 input	string丨 TemplateRef<void>	
[nzCompact]	是否用紧凑模式	boolean	false
[nzSearch]	是否用搜索框	boolean	false
[nzSize]	nz-input-group 中所有的 nz-input 的大小，可选 largedefaultsmall	string	default


七.InputNumber数字输入框
通过鼠标或键盘，输入范围内的数值。
何时使用#
当需要获取标准数值时。
1.基本
数字输入框。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-input-number-basic',
  template: `
    <nz-input-number [(ngModel)]="demoValue" [nzMin]="1" [nzMax]="10" [nzStep]="1"></nz-input-number>
  `
})
export class NzDemoInputNumberBasicComponent {
  demoValue = 3;
}

2.三种大小
三种大小的数字输入框，当 nzSize 分别为 large 和 small 时，输入框高度为 40px 和 24px ，默认高度为 32px。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-input-number-size',
  template: `
    <nz-input-number [(ngModel)]="demoValue" [nzSize]="'large'" [nzMin]="1" [nzMax]="10" [nzStep]="1"></nz-input-number>
    <nz-input-number [(ngModel)]="demoValue" [nzMin]="1" [nzMax]="10" [nzStep]="1"></nz-input-number>
    <nz-input-number [(ngModel)]="demoValue" [nzSize]="'small'" [nzMin]="1" [nzMax]="10" [nzStep]="1"></nz-input-number>`,
  styles  : [
      `
      nz-input-number {
        margin-right: 8px;
      }
    `
  ]
})
export class NzDemoInputNumberSizeComponent {
  demoValue = 3;
}

3.不可用
点击按钮切换可用状态。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-input-number-disabled',
  template: `
    <nz-input-number [(ngModel)]="demoValue" [nzMin]="1" [nzMax]="10" [nzStep]="1" [nzDisabled]="isDisabled"></nz-input-number>
    <div style="margin-top:20px;">
      <button nz-button [nzType]="'primary'" (click)="toggleDisabled()">
        <span>Toggle Disabled</span>
      </button>
    </div>`
})
export class NzDemoInputNumberDisabledComponent {
  demoValue = 3;
  isDisabled = false;

  toggleDisabled(): void {
    this.isDisabled = !this.isDisabled;
  }
}

4.小数
和原生的数字输入框一样，value 的精度由 nzStep 的小数位数决定。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-input-number-digit',
  template: `<nz-input-number [(ngModel)]="demoValue" [nzMin]="1" [nzMax]="10" [nzStep]="0.1" [nzPlaceHolder]="'Digital'"></nz-input-number>`
})
export class NzDemoInputNumberDigitComponent {
  demoValue: number;
}


API#
属性如下
nz-input-numberCOMPONENT#
成员	说明	类型	默认值
[ngModel]	当前值，可双向绑定	number ｜ string	-
[nzAutoFocus]	自动获取焦点	boolean	false
[nzDisabled]	禁用	boolean	false
[nzMax]	最大值	number	Infinity
[nzMin]	最小值	number	-Infinity
[nzFormatter]	指定输入框展示值的格式	(value: number ｜ string):string=> {}	-
[nzParser]	指定从 nzFormatter 里转换回数字的方式，和 nzFormatter 搭配使用	(value:string): number=>{}	-
[nzPrecision]	数值精度	number	-
[nzSize]	输入框大小	string	default
[nzStep]	每次改变步数，可以为小数	number ｜ string	1
[nzPlaceHolder]	选择框默认文字	string	-
(ngModelChange)	数值改变时回调	EventEmitter<number>	-
方法#
名称	描述
focus()	获取焦点
blur()	移除焦点


八.Mention提及
提及组件。
何时使用#
用于在输入中提及某人或某事，常用于发布、聊天或评论功能。


1.基金使用
import { Component, ViewEncapsulation } from '@angular/core';

@Component({
  selector     : 'nz-demo-mention-basic',
  encapsulation: ViewEncapsulation.None,
  template     : `
  <nz-mention
    [nzSuggestions]="suggestions"
    (nzOnSelect)="onSelect($event)">
    <input
      placeholder="input here"
      nzMentionTrigger
      nz-input
      [(ngModel)]="inputValue"
      (ngModelChange)="onChange($event)"
    >
  </nz-mention>
`
})
export class NzDemoMentionBasicComponent {
  inputValue: string = '@afc163';
  suggestions = ['afc163', 'benjycui', 'yiminghe', 'RaoHai', '中文', 'にほんご'];

  onChange(value: string): void {
    console.log(value);
  }

  onSelect(suggestion: string): void {
    console.log(`onSelect ${suggestion}`);
  }
}

2.向上展开
向上展开建议。
import { Component, ViewEncapsulation } from '@angular/core';

@Component({
  selector     : 'nz-demo-mention-placement',
  encapsulation: ViewEncapsulation.None,
  template     : `
  <nz-mention
    nzPlacement="top"
    [nzSuggestions]="suggestions"
    (nzOnSelect)="onSelect($event)">
    <input
      nzMentionTrigger
      nz-input
      [(ngModel)]="inputValue"
      (ngModelChange)="onChange($event)">
  </nz-mention>
`
})
export class NzDemoMentionPlacementComponent {
  inputValue: string;
  suggestions = ['afc163', 'benjycui', 'yiminghe', 'RaoHai', '中文', 'にほんご'];

  onChange(value: string): void {
    console.log(value);
  }

  onSelect(suggestion: string): void {
    console.log(`onSelect ${suggestion}`);
  }
}

3.异步加载
匹配内容列表为异步返回时。
import { Component, ViewEncapsulation } from '@angular/core';
import { MentionOnSearchTypes } from 'ng-zorro-antd';

@Component({
  selector     : 'nz-demo-mention-async',
  encapsulation: ViewEncapsulation.None,
  template     : `
  <nz-mention
    [nzSuggestions]="suggestions"
    [nzLoading]="loading"
    (nzOnSearchChange)="onSearchChange($event)">
    <input
      nzMentionTrigger
      nz-input
      [(ngModel)]="inputValue">
  </nz-mention>
`
})
export class NzDemoMentionAsyncComponent {
  inputValue: string;
  loading = false;
  suggestions = [];

  onSearchChange({value}: MentionOnSearchTypes): void {
    console.log(`search: ${value}`);
    this.loading = true;
    this.fetchSuggestions(value, (suggestions) => {
      console.log(suggestions);
      this.suggestions = suggestions;
      this.loading = false;
    });
  }

  fetchSuggestions(value: string, callback: (suggestions: string[]) => void): void {
    const users = ['afc163', 'benjycui', 'yiminghe', 'jljsj33', 'dqaria', 'RaoHai'];
    setTimeout(() => {
      return callback(users.filter(item => item.indexOf(value) !== -1));
    }, 500);
  }
}

4.自定义建议
自定义建议
注意，nzSuggestions 不为 string[] 时，需要提供 valueWith。
import { Component, ViewEncapsulation } from '@angular/core';

@Component({
  selector     : 'nz-demo-mention-custom-tag',
  encapsulation: ViewEncapsulation.None,
  template     : `
  <nz-mention
    [nzSuggestions]="webFrameworks"
    [nzValueWith]="valueWith"
    (nzOnSelect)="onSelect($event)">
    <input
      placeholder="@someone"
      nz-input
      nzMentionTrigger
      [(ngModel)]="inputValue"
    >
    <ng-container *nzMentionSuggestion="let framework">
        <span>{{ framework.name }} - {{ framework.type }}</span>
    </ng-container>
  </nz-mention>
`
})
export class NzDemoMentionCustomTagComponent {
  inputValue: string;
  webFrameworks = [
    { name: 'React', type: 'JavaScript' },
    { name: 'Angular', type: 'JavaScript' },
    { name: 'Laravel', type: 'PHP' },
    { name: 'Flask', type: 'Python' },
    { name: 'Django', type: 'Python' }
  ];

  valueWith = data => data.name;

  onSelect(value: string): void {
    console.log(value);
  }
}

5.头像
自定义建议（含头像）
注意，nzSuggestions 不为 string[] 时，需要提供 valueWith。
import { Component, ViewEncapsulation } from '@angular/core';

@Component({
  selector     : 'nz-demo-mention-avatar',
  encapsulation: ViewEncapsulation.None,
  template     : `
  <nz-mention
    [nzSuggestions]="webFrameworks"
    [nzValueWith]="valueWith"
    (nzOnSelect)="onSelect($event)">
    <input
      nz-input
      nzMentionTrigger
      [(ngModel)]="inputValue">
    <ng-container *nzMentionSuggestion="let framework">
      <nz-avatar nzSize="small" [nzText]="framework.name" [nzSrc]="framework.icon"></nz-avatar>
      <span>{{ framework.name }} - {{ framework.type }}</span>
    </ng-container>
  </nz-mention>
`,
  styles: [`
    .ant-avatar.ant-avatar-sm {
      width: 14px;
      height: 14px;
      margin-right: 8px;
      position: relative
    }
  `]
})
export class NzDemoMentionAvatarComponent {
  inputValue: string;
  webFrameworks = [
    { name: 'React', type: 'JavaScript', icon: 'https://zos.alipayobjects.com/rmsportal/LFIeMPzdLcLnEUe.svg' },
    { name: 'Angular', type: 'JavaScript', icon: 'https://zos.alipayobjects.com/rmsportal/PJTbxSvzYWjDZnJ.png' },
    { name: 'Dva', type: 'Javascript', icon: 'https://zos.alipayobjects.com/rmsportal/EYPwSeEJKxDtVxI.png' },
    { name: 'Flask', type: 'Python', icon: 'https://zos.alipayobjects.com/rmsportal/xaypBUijfnpAlXE.png' },
  ];

  valueWith = data => data.name;

  onSelect(value: string): void {
    console.log(value);
  }
}

6.配合 Form 使用
受控模式，例如配合 Form 使用。
import { Component, OnInit, ViewChild, ViewEncapsulation } from '@angular/core';
import {
  AbstractControl,
  FormBuilder,
  FormControl,
  FormGroup,
  Validators
} from '@angular/forms';

@Component({
  selector     : 'nz-demo-mention-controlled',
  encapsulation: ViewEncapsulation.None,
  template     : `
  <form nz-form [formGroup]="validateForm" (ngSubmit)="submitForm()">
    <nz-form-item>
      <nz-form-label [nzSm]="6" nzFor="mention">Top coders</nz-form-label>
      <nz-form-control [nzSm]="16">
        <nz-mention
          #mentions
          [nzSuggestions]="suggestions">
          <input
            id="mention"
            placeholder="input here"
            formControlName="mention"
            nzMentionTrigger
            nz-input>
        </nz-mention>
        <nz-form-explain *ngIf="validateForm.get('mention').dirty && validateForm.get('mention').errors">
          More than one must be selected!
        </nz-form-explain>
      </nz-form-control>
    </nz-form-item>
    <nz-form-item nz-row style="margin-bottom:8px;">
      <nz-form-control [nzSpan]="14" [nzOffset]="6">
        <button type="button" nz-button nzType="primary" (click)="submitForm()">Submit</button>
        &nbsp;&nbsp;&nbsp;
        <button type="button" nz-button (click)="resetForm()">Reset</button>
      </nz-form-control>
    </nz-form-item>
  </form>
`
})
export class NzDemoMentionControlledComponent implements OnInit {

  suggestions = ['afc163', 'benjycui', 'yiminghe', 'RaoHai', '中文', 'にほんご'];
  validateForm: FormGroup;
  @ViewChild('mentions') mentionChild;

  get mention(): AbstractControl { return  this.validateForm.get('mention'); }

  constructor(private fb: FormBuilder) {

  }

  ngOnInit(): void {
    this.validateForm = this.fb.group({
      mention: [ '@afc163 ', [ Validators.required, this.mentionValidator ] ]
    });
  }

  mentionValidator = (control: FormControl): { [s: string]: boolean } => {
    if (!control.value) {
      return { required: true };
    } else if (this.mentionChild.getMentions().length < 2) {
      return { confirm: true, error: true };
    }
  };

  submitForm(): void {
    this.mention.markAsDirty();
    if (this.mention.valid) {
      console.log('Submit!!!', this.mention.value);
      console.log(this.mentionChild.getMentions());
    } else {
      console.log('Errors in form!!!');
    }
  }

  resetForm(): void {
    this.validateForm.reset({
      mention: '@afc163 '
    });
  }

}

7.多行
多行模式。
import { Component, ViewEncapsulation } from '@angular/core';

@Component({
  selector     : 'nz-demo-mention-multilines',
  encapsulation: ViewEncapsulation.None,
  template     : `
  <nz-mention
    [nzSuggestions]="suggestions">
     <textarea
        nz-input
        [nzAutosize]="{minRows: 4, maxRows: 4}"
        [(ngModel)]="inputValue"
        nzMentionTrigger>
      </textarea>
  </nz-mention>
`
})
export class NzDemoMentionMultilinesComponent {
  inputValue: string;
  suggestions = ['afc163', 'benjycui', 'yiminghe', 'RaoHai', '中文', 'にほんご'];

}

8.无效或只读
通过 disabled 属性设置是否生效。通过 readOnly 属性设置是否只读。
import { Component, ViewEncapsulation } from '@angular/core';

@Component({
  selector     : 'nz-demo-mention-readonly',
  encapsulation: ViewEncapsulation.None,
  template     : `
  <nz-mention
    [nzSuggestions]="suggestions">
    <input
      style="margin-bottom: 10px"
      placeholder="this is disabled Mention"
      nzMentionTrigger
      nz-input
      disabled
      [(ngModel)]="inputValue">
    <input
      placeholder="this is readOnly Mention"
      nzMentionTrigger
      nz-input
      readOnly
      [(ngModel)]="inputValue">
  </nz-mention>
`
})
export class NzDemoMentionReadonlyComponent {
  inputValue: string;
  suggestions = ['afc163', 'benjycui', 'yiminghe', 'RaoHai', '中文', 'にほんご'];
}

9.自定义触发字符
通过 nzPrefix 属性自定义触发字符。默认为 @, 可以定义为数组。
import { Component, ViewEncapsulation } from '@angular/core';
import { MentionOnSearchTypes } from 'ng-zorro-antd';

@Component({
  selector     : 'nz-demo-mention-multiple-trigger',
  encapsulation: ViewEncapsulation.None,
  template     : `
  <nz-mention
    [nzSuggestions]="suggestions"
    (nzOnSearchChange)="onSearchChange($event)"
    [nzPrefix]="['#', '@']">
    <input
      placeholder="input @ to mention people, # to mention tag"
      nzMentionTrigger
      nz-input
      [(ngModel)]="inputValue">
  </nz-mention>
`
})
export class NzDemoMentionMultipleTriggerComponent {
  inputValue: string;
  suggestions = [];
  users = ['afc163', 'benjycui', 'yiminghe', 'RaoHai', '中文', 'にほんご'];
  tags = ['1.0', '2.0', '3.0'];

  onSearchChange({value, prefix}: MentionOnSearchTypes): void {
    console.log('nzOnSearchChange', value, prefix);
    this.suggestions = prefix === '@' ? this.users : this.tags;
  }

}

10.预览
渲染提及
import { Component, ViewEncapsulation } from '@angular/core';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
@Component({
  selector     : 'nz-demo-mention-preview',
  encapsulation: ViewEncapsulation.None,
  template     : `
  <nz-tabset>
      <nz-tab nzTitle="Write">
        <nz-mention
          [nzSuggestions]="suggestions">
           <textarea
              nz-input
              [nzAutosize]="{minRows: 4, maxRows: 4}"
              [(ngModel)]="inputValue"
              (ngModelChange)="renderPreView()"
              nzMentionTrigger>
            </textarea>
        </nz-mention>
      </nz-tab>
      <nz-tab nzTitle="Preview">
          <pre [innerHTML]="preview"></pre>
      </nz-tab>
    </nz-tabset>
`
})
export class NzDemoMentionPreviewComponent {
  inputValue: string = 'Switch tab view preview @NG-ZORRO ';
  preview: SafeHtml;
  suggestions = ['NG-ZORRO', 'angular', 'Reactive-Extensions'];

  constructor(private sanitizer: DomSanitizer) {
    this.renderPreView();
  }

  getRegExp(prefix: string | string[]): RegExp {
    const prefixArray = Array.isArray(prefix) ? prefix : [prefix];
    let prefixToken = prefixArray.join('').replace(/(\$|\^)/g, '\\$1');

    if (prefixArray.length > 1) {
      prefixToken = `[${prefixToken}]`;
    }

    return new RegExp(`(\\s|^)(${prefixToken})[^\\s]*`, 'g');
  }

  renderPreView(): void {
    if (this.inputValue) {
      const regex = this.getRegExp('@');
      const previewValue = this.inputValue
      .replace(regex, match => `<a target="_blank" href="https://github.com/${match.trim().substring(1)}">${match}</a>`);
      this.preview = this.sanitizer.bypassSecurityTrustHtml(previewValue);
    }
  }
}


11.API#
<nz-mention [nzSuggestions]="suggestions">
 <textarea
    nz-input
    [(ngModel)]="value"
    nzMentionTrigger>
  </textarea>
</nz-mention>
nz-mentionCOMPONENT#
参数	说明	类型	默认值
[nzMentionTrigger]	用于指定提及的触发元素 (必须)	HTMLTextAreaElementHTMLInputElement	-
[nzMentionSuggestion]	自定义建议渲染模板	TemplateRef<any>	-
[nzLoading]	加载中	boolean	false
[nzNotFoundContent]	未找到时的内容	string	'无匹配结果，轻敲空格完成输入'
[nzPlacement]	建议框位置	'button''top'	'bottom'
[nzPrefix]	触发弹出下拉框的字符	'string''string[]'	'@'
[nzSuggestions]	建议内容	any[]	[]
[nzValueWith]	建议选项的取值方法	(any) => string	(value: string) => string
(nzOnSelect)	下拉框选择建议时回调	EventEmitter<any>	-
(onSearchChange)	输入框中 @ 变化时回调	EventEmitter<MentionOnSearchTypes>	-
方法#
方法名	说明
getMentions	获取 input[nzMentionTrigger] 中的提及数组
nzMentionTrigger#
用于指定提及的触发元素

<nz-mention>
 <textarea nzMentionTrigger></textarea>
</nz-mention>
<nz-mention>
 <input nzMentionTrigger>
</nz-mention>
nzMentionSuggestion#
自定义建议渲染模板

  <nz-mention
    [nzSuggestions]="items"
    [nzValueWith]="valueWith">
    <input nz-input nzMentionTrigger>
    <ng-container *nzMentionSuggestion="let item">
        <span>{{ item.label }} - {{ item.value }}</span>
    </ng-container>
  </nz-mention>
MentionOnSearchTypes#
参数	说明	类型	默认值
value	搜索关键词	string	-
prefix	触发前缀	string	-

九.Radio单选框
何时使用#
用于在多个备选项中选中单个状态。
和 Select 的区别是，Radio 所有选项默认可见，方便用户在比较中选择，因此选项不宜过多。

1.最简单的用法。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-radio-basic',
  template: `
    <label nz-radio>Radio</label>
  `
})
export class NzDemoRadioBasicComponent {
}

2.不可用
nz-radio 不可用。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-radio-disable',
  template: `
    <div>
      <label nz-radio [nzDisabled]="disabled">Disabled</label>
      <br>
      <label nz-radio [nzDisabled]="disabled" [ngModel]="true">Disabled</label>
      <div style="margin-top:20px;">
        <button nz-button nzType="primary" (click)="disabled=!disabled">Toggle disabled</button>
      </div>
    </div>
  `
})
export class NzDemoRadioDisableComponent {
  disabled = true;
}

3.一组互斥的 nz-radio 配合使用。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-radio-radiogroup',
  template: `
    <nz-radio-group [(ngModel)]="radioValue">
      <label nz-radio nzValue="A">A</label>
      <label nz-radio nzValue="B">B</label>
      <label nz-radio nzValue="C">C</label>
      <label nz-radio nzValue="D">D</label>
    </nz-radio-group>
  `
})
export class NzDemoRadioRadiogroupComponent {
  radioValue = 'A';
}

4.RadioGroup 组合 - 配置方式
通过配置 options 参数来渲染单选框。

import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-radio-radiogroup-options',
  template: `
    <div>
      <nz-radio-group [(ngModel)]="radioValue">
        <label nz-radio [nzValue]="o.value" *ngFor="let o of options">{{o.label}}</label>
      </nz-radio-group>
      <nz-radio-group [(ngModel)]="radioValue">
        <label nz-radio [nzValue]="o.value" *ngFor="let o of options">{{o.label}}</label>
      </nz-radio-group>
      <nz-radio-group [(ngModel)]="radioValue">
        <label nz-radio [nzValue]="o.value" *ngFor="let o of options">{{o.label}}</label>
      </nz-radio-group>
    </div>
  `
})
export class NzDemoRadioRadiogroupOptionsComponent {
  radioValue = 'Apple';
  options = [
    { label: 'Apple', value: 'Apple' },
    { label: 'Pear', value: 'Pear' },
    { label: 'Orange', value: 'Orange' },
  ];
}


5.RadioGroup 垂直
垂直的 nz-radio-group，配合更多输入框选项。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-radio-radiogroup-more',
  template: `
    <nz-radio-group [(ngModel)]="radioValue">
      <label nz-radio [ngStyle]="style" nzValue="A">Option A</label>
      <label nz-radio [ngStyle]="style" nzValue="B">Option B</label>
      <label nz-radio [ngStyle]="style" nzValue="C">Option C</label>
      <label nz-radio [ngStyle]="style" nzValue="M">
        More...
        <input type="text" nz-input *ngIf="radioValue=='M'" style="width: 100px; margin-left: 10px;">
      </label>
    </nz-radio-group>

  `,
  styles  : [
      `
      [nz-radio] {
        display: block;
      }
    `
  ]
})
export class NzDemoRadioRadiogroupMoreComponent {
  radioValue = 'A';
  style = {
    display   : 'block',
    height    : '30px',
    lineHeight: '30px'
  };
}

6.单选组合 - 配合 name 使用
可以为 nz-radio-group 配置 nzName 参数，为组合内的 input 元素赋予相同的 name 属性，使浏览器把 nz-radio-group 下的 nz-radio 真正看作是一组（例如可以通过方向键始终在同一组内更改选项）。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-radio-radiogroup-with-name',
  template: `
    <nz-radio-group [(ngModel)]="radioValue" nzName="radiogroup">
      <label nz-radio nzValue="A">A</label>
      <label nz-radio nzValue="B">B</label>
      <label nz-radio nzValue="C">C</label>
      <label nz-radio nzValue="D">D</label>
    </nz-radio-group>
  `
})
export class NzDemoRadioRadiogroupWithNameComponent {
  radioValue = 'A';
}

7.按钮样式
按钮样式的单选组合。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-radio-radiobutton',
  template: `
    <div>
      <nz-radio-group [(ngModel)]="radioValue">
        <label nz-radio-button nzValue="A">Hangzhou</label>
        <label nz-radio-button nzValue="B">Shanghai</label>
        <label nz-radio-button nzValue="C">Beijing</label>
        <label nz-radio-button nzValue="D">Chengdu</label>
      </nz-radio-group>
    </div>
    <div style="margin-top:16px;">
      <nz-radio-group [(ngModel)]="radioValue">
        <label nz-radio-button nzValue="A">Hangzhou</label>
        <label nz-radio-button nzValue="B" nzDisabled>Shanghai</label>
        <label nz-radio-button nzValue="C">Beijing</label>
        <label nz-radio-button nzValue="D">Chengdu</label>
      </nz-radio-group>
    </div>
    <div style="margin-top:16px;">
      <nz-radio-group [(ngModel)]="radioValue">
        <label nz-radio-button nzValue="A" nzDisabled>Hangzhou</label>
        <label nz-radio-button nzValue="B" nzDisabled>Shanghai</label>
        <label nz-radio-button nzValue="C" nzDisabled>Beijing</label>
        <label nz-radio-button nzValue="D" nzDisabled>Chengdu</label>
      </nz-radio-group>
    </div>
  `
})
export class NzDemoRadioRadiobuttonComponent {
  radioValue = 'A';
}

8.大小
大中小三种组合，可以和表单输入框进行对应配合

import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-radio-size',
  template: `
    <div>
      <nz-radio-group [(ngModel)]="radioValue" [nzSize]="'large'">
        <label nz-radio-button nzValue="A">Hangzhou</label>
        <label nz-radio-button nzValue="B">Shanghai</label>
        <label nz-radio-button nzValue="C">Beijing</label>
        <label nz-radio-button nzValue="D">Chengdu</label>
      </nz-radio-group>
    </div>
    <div style="margin-top:16px;">
      <nz-radio-group [(ngModel)]="radioValue">
        <label nz-radio-button nzValue="A">Hangzhou</label>
        <label nz-radio-button nzValue="B">Shanghai</label>
        <label nz-radio-button nzValue="C">Beijing</label>
        <label nz-radio-button nzValue="D">Chengdu</label>
      </nz-radio-group>
    </div>
    <div style="margin-top:16px;">
      <nz-radio-group [(ngModel)]="radioValue" [nzSize]="'small'">
        <label nz-radio-button nzValue="A">Hangzhou</label>
        <label nz-radio-button nzValue="B">Shanghai</label>
        <label nz-radio-button nzValue="C">Beijing</label>
        <label nz-radio-button nzValue="D">Chengdu</label>
      </nz-radio-group>
    </div>
  `
})
export class NzDemoRadioSizeComponent {
  radioValue = 'A';
}

9.填底的按钮样式
实色填底的单选按钮样式。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-radio-solid',
  template: `
    <div>
      <nz-radio-group [(ngModel)]="radioValue" [nzButtonStyle]="'solid'">
        <label nz-radio-button nzValue="A">Hangzhou</label>
        <label nz-radio-button nzValue="B">Shanghai</label>
        <label nz-radio-button nzValue="C">Beijing</label>
        <label nz-radio-button nzValue="D">Chengdu</label>
      </nz-radio-group>
    </div>
  `
})
export class NzDemoRadioSolidComponent {
  radioValue = 'A';
}

10.API#
[nz-radio] | [nz-radio-button]DIRECTIVE#
参数	说明	类型	默认值
[nzAutoFocus]	自动获取焦点	boolean	false
[nzDisabled]	设定 disable 状态	boolean	false
[ngModel]	指定当前是否选中，可双向绑定	boolean	false
[nzValue]	设置 value，与 nz-radio-group 配合使用	string	-
(ngModelChange)	选中变化时回调	EventEmitter<boolean>	-
nz-radio-groupCOMPONENT#
单选框组合，用于包裹一组 nz-radio。

参数	说明	类型	默认值
[ngModel]	指定选中的 nz-radio 的 value 值	string	-
[nzName]	nz-radio-group 下所有 input[type="radio"] 的 name 属性	string	无
[nzDisabled]	设定所有 nz-radio disable 状态	boolean	false
[nzSize]	大小，只对按钮样式生效	large ｜ default ｜ small	default
(ngModelChange)	选中变化时回调	EventEmitter<boolean>	-
[nzButtonStyle]	RadioButton 的风格样式，目前有描边和填色两种风格	outline 丨 solid	outline
方法#
[nz-radio]DIRECTIVE#
名称	描述
blur()	移除焦点
focus()	获取焦点

十.评分组件。
何时使用#
对评价进行展示。
对事物进行快速的评级操作。

1.基本
最简单的用法。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-rate-basic',
  template: `<nz-rate [ngModel]="0"></nz-rate>`,
})
export class NzDemoRateBasicComponent {
}

2.半星
支持选中半星。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-rate-half',
  template: `<nz-rate [ngModel]="2.5" nzAllowHalf></nz-rate>`
})
export class NzDemoRateHalfComponent {
}

3.文案展现
给评分组件加上文案展示。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-rate-text',
  template: `
    <nz-rate [(ngModel)]="value" nzAllowHalf></nz-rate>
    <span *ngIf="value" class="ant-rate-text">{{ value }} stars</span>
  `
})
export class NzDemoRateTextComponent {
  value = 3;
}

4.只读
只读，无法进行鼠标交互。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-rate-disabled',
  template: `
    <nz-rate [ngModel]="2" nzDisabled></nz-rate>`,
  styles  : []
})
export class NzDemoRateDisabledComponent {
}

5.清除
支持允许或者禁用清除。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-rate-clear',
  template: `
    <nz-rate [(ngModel)]="value" nzAllowHalf></nz-rate>
    <span class="ant-rate-text">allowClear: true</span>
    <br>
    <nz-rate [(ngModel)]="value" nzAllowHalf [nzAllowClear]="false"></nz-rate>
    <span class="ant-rate-text">allowClear: false</span>
  `
})
export class NzDemoRateClearComponent {
  value = 0;
}

6.其他字符
可以将星星替换为其他字符，比如字母，数字，字体图标甚至中文。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-rate-character',
  template: `
    <nz-rate [ngModel]="0" nzAllowHalf [nzCharacter]="characterIcon"></nz-rate>
    <br>
    <nz-rate [ngModel]="0" nzAllowHalf class="large" [nzCharacter]="characterEnLetter"></nz-rate>
    <br>
    <nz-rate [ngModel]="0" nzAllowHalf [nzCharacter]="characterZhLetter"></nz-rate>
    <ng-template #characterIcon><i nz-icon type="heart"></i></ng-template>
    <ng-template #characterZhLetter>好</ng-template>
    <ng-template #characterEnLetter>A</ng-template>
  `,
  styles  : [
      `
      .large ::ng-deep .ant-rate-star {
        font-size: 36px;
      }
    `
  ]
})
export class NzDemoRateCharacterComponent {
}

7.[nzAllowClear]	是否允许再次点击后清除	boolean	true
[nzAllowHalf]	是否允许半选	boolean	false
[nzAutoFocus]	自动获取焦点	boolean	false
[nzCharacter]	自定义字符	TemplateRef<void>	<i nz-icon type="star"></i>
[nzCount]	star 总数	number	5
[nzDisabled]	只读，无法进行交互	boolean	false
[ngModel]	当前数，可以双向绑定	number	0
(ngModelChange)	当前数改变时的回调	EventEmitter<number>	-
(nzOnBlur)	失去焦点时的回调	EventEmitter<FocusEvent>	-
(nzOnFocus)	获取焦点时的回调	EventEmitter<FocusEvent>	-
(nzOnHoverChange)	鼠标经过时数值变化的回调	EventEmitter<number>	-
(nzOnKeyDown)	按键回调	EventEmitter<KeyboardEvent>	-
方法#
名称	描述
blur()	移除焦点
focus()	获取焦点

十一.Select选择器
下拉选择器。

何时使用#
弹出一个下拉菜单给用户选择操作，用于代替原生的选择器，或者需要一个更优雅的多选器时。
当选项少时（少于 5 项），建议直接将选项平铺，使用 Radio 是更好的选择。

1.基本使用
基本使用。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-select-basic',
  template: `
    <div>
      <nz-select style="width: 120px;" [(ngModel)]="selectedValue" nzAllowClear nzPlaceHolder="Choose">
        <nz-option nzValue="jack" nzLabel="Jack"></nz-option>
        <nz-option nzValue="lucy" nzLabel="Lucy"></nz-option>
        <nz-option nzValue="disabled" nzLabel="Disabled" nzDisabled></nz-option>
      </nz-select>
      <nz-select style="width: 120px;" [ngModel]="'lucy'" nzDisabled>
        <nz-option nzValue="lucy" nzLabel="Lucy"></nz-option>
      </nz-select>
    </div>
  `,
  styles  : [
    `
      nz-select {
        margin-right: 8px;
      }
    `
  ]
})
export class NzDemoSelectBasicComponent {
  selectedValue = 'lucy';
}

2.三种大小
三种大小的选择框，当 nzSize 分别为 large 和 small 时，输入框高度为 40px 和 24px ，默认高度为 32px。
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'nz-demo-select-size',
  template: `
    <nz-radio-group [(ngModel)]="size">
      <label nz-radio-button nzValue="large"><span>Large</span></label>
      <label nz-radio-button nzValue="default"><span>Default</span></label>
      <label nz-radio-button nzValue="small"><span>Small</span></label>
    </nz-radio-group>
    <br><br>
    <nz-select style="width: 200px;" [(ngModel)]="singleValue" [nzSize]="size">
      <nz-option *ngFor="let option of listOfOption" [nzLabel]="option.label" [nzValue]="option.value"></nz-option>
    </nz-select>
    <br><br>
    <nz-select style="width: 200px;" [(ngModel)]="singleValue" [nzSize]="size" nzShowSearch>
      <nz-option *ngFor="let option of listOfOption" [nzLabel]="option.label" [nzValue]="option.value"></nz-option>
    </nz-select>
    <br><br>
    <nz-select style="width: 100%" [(ngModel)]="multipleValue" [nzSize]="size" nzMode="multiple" nzPlaceHolder="Please select">
      <nz-option *ngFor="let option of listOfOption" [nzLabel]="option.label" [nzValue]="option.value"></nz-option>
    </nz-select>
    <br><br>
    <nz-select style="width: 100%" [(ngModel)]="tagValue" [nzSize]="size" nzMode="tags" nzPlaceHolder="Please select">
      <nz-option *ngFor="let option of listOfOption" [nzLabel]="option.label" [nzValue]="option.value"></nz-option>
    </nz-select>
  `
})
export class NzDemoSelectSizeComponent implements OnInit {
  listOfOption = [];
  size = 'default';
  singleValue = 'a10';
  multipleValue = [ 'a10', 'c12' ];
  tagValue = [ 'a10', 'c12', 'tag' ];

  ngOnInit(): void {
    const children = [];
    for (let i = 10; i < 36; i++) {
      children.push({ label: i.toString(36) + i, value: i.toString(36) + i });
    }
    this.listOfOption = children;
  }
}

3.多选
多选，从已有条目中选择，例子中通过 nzMaxMultipleCount 限制了最多选择3个选项。
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'nz-demo-select-multiple',
  template: `
    <nz-select [nzMaxMultipleCount]="3" style="width: 100%" nzMode="multiple" nzPlaceHolder="Please select" [(ngModel)]="listOfSelectedValue">
      <nz-option *ngFor="let option of listOfOption" [nzLabel]="option.label" [nzValue]="option.value"></nz-option>
    </nz-select>
  `
})
export class NzDemoSelectMultipleComponent implements OnInit {
  listOfOption = [];
  listOfSelectedValue = [ 'a10', 'c12' ];

  ngOnInit(): void {
    const children = [];
    for (let i = 10; i < 36; i++) {
      children.push({ label: i.toString(36) + i, value: i.toString(36) + i });
    }
    this.listOfOption = children;
  }
}


4.带搜索框
展开后可对选项进行搜索。

import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-select-search',
  template: `
    <nz-select style="width: 200px;" nzShowSearch nzAllowClear nzPlaceHolder="Select a person" [(ngModel)]="selectedValue">
      <nz-option nzLabel="Jack" nzValue="jack"></nz-option>
      <nz-option nzLabel="Lucy" nzValue="lucy"></nz-option>
      <nz-option nzLabel="Tom" nzValue="tom"></nz-option>
    </nz-select>
  `
})
export class NzDemoSelectSearchComponent {
  selectedValue;
}

5.联动
省市联动是典型的例子。
推荐使用 Cascader 组件。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-select-coordinate',
  template: `
    <div>
      <nz-select style="width: 120px;" [(ngModel)]="selectedProvince" (ngModelChange)="provinceChange($event)">
        <nz-option *ngFor="let p of provinceData" [nzValue]="p" [nzLabel]="p"></nz-option>
      </nz-select>
      <nz-select style="width: 120px;" [(ngModel)]="selectedCity">
        <nz-option *ngFor="let c of cityData[selectedProvince]" [nzValue]="c" [nzLabel]="c"></nz-option>
      </nz-select>
    </div>
  `,
  styles  : [
    `
      nz-select {
        margin-right: 8px;
      }
    `
  ]
})
export class NzDemoSelectCoordinateComponent {
  selectedProvince = 'Zhejiang';
  selectedCity = 'Hangzhou';
  provinceData = [ 'Zhejiang', 'Jiangsu' ];
  cityData = {
    Zhejiang: [ 'Hangzhou', 'Ningbo', 'Wenzhou' ],
    Jiangsu : [ 'Nanjing', 'Suzhou', 'Zhenjiang' ]
  };

  provinceChange(value: string): void {
    this.selectedCity = this.cityData[ value ][ 0 ];
  }
}

6.分组
用 nz-option-group 进行选项分组。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-select-optgroup',
  template: `
    <nz-select style="width: 120px;" [(ngModel)]="selectedValue" nzAllowClear nzPlaceHolder="Choose">
      <nz-option-group nzLabel="Manager">
        <nz-option nzValue="jack" nzLabel="Jack"></nz-option>
        <nz-option nzValue="lucy" nzLabel="Lucy"></nz-option>
      </nz-option-group>
      <nz-option-group nzLabel="Engineer">
        <nz-option nzValue="Tom" nzLabel="tom"></nz-option>
      </nz-option-group>
    </nz-select>
  `
})
export class NzDemoSelectOptgroupComponent {
  selectedValue = 'lucy';
}

7.自定义下拉菜单内容
通过 nzCustomContent 自定义 nz-option 显示的内容。

import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-select-custom-content',
  template: `
    <nz-select style="width: 200px;" nzShowSearch nzAllowClear nzPlaceHolder="Select OS" [(ngModel)]="selectedOS">
      <nz-option nzCustomContent nzLabel="Windows" nzValue="windows"><i nz-icon type="windows"></i> Windows</nz-option>
      <nz-option nzCustomContent nzLabel="Mac" nzValue="mac"><i nz-icon type="apple"></i> Mac</nz-option>
      <nz-option nzCustomContent nzLabel="Android" nzValue="android"><i nz-icon type="android"></i> Android</nz-option>
    </nz-select>
  `
})
export class NzDemoSelectCustomContentComponent {
  selectedOS;
}

8.获得选项的对象
ngModel 取到的值为选中 nz-option 的 nzValue 值，当 nzValue 传入为一个对象时，ngModel 获取的值也是一个对象，compareWith 的用法参见 这里.
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-select-label-in-value',
  template: `
    <p>The selected option's age is {{selectedValue?.age}}</p>
    <br>
    <nz-select style="width: 120px;" [compareWith]="compareFn" [(ngModel)]="selectedValue" (ngModelChange)="log($event)" nzAllowClear nzPlaceHolder="Choose">
      <nz-option *ngFor="let option of optionList" [nzValue]="option" [nzLabel]="option.label"></nz-option>
    </nz-select>
  `
})
export class NzDemoSelectLabelInValueComponent {
  optionList = [
    { label: 'Lucy', value: 'lucy', age: 20 },
    { label: 'Jack', value: 'jack', age: 22 }
  ];
  selectedValue = { label: 'Jack', value: 'jack', age: 22 };
  // tslint:disable-next-line:no-any
  compareFn = (o1: any, o2: any) => o1 && o2 ? o1.value === o2.value : o1 === o2;

  log(value: { label: string, value: string, age: number }): void {
    console.log(value);
  }
}

9.下拉加载
一个带有下拉加载远程数据的例子。

import { HttpClient } from '@angular/common/http';
import { Component, OnInit } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

@Component({
  selector: 'nz-demo-select-scroll-load',
  template: `
    <nz-select style="width: 100%;" [(ngModel)]="selectedUser" (nzScrollToBottom)="loadMore()" nzPlaceHolder="Select users" nzAllowClear>
      <nz-option *ngFor="let o of optionList" [nzValue]="o" [nzLabel]="o"></nz-option>
      <nz-option *ngIf="isLoading" nzDisabled nzCustomContent>
        <i nz-icon type="loading" class="loading-icon"></i> Loading Data...
      </nz-option>
    </nz-select>
  `,
  styles  : [ `
    .loading-icon {
      margin-right: 8px;
    }
  ` ]
})
export class NzDemoSelectScrollLoadComponent implements OnInit {
  randomUserUrl = 'https://api.randomuser.me/?results=10';
  optionList = [];
  selectedUser;
  isLoading = false;
  // tslint:disable-next-line:no-any
  getRandomNameList: Observable<string[]> = this.http.get(`${this.randomUserUrl}`).pipe(map((res: any) => res.results)).pipe(map((list: any) => {
    return list.map(item => `${item.name.first}`);
  }));

  loadMore(): void {
    this.isLoading = true;
    this.getRandomNameList.subscribe(data => {
      this.isLoading = false;
      this.optionList = [ ...this.optionList, ...data ];
    });
  }

  constructor(private http: HttpClient) {
  }

  ngOnInit(): void {
    this.loadMore();
  }
}

10.搜索用户
一个带有远程搜索，节流控制，请求时序控制，加载状态的多选示例。
import { HttpClient } from '@angular/common/http';
import { Component, OnInit } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { debounceTime, map, switchMap } from 'rxjs/operators';

@Component({
  selector: 'nz-demo-select-select-users',
  template: `
    <nz-select style="width: 100%;" nzMode="multiple" [(ngModel)]="selectedUser" nzPlaceHolder="Select users" nzAllowClear nzShowSearch [nzServerSearch]="true" (nzOnSearch)="onSearch($event)">
      <ng-container *ngFor="let o of optionList">
        <nz-option *ngIf="!isLoading" [nzValue]="o" [nzLabel]="o"></nz-option>
      </ng-container>
      <nz-option *ngIf="isLoading" nzDisabled nzCustomContent>
        <i nz-icon type="loading" class="loading-icon"></i> Loading Data...
      </nz-option>
    </nz-select>
  `,
  styles  : [ `
    .loading-icon {
      margin-right: 8px;
    }
  ` ]
})
export class NzDemoSelectSelectUsersComponent implements OnInit {
  randomUserUrl = 'https://api.randomuser.me/?results=5';
  searchChange$ = new BehaviorSubject('');
  optionList = [];
  selectedUser;
  isLoading = false;

  onSearch(value: string): void {
    this.isLoading = true;
    this.searchChange$.next(value);
  }

  constructor(private http: HttpClient) {
  }

  ngOnInit(): void {
    // tslint:disable-next-line:no-any
    const getRandomNameList = (name: string) => this.http.get(`${this.randomUserUrl}`).pipe(map((res: any) => res.results)).pipe(map((list: any) => {
      return list.map(item => `${item.name.first} ${name}`);
    }));
    const optionList$: Observable<string[]> = this.searchChange$.asObservable().pipe(debounceTime(500)).pipe(switchMap(getRandomNameList));
    optionList$.subscribe(data => {
      this.optionList = data;
      this.isLoading = false;
    });
  }
}

11.API#
<nz-select>
  <nz-option nzValue="lucy" nzLabel="Lucy"></nz-option>
</nz-select>
nz-selectCOMPONENT#
参数	说明	类型	默认值
[ngModel]	当前选中的 nz-option 的 nzValue 值，可双向绑定，当 nzMode 为 multiple 或 tags 时，ngModel 为数组	any 丨 any[]	-
[compareWith]	与 SelectControlValueAccessor 相同	(o1: any, o2: any) => boolean	(o1: any, o2: any) => o1===o2
[nzAllowClear]	支持清除	boolean	false
[nzOpen]	下拉菜单是否打开，可双向绑定	boolean	false
[nzAutoFocus]	默认获取焦点	boolean	false
[nzDisabled]	是否禁用	boolean	false
[nzDropdownClassName]	下拉菜单的 className 属性	string	-
[nzDropdownMatchSelectWidth]	下拉菜单和选择器同宽	boolean	true
[nzDropdownStyle]	下拉菜单的 style 属性	object	-
[nzServerSearch]	是否使用服务端搜索，当为 true 时，将不再在前端对 nz-option 进行过滤	boolean	false
[nzFilterOption]	是否根据输入项进行筛选。当其为一个函数时，会接收 inputValueoption 两个参数，当 option 符合筛选条件时，应返回 true，反之则返回 false。	(input?: string, option?: NzOptionComponent) => boolean;	-
[nzMaxMultipleCount]	最多选中多少个标签	number	Infinity
[nzMode]	设置 nz-select 的模式	'multiple' 丨 'tags' 丨 'default'	'default'
[nzNotFoundContent]	当下拉列表为空时显示的内容	string	-
[nzPlaceHolder]	选择框默认文字	string	-
[nzShowSearch]	使单选模式可搜索	boolean	false
[nzSize]	选择框大小，可选 largesmall	string	default
(ngModelChange)	选中的 nz-option 发生变化时，调用此函数	EventEmitter<any[]>	-
(nzOpenChange)	下拉菜单打开状态变化回调	EventEmitter<boolean>	-
(nzScrollToBottom)	下拉列表滚动到底部的回调	EventEmitter<void>	-
(nzOnSearch)	文本框值变化时回调	EventEmitter<string>	-
nz-optionCOMPONENT#
参数	说明	类型	默认值
[nzDisabled]	是否禁用	boolean	false
[nzLabel]	选中该 nz-option 后，nz-select 中显示的文字	string	-
[nzValue]	nz-select 中 ngModel 的值	any	-
[nzCustomContent]	是否自定义在下拉菜单中的Template内容，当为 true 时，nz-option 包裹的内容将直接渲染在下拉菜单中	boolean	false
nz-option-groupCOMPONENT#
参数	说明	类型	默认值
[nzLabel]	组名	string丨TemplateRef<void>	-
方法#
nz-selectCOMPONENT#
名称	说明
blur()	取消焦点
focus()	获取焦点


十二.Slider滑动输入条
滑动型输入器，展示当前值和可选范围。

何时使用#
当用户需要在数值区间/自定义区间内进行选择时，可为连续或离散值。

1.基本
基本滑动条。当 range 为 true 时，渲染为双滑块。当 disabled 为 true 时，滑块处于不可用状态。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-slider-basic',
  template: `
    <nz-slider [nzDefaultValue]="30" [nzDisabled]="disabled"></nz-slider>
    <nz-slider nzRange [nzDefaultValue]="[20, 50]" [nzDisabled]="disabled"></nz-slider>
    Disabled: <nz-switch nzSize="small" [(ngModel)]="disabled"></nz-switch>
  `
})
export class NzDemoSliderBasicComponent {

  disabled = false;

}

2.带输入框的滑块
和 数字输入框 组件保持同步。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-slider-input-number',
  template: `

    <nz-row>
      <nz-col nzSpan="12">
        <nz-slider [nzMin]="1" [nzMax]="20" [(ngModel)]="value1"></nz-slider>
      </nz-col>
      <div nz-col nzSpan="4">
        <nz-input-number [nzMin]="1" [nzMax]="20" [ngStyle]="{ 'marginLeft': '16px' }" [(ngModel)]="value1"></nz-input-number>
      </div>
    </nz-row>

    <nz-row>
      <nz-col nzSpan="12">
        <nz-slider [nzMin]="0" [nzMax]="1" [nzStep]="0.01" [(ngModel)]="value2"></nz-slider>
      </nz-col>
      <nz-col nzSpan="4">
        <nz-input-number [nzMin]="0" [nzMax]="1" [ngStyle]="{ marginLeft: '16px' }" [nzStep]="0.01" [(ngModel)]="value2"></nz-input-number>
      </nz-col>
    </nz-row>

  `
})
export class NzDemoSliderInputNumberComponent {

  value1 = 1;
  value2 = 0;

}

3.带 icon 的滑块
滑块左右可以设置图标来表达业务含义。
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'nz-demo-slider-icon-slider',
  template: `
    <div class="icon-wrapper test-class">
      <i nz-icon type="frown" [class.icon-highlight]="preHighLight"></i>
      <nz-slider [nzMin]="0" [nzMax]="20" [(ngModel)]="sliderValue"></nz-slider>
      <i nz-icon type="smile" [class.icon-highlight]="nextHighLight"></i>
    </div>
  `,
  styles  : [
    `
      .icon-wrapper {
        position: relative;
        padding: 0px 30px;
      }

      [nz-icon] {
        position: absolute;
        top: -2px;
        width: 16px;
        height: 16px;
        line-height: 1;
        font-size: 16px;
        color: rgba(0, 0, 0, .25);
      }

      [nz-icon]:first-child {
        left: 0;
      }

      [nz-icon]:last-child {
        right: 0;
      }

      .icon-highlight{
        color: rgba(0, 0, 0, 0.45);
      }
    `
  ]
})
export class NzDemoSliderIconSliderComponent implements OnInit {

  min = 0;
  max = 20;
  mid = parseFloat(((this.max - this.min) / 2).toFixed(5));
  preHighLight = false;
  nextHighLight = false;
  _sliderValue;
  set sliderValue(value: number) {
    this._sliderValue = value;
    this.highlightIcon();
  }

  get sliderValue() {
    return this._sliderValue;
  }

  ngOnInit() {
    this.sliderValue = 0;
  }

  highlightIcon() {
    const lower = this._sliderValue >= this.mid;
    this.preHighLight = !lower;
    this.nextHighLight = lower;
  }

}

4.自定义提示
使用 tipFormatter 可以格式化 Tooltip 的内容，设置 tipFormatter={null}，则隐藏 Tooltip。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-slider-tip-formatter',
  template: `
    <nz-slider [nzTipFormatter]="formatter"></nz-slider>
    <nz-slider [nzTipFormatter]="null"></nz-slider>
  `
})
export class NzDemoSliderTipFormatterComponent {

  formatter(value) {
    return `${value}%`;
  }

}

5.事件
当 Slider 的值发生改变时，会触发 onChange 事件，并把改变后的值作为参数传入。在 onmouseup 时，会触发 onAfterChange 事件，并把当前值作为参数传入。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-slider-event',
  template: `
    <nz-slider
      [nzDefaultValue]="30"
      [(ngModel)]="singleValue" (ngModelChange)="onChange($event)"
      (nzOnAfterChange)="onAfterChange($event)"
    ></nz-slider>
    <nz-slider
      nzRange
      [nzStep]="10"
      [nzDefaultValue]="[20, 50]"
      [(ngModel)]="rangeValue" (ngModelChange)="onChange($event)"
      (nzOnAfterChange)="onAfterChange($event)"
    ></nz-slider>
  `
})
export class NzDemoSliderEventComponent {

  singleValue;
  rangeValue;

  onChange(value) {
    console.log(`onChange: ${value}`);
  }

  onAfterChange(value) {
    console.log(`onAfterChange: ${value}`);
  }

}

6.带标签的滑块
使用 marks 属性标注分段式滑块，使用 value / defaultValue 指定滑块位置。当 included=false 时，表明不同标记间为并列关系。当 step=null 时，Slider 的可选值仅有 marks 标出来的部分。


import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-slider-mark',
  template: `
    <div>
      <h4>included=true</h4>
      <nz-slider [nzMarks]="marks" [nzDefaultValue]="37"></nz-slider>
      <nz-slider [nzMarks]="marks" nzIncluded nzRange [nzDefaultValue]="[26, 37]"></nz-slider>
      <h4>included=false</h4>
      <nz-slider [nzMarks]="marks" [nzIncluded]="false" [nzDefaultValue]="37"></nz-slider>
      <h4>marks & step</h4>
      <nz-slider [nzMarks]="marks" [nzStep]="10" [nzDefaultValue]="37"></nz-slider>
      <h4>step=null || dots=true</h4>
      <nz-slider [nzMarks]="marks" [nzStep]="null" [nzDefaultValue]="37"></nz-slider>
      <nz-slider [nzMarks]="marks" nzDots [nzDefaultValue]="37"></nz-slider>
      Change nzMarks dynamically: <button nz-button (click)="changeMarks()">Change nzMarks</button>
    </div>
  `,
  styles  : [ `
    h4 {
      margin: 0 0 16px;
    }

    .ant-slider-with-marks {
      margin-bottom: 44px;
    }
  ` ]
})
export class NzDemoSliderMarkComponent {

  marks: any = {
    0  : '0°C',
    26 : '26°C',
    37 : '37°C',
    100: {
      style: {
        color: '#f50',
      },
      label: '<strong>100°C</strong>',
    }
  };

  changeMarks() {
    this.marks = {
      20: '20%',
      99: '99%',
    };
  }

}

7.垂直
垂直方向的 Slider。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-slider-vertical',
  template: `
    <div [ngStyle]="{ height: '300px' }">
      <div [ngStyle]="style">
        <nz-slider nzVertical [nzDefaultValue]="30"></nz-slider>
      </div>
      <div [ngStyle]="style">
        <nz-slider nzVertical nzRange [nzStep]="10" [nzDefaultValue]="[20, 50]"></nz-slider>
      </div>
      <div [ngStyle]="style">
        <nz-slider nzVertical nzRange [nzMarks]="marks" [nzDefaultValue]="[26, 37]"></nz-slider>
      </div>
    </div>
  `
})
export class NzDemoSliderVerticalComponent {

  style = {
    float     : 'left',
    height    : '300px',
    marginLeft: '70px'
  };

  marks = {
    0  : '0°C',
    26 : '26°C',
    37 : '37°C',
    100: {
      style: {
        color: '#f50',
      },
      label: '<strong>100°C</strong>',
    }
  };

}

8.API#
nz-sliderCOMPONENT#
参数	说明	类型	默认值
[nzDefaultValue]	设置初始取值。当 range 为 false 时，使用 number，否则用 [number, number]	number / number[]	0 or [0, 0]
[nzDisabled]	值为 true 时，滑块为禁用状态	boolean	false
[nzDots]	是否只能拖拽到刻度上	boolean	false
[nzIncluded]	marks 不为空对象时有效，值为 true 时表示值为包含关系，false 表示并列	boolean	true
[nzMarks]	刻度标记，key 的类型必须为 number 且取值在闭区间 [min, max] 内，每个标签可以单独设置样式	object	{ number: string/HTML } or { number: { style: object, label: string/HTML } }
[nzMax]	最大值	number	100
[nzMin]	最小值	number	0
[nzRange]	双滑块模式	boolean	false
[nzStep]	步长，取值必须大于 0，并且可被 (max - min) 整除。当 marks 不为空对象时，可以设置 step 为 null，此时 Slider 的可选值仅有 marks 标出来的部分。	number / null	1
[nzTipFormatter]	Slider 会把当前值传给 nzTipFormatter，并在 Tooltip 中显示 nzTipFormatter 的返回值，若为 null，则隐藏 Tooltip。	Function(value) / null	IDENTITY
[ngModel]	设置当前取值。当 range 为 false 时，使用 number，否则用 [number, number]	number[] 丨 number>	
[nzVertical]	值为 true 时，Slider 为垂直方向	boolean	false
(nzOnAfterChange)	与 onmouseup 触发时机一致，把当前值作为参数传入。	EventEmitter<number[] 丨 number>	-
(ngModelChange)	当 Slider 的值发生改变时，会触发 ngModelChange 事件，并把改变后的值作为参数传入。	EventEmitter<number[] 丨 number>>	-


十三.Switch开关
开关选择器。

何时使用#
需要表示开关状态/两种状态之间的切换时；
和 checkbox的区别是，切换 switch 会直接触发状态改变，而 checkbox 一般用于状态标记，需要和提交操作配合。

1.基本
最简单的用法
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-switch-basic',
  template: `<nz-switch [(ngModel)]="switchValue"></nz-switch>`
})
export class NzDemoSwitchBasicComponent {
  switchValue = false;
}

2.不可用
Switch 失效状态。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-switch-disabled',
  template: `
    <nz-switch [(ngModel)]="switchValue" [nzDisabled]="isDisabled"></nz-switch>
    <br>
    <button nz-button [nzType]="'primary'" (click)="isDisabled = !isDisabled">Toggle disabled</button>`,
  styles  : [ `
    nz-switch {
      margin-bottom: 8px;
    }`
  ]
})
export class NzDemoSwitchDisabledComponent {
  switchValue = false;
  isDisabled = true;
}

3.加载中
标识开关操作仍在执行中。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-switch-loading',
  template: `
    <nz-switch [ngModel]="true" nzLoading></nz-switch>
    <br>
    <nz-switch nzSize="small" [ngModel]="false" nzLoading></nz-switch>
  `,
  styles  : [ `
    nz-switch {
      margin-bottom: 8px;
    }`
  ]
})
export class NzDemoSwitchLoadingComponent {
}

4.两种大小
nzSize="small" 表示小号开关。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-switch-size',
  template: `
    <nz-switch [ngModel]="true"></nz-switch>
    <br>
    <nz-switch nzSize="small" [ngModel]="true"></nz-switch>
  `,
  styles  : [ `
    nz-switch {
      margin-bottom: 8px;
    }`
  ]
})
export class NzDemoSwitchSizeComponent {
}

5.完整控制
Switch 的状态完全由用户接管，不再自动根据点击事件改变数据。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-switch-control',
  template: `<nz-switch [(ngModel)]="switchValue" [nzControl]="true" (click)="clickSwitch()" [nzLoading]="loading"></nz-switch>`
})
export class NzDemoSwitchControlComponent {
  switchValue = false;
  loading = false;

  clickSwitch(): void {
    if (!this.loading) {
      this.loading = true;
      setTimeout(() => {
        this.switchValue = !this.switchValue;
        this.loading = false;
      }, 3000);
    }

  }
}

6.nz-switchCOMPONENT#
参数	说明	类型	默认值
[ngModel]	指定当前是否选中，可双向绑定	boolean	false
[nzCheckedChildren]	选中时的内容	string丨TemplateRef<void>	
[nzUnCheckedChildren]	非选中时的内容	string丨TemplateRef<void>	
[nzDisabled]	disable 状态	boolean	false
[nzSize]	开关大小，可选值：defaultsmall	string	default
[nzLoading]	加载中的开关	boolean	false
[nzControl]	是否完全由用户控制状态	boolean	false
(ngModelChange)	当前是否选中的回调	EventEmitter<boolean>	false
方法#
名称	描述
focus()	获取焦点
blur()	移除焦点


十四.TimePicker时间选择框
输入或选择时间的控件。

何时使用#
当用户需要输入一个时间，可以点击标准输入框，弹出时间面板进行选择。

1.基本
点击 nz-time-picker，然后可以在浮层中选择或者输入某一时间。

import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-time-picker-basic',
  template: `
    <nz-time-picker [(ngModel)]="time" [nzDefaultOpenValue]="defaultOpenValue"></nz-time-picker>
  `
})
export class NzDemoTimePickerBasicComponent {
  time: Date | null = null;
  defaultOpenValue = new Date(0, 0, 0, 0, 0, 0);
}

2.数据绑定
可以进行双向绑定。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-time-picker-value',
  template: `
    <nz-time-picker [(ngModel)]="time" (ngModelChange)="log($event)"></nz-time-picker>
  `
})
export class NzDemoTimePickerValueComponent {
  time: Date | null = null;

  log(time: Date): void {
    console.log(time && time.toTimeString());
  }
}

3.三种大小
三种大小的输入框，大的用在表单中，中的为默认。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-time-picker-size',
  template: `
    <nz-time-picker [(ngModel)]="time" nzSize="large"></nz-time-picker>
    <nz-time-picker [(ngModel)]="time"></nz-time-picker>
    <nz-time-picker [(ngModel)]="time" nzSize="small"></nz-time-picker>
  `,
  styles  : [
      `nz-time-picker {
      margin: 0 8px 12px 0;
    }`
  ]
})
export class NzDemoTimePickerSizeComponent {
  time = new Date();
}

4.禁用
禁用时间选择。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-time-picker-disabled',
  template: `
    <nz-time-picker nzDisabled></nz-time-picker>
  `
})
export class NzDemoTimePickerDisabledComponent {
}

3.选择时分
nz-time-picker 浮层中的列会随着 nzFormat 变化，当略去 nzFormat 中的某部分时，浮层中对应的列也会消失。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-time-picker-hide-column',
  template: `
    <nz-time-picker [(ngModel)]="time" nzFormat="HH:mm"></nz-time-picker>
  `
})
export class NzDemoTimePickerHideColumnComponent {
  time = new Date();
}

4.步长选项
可以使用 nzHourStepnzMinuteStepnzSecondStep 按步长展示可选的时分秒。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-time-picker-interval-options',
  template: `
    <nz-time-picker [nzMinuteStep]="15" [nzSecondStep]="10"></nz-time-picker>
  `
})
export class NzDemoTimePickerIntervalOptionsComponent {
}

5.附加内容
在 nz-time-picker 选择框底部显示自定义的内容。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-time-picker-addon',
  template: `
    <nz-time-picker [(ngModel)]="time" [nzAddOn]="addOnTemplate" #timePicker></nz-time-picker>
    <ng-template #addOnTemplate>
      <button nz-button nzSize="small" nzType="primary" (click)="timePicker.close()">Ok</button>
    </ng-template>
  `
})
export class NzDemoTimePickerAddonComponent {
  time: Date | null = null;
}

6.禁用部分
禁用部分时间选择。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-time-picker-disabled-part',
  template: `
    <nz-time-picker [nzDisabledHours]="disabledHours" [nzDisabledMinutes]="disabledMinutes" [nzDisabledSeconds]="disabledSeconds"></nz-time-picker>
  `
})
export class NzDemoTimePickerDisabledPartComponent {
  disabledHours(): number[] {
    return [ 1, 2, 3 ];
  }

  disabledMinutes(hour: number): number[] {
    if (hour === 4) {
      return [ 20, 21, 22, 23, 24, 25 ];
    } else {
      return [];
    }
  }

  disabledSeconds(hour: number, minute: number): number[] {
    if ((hour === 5) && (minute === 1)) {
      return [ 20, 21, 22, 23, 24, 25 ];
    } else {
      return [];
    }
  }
}

7.API#
<nz-time-picker [(ngModel)]="someTime"></nz-time-picker>
nz-time-pickerCOMPONENT#
参数	说明	类型	默认值
[ngModel]	当前时间	Date	-
[nzAddon]	选择框底部显示自定义的内容	TemplateRef<void>	-
[nzAllowEmpty]	是否展示清除按钮	boolean	true
[nzAutoFocus]	自动获取焦点	boolean	false
[nzClearText]	清除按钮的提示文案	string	clear
[nzDefaultOpenValue]	设置面板打开时默认选中的值	Date	new Date()
[nzDisabled]	禁用全部操作	boolean	false
[nzDisabledHours]	禁止选择部分小时选项	function()	-
[nzDisabledMinutes]	禁止选择部分分钟选项	function(selectedHour)	-
[nzDisabledSeconds]	禁止选择部分秒选项	function(selectedHour, selectedMinute)	-
[nzFormat]	展示的时间格式	DatePipe	"HH:mm:ss"
[nzHideDisabledOptions]	隐藏禁止选择的选项	boolean	false
[nzHourStep]	小时选项间隔	number	1
[nzMinuteStep]	分钟选项间隔	number	1
[nzSecondStep]	秒选项间隔	number	1
[nzOpen]	面板是否打开，可双向绑定	boolean	false
[nzPlaceHolder]	没有值的时候显示的内容	string	"请选择时间"
[nzPopupClassName]	弹出层类名	string	''
(ngModelChange)	时间发生变化的回调	EventEmitter<Date>	-
(nzOpenChange)	面板打开/关闭时的回调	EventEmitter<boolean>	-
方法#
名称	描述
blur()	移除焦点
focus()	获取焦点

十五.Transfer穿梭框
双栏穿梭选择框。

何时使用#
用直观的方式在两栏中移动元素，完成选择行为。

选择一个或以上的选项后，点击对应的方向键，可以把选中的选项移动到另一栏。 其中，左边一栏为 source，右边一栏为 target，API 的设计也反映了这两个概念。

1.基本用法
最基本的用法，展示了 nzDataSource 每行的渲染函数 nzRender 以及回调函数 nzChange、nzSelectChange 的用法。

import { Component, OnInit } from '@angular/core';
import { NzMessageService } from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-transfer-basic',
  template: `
    <nz-transfer
      [nzDataSource]="list"
      [nzTitles]="['Source', 'Target']"
      (nzSelectChange)="select($event)"
      (nzChange)="change($event)">
    </nz-transfer>
  `
})
export class NzDemoTransferBasicComponent implements OnInit {
  // tslint:disable-next-line:no-any
  list: any[] = [];

  ngOnInit(): void {
    for (let i = 0; i < 20; i++) {
      this.list.push({
        key     : i.toString(),
        title   : `content${i + 1}`,
        disabled: i % 3 < 1,
      });
    }

    [ 2, 3 ].forEach(idx => this.list[ idx ].direction = 'right');
  }

  select(ret: {}): void {
    console.log('nzSelectChange', ret);
  }

  change(ret: {}): void {
    console.log('nzChange', ret);
  }
}

2.带搜索框
带搜索框的穿梭框，可以自定义搜索函数。
import { Component, OnInit } from '@angular/core';
import { NzMessageService } from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-transfer-search',
  template: `
    <nz-transfer
      [nzDataSource]="list"
      nzShowSearch
      [nzFilterOption]="filterOption"
      (nzSearchChange)="search($event)"
      (nzSelectChange)="select($event)"
      (nzChange)="change($event)">
    </nz-transfer>
  `
})
export class NzDemoTransferSearchComponent implements OnInit {
  // tslint:disable-next-line:no-any
  list: any[] = [];

  ngOnInit(): void {
    for (let i = 0; i < 20; i++) {
      this.list.push({
        key        : i.toString(),
        title      : `content${i + 1}`,
        description: `description of content${i + 1}`,
        direction  : Math.random() * 2 > 1 ? 'right' : ''
      });
    }
  }

  // tslint:disable-next-line:no-any
  filterOption(inputValue: string, item: any): boolean {
    return item.description.indexOf(inputValue) > -1;
  }

  search(ret: {}): void {
    console.log('nzSearchChange', ret);
  }

  select(ret: {}): void {
    console.log('nzSelectChange', ret);
  }

  change(ret: {}): void {
    console.log('nzChange', ret);
  }
}

3.高级用法
穿梭框高级用法，可配置操作文案，可定制宽高，可对底部进行自定义渲染。
import { Component, OnInit } from '@angular/core';
import { NzMessageService } from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-transfer-advanced',
  template: `
    <nz-transfer
      [nzDataSource]="list"
      nzShowSearch
      [nzOperations]="['to right', 'to left']"
      [nzListStyle]="{'width.px': 250, 'height.px': 300}"
      [nzRender]="render"
      [nzFooter]="footer"
      (nzSelectChange)="select($event)"
      (nzChange)="change($event)">
      <ng-template #render let-item>
        {{ item.title }}-{{ item.description }}
      </ng-template>
      <ng-template #footer let-direction>
        <button nz-button (click)="reload(direction)" [nzSize]="'small'" style="float: right; margin: 5px;">reload</button>
      </ng-template>
    </nz-transfer>
  `
})
export class NzDemoTransferAdvancedComponent implements OnInit {
  list = [];

  ngOnInit(): void {
    this.getData();
  }

  getData(): void {
    const ret = [];
    for (let i = 0; i < 20; i++) {
      ret.push({
        key        : i.toString(),
        title      : `content${i + 1}`,
        description: `description of content${i + 1}`,
        direction  : Math.random() * 2 > 1 ? 'right' : ''
      });
    }
    this.list = ret;
  }

  reload(direction: string): void {
    this.getData();
    this.msg.success(`your clicked ${direction}!`);
  }

  select(ret: {}): void {
    console.log('nzSelectChange', ret);
  }

  change(ret: {}): void {
    console.log('nzChange', ret);
  }

  constructor(public msg: NzMessageService) {
  }
}

4.自定义渲染行数据
自定义渲染每一个 Transfer Item，可用于渲染复杂数据。
import { Component, OnInit } from '@angular/core';
import { NzMessageService } from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-transfer-custom-item',
  template: `
    <nz-transfer
      [nzDataSource]="list"
      [nzListStyle]="{'width.px': 300, 'height.px': 300}"
      [nzRender]="render"
      (nzSelectChange)="select($event)"
      (nzChange)="change($event)">
      <ng-template #render let-item>
        <i nz-icon type="{{item.icon}}"></i> {{ item.title }}
      </ng-template>
    </nz-transfer>
  `
})
export class NzDemoTransferCustomItemComponent implements OnInit {
  // tslint:disable-next-line:no-any
  list: any[] = [];

  ngOnInit(): void {
    this.getData();
  }

  getData(): void {
    const ret = [];
    for (let i = 0; i < 20; i++) {
      ret.push({
        key        : i.toString(),
        title      : `content${i + 1}`,
        description: `description of content${i + 1}`,
        direction  : Math.random() * 2 > 1 ? 'right' : '',
        icon       : `frown-o`
      });
    }
    this.list = ret;
  }

  select(ret: {}): void {
    console.log('nzSelectChange', ret);
  }

  change(ret: {}): void {
    console.log('nzChange', ret);
  }

  constructor(public msg: NzMessageService) {
  }
}

5.二次校验
利用 nzCanMove 允许在穿梭过程中二次校验；示例默认向右移时强制选中的第一项不可穿梭。
import { Component, OnInit } from '@angular/core';
import { NzMessageService, TransferCanMove, TransferItem } from 'ng-zorro-antd';
import { of, Observable } from 'rxjs';
import { delay } from 'rxjs/operators';

@Component({
  selector: 'nz-demo-transfer-can-move',
  template: `
    <nz-transfer
      [nzDataSource]="list"
      [nzCanMove]="canMove"
      (nzSelectChange)="select($event)"
      (nzChange)="change($event)">
    </nz-transfer>
  `
})
export class NzDemoTransferCanMoveComponent implements OnInit {
  list = [];

  ngOnInit(): void {
    for (let i = 0; i < 20; i++) {
      this.list.push({
        key     : i.toString(),
        title   : `content${i + 1}`,
        disabled: i % 3 < 1
      });
    }

    [ 2, 3 ].forEach(idx => this.list[ idx ].direction = 'right');
  }

  canMove(arg: TransferCanMove): Observable<TransferItem[]> {
    if (arg.direction === 'right' && arg.list.length > 0) { arg.list.splice(0, 1); }
    // or
    // if (arg.direction === 'right' && arg.list.length > 0) delete arg.list[0];
    return of(arg.list).pipe(delay(1000));
  }

  select(ret: {}): void {
    console.log('nzSelectChange', ret);
  }

  change(ret: {}): void {
    console.log('nzChange', ret);
  }
}

6.API#
nz-transferCOMPONENT#
参数	说明	类型	默认值
[nzDataSource]	数据源，其中若数据属性 direction: 'right' 将会被渲染到右边一栏中	TransferItem[]	[]
[nzTitles]	标题集合，顺序从左至右	string[]	['', '']
[nzOperations]	操作文案集合，顺序从下至上	string[]	['', '']
[nzListStyle]	两个穿梭框的自定义样式，等同 ngStyle	object	
[nzItemUnit]	单数单位	string	项目
[nzItemsUnit]	复数单位	string	项目
[nzRender]	每行数据渲染模板，见示例	TemplateRef<void>	-
[nzFooter]	底部渲染模板，见示例	TemplateRef<void>	-
[nzShowSearch]	是否显示搜索框	boolean	false
[nzFilterOption]	接收 inputValueoption 两个参数，当 option 符合筛选条件时，应返回 true，反之则返回 false。	(inputValue, option): boolean	(inputValue: string, item: TransferItem) => boolean
[nzSearchPlaceholder]	搜索框的默认值	string	'请输入搜索内容'
[nzNotFoundContent]	当列表为空时显示的内容	string	'列表为空'
[nzCanMove]	穿梭时二次校验。注意： 穿梭组件内部始终只保留一份数据，二次校验过程中需取消穿梭项则直接删除该项；具体用法见示例。	(arg: TransferCanMove) => Observable<TransferItem[]>	-
(nzChange)	选项在两栏之间转移时的回调函数	EventEmitter<TransferChange>	-
(nzSearchChange)	搜索框内容时改变时的回调函数	EventEmitter<TransferSearchChange>	-
(nzSelectChange)	选中项发生改变时的回调函数	EventEmitter<TransferSearchChange>	-
TransferItem#
参数	说明	类型	默认值
title	标题，用于显示及搜索关键字判断	string	-
direction	指定数据方向，若指定 right 为右栏，其他情况为左栏	left,right	-
disabled	指定checkbox为不可用状态	boolean	false
checked	指定checkbox为选中状态	boolean	false
TransferCanMove#
参数	说明	类型	默认值
direction	数据方向	left,right	-
list	数据源	TransferItem[]	[]
TransferChange#
参数	说明	类型	默认值
from	数据方向	left,right	-
to	数据方向	left,right	-
list	数据源	TransferItem[]	[]
TransferSearchChange#
参数	说明	类型	默认值
direction	数据方向	left,right	-
value	搜索关键词	string	-


十六.TreeSelect树选择
树型选择控件。
何时使用#
类似 Select 的选择控件，可选择的数据结构是一个树形结构时，可以使用 TreeSelect，例如公司层级、学科系统、分类目录等等。

1.基本
最简单的用法。
import { Component, OnInit } from '@angular/core';
import { NzFormatEmitEvent, NzTreeNode } from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-tree-select-basic',
  template: `
    <nz-tree-select
      style="width: 250px"
      [nzDefaultExpandedKeys]="expandKeys"
      [nzNodes]="nodes"
      nzShowSearch
      nzPlaceHolder="Please select"
      [(ngModel)]="value"
      (ngModelChange)="onChange($event)">
    </nz-tree-select>`
})

export class NzDemoTreeSelectBasicComponent implements OnInit {
  expandKeys = [ '100', '1001' ];
  value: string;
  nodes = [ {
    title   : 'parent 1',
    key     : '100',
    children: [ {
      title   : 'parent 1-0',
      key     : '1001',
      children: [
        { title: 'leaf 1-0-0', key: '10010', isLeaf: true },
        { title: 'leaf 1-0-1', key: '10011', isLeaf: true }
      ]
    }, {
      title   : 'parent 1-1',
      key     : '1002',
      children: [
        { title: 'leaf 1-1-0', key: '10020', isLeaf: true }
      ]
    } ]
  } ];

  onChange($event: string): void {
    console.log($event);
  }

  ngOnInit(): void {
    // mock async
    setTimeout(() => {
      this.value = '1001';
    }, 1000);
  }
}

2.多选
多选的树选择。
import { Component, OnInit } from '@angular/core';
import { NzFormatEmitEvent, NzTreeNode } from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-tree-select-multiple',
  template: `
    <nz-tree-select style="width: 250px"
      [nzNodes]="nodes"
      [nzDefaultExpandAll]="true"
      [nzAllowClear]="false"
      nzPlaceHolder="Please select"
      [(ngModel)]="value"
      [nzMultiple]="true"
      (ngModelChange)="onChange($event)">
    </nz-tree-select>
  `
})

export class NzDemoTreeSelectMultipleComponent implements OnInit {

  value: string[] = [];
  nodes = [ {
    title   : 'parent 1',
    key     : '100',
    children: [ {
      title   : 'parent 1-0',
      key     : '1001',
      children: [
        { title: 'leaf 1-0-0', key: '10010', isLeaf: true },
        { title: 'leaf 1-0-1', key: '10011', isLeaf: true }
      ]
    }, {
      title   : 'parent 1-1',
      key     : '1002',
      children: [
        { title: 'leaf 1-1-0', key: '10020', isLeaf: true }
      ]
    } ]
  } ];

  onChange($event: string[]): void {
    console.log($event);
  }

  ngOnInit(): void {
  }
}

3.异步数据加载
点击展开节点，动态加载数据，直到执行 addChildren() 方法取消加载状态。
import { Component, OnInit } from '@angular/core';
import { NzFormatEmitEvent, NzTreeNode } from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-tree-select-async',
  template: `
    <nz-tree-select style="width: 250px"
      nzPlaceHolder="Please select"
      [nzDefaultExpandedKeys]="expandKeys"
      [nzDropdownMatchSelectWidth]="true"
      [nzDropdownStyle]="{ 'max-height': '300px' }"
      [(ngModel)]="value"
      [nzNodes]="nodes"
      [nzAsyncData]="true"
      (nzExpandChange)="onExpandChange($event)">
    </nz-tree-select>
  `
})

export class NzDemoTreeSelectAsyncComponent implements OnInit {
  expandKeys = [ '0-0' ];
  value: string;
  nodes = [ {
    title   : 'Node1',
    value   : '0-0',
    key     : '0-0',
    children: [ {
      title: 'Child Node1',
      value: '0-0-1',
      key  : '0-0-1'
    }, {
      title: 'Child Node2',
      value: '0-0-2',
      key  : '0-0-2'
    } ]
  }, {
    title: 'Node2',
    value: '0-1',
    key  : '0-1'
  } ];

  onExpandChange(e: NzFormatEmitEvent): void {
    if (e.node.getChildren().length === 0 && e.node.isExpanded) {
      this.loadNode().then(data => {
        e.node.addChildren(data);
      });
    }
  }

  loadNode(): Promise<any[]> {
    return new Promise(resolve => {
      setTimeout(() => resolve([
          { title: 'Child Node', key: `${(new Date()).getTime()}-0` },
          { title: 'Child Node', key: `${(new Date()).getTime()}-1` } ]),
        1000);
    });
  }

  ngOnInit(): void {
  }
}

4.可勾选
使用勾选框实现多选功能。
import { Component, OnInit } from '@angular/core';
import { NzFormatEmitEvent, NzTreeNode } from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-tree-select-checkable',
  template: `
    <nz-tree-select
      style="width: 250px"
      [nzNodes]="nodes"
      nzShowSearch
      nzCheckable
      nzPlaceHolder="Please select"
      [(ngModel)]="value"
      (ngModelChange)="onChange($event)">
    </nz-tree-select>`
})

export class NzDemoTreeSelectCheckableComponent implements OnInit {

  value: string[] = [ '0-0-0' ];
  nodes = [ {
    title   : 'Node1',
    value   : '0-0',
    key     : '0-0',
    children: [ {
      title : 'Child Node1',
      value : '0-0-0',
      key   : '0-0-0',
      isLeaf: true
    } ]
  }, {
    title   : 'Node2',
    value   : '0-1',
    key     : '0-1',
    children: [ {
      title : 'Child Node3',
      value : '0-1-0',
      key   : '0-1-0',
      isLeaf: true
    }, {
      title : 'Child Node4',
      value : '0-1-1',
      key   : '0-1-1',
      isLeaf: true
    }, {
      title : 'Child Node5',
      value : '0-1-2',
      key   : '0-1-2',
      isLeaf: true
    } ]
  } ];

  onChange($event: string[]): void {
    console.log($event);
  }

  ngOnInit(): void {
  }
}

5.API#
nz-tree-selectCOMPONENT#
参数	说明	类型	默认值
[nzAllowClear]	显示清除按钮	boolean	false
[nzPlaceHolder]	选择框默认文字	string	-
[nzDisabled]	禁用选择器	boolean	false
[nzShowSearch]	显示搜索框	boolean	false
[nzDropdownMatchSelectWidth]	下拉菜单和选择器同宽	boolean	true
[nzDropdownStyle]	下拉菜单的样式	{ [key: string]: string; }	-
[nzMultiple]	支持多选（当设置 nzCheckable 时自动变为true）	boolean	false
[nzSize]	选择框大小，可选 largesmall	string	'default'
[nzCheckable]	节点前添加 Checkbox 复选框	boolean	false
[nzShowExpand]	节点前添加展开图标	boolean	true
[nzShowLine]	是否展示连接线	boolean	false
[nzAsyncData]	是否异步加载(显示加载状态)	boolean	false
[nzNodes]	treeNodes 数据	NzTreeNode[]	[]
[nzDefaultExpandAll]	默认展开所有树节点	boolean	false
[nzDefaultExpandedKeys]	默认展开指定的树节点	string[]	[]
[nzDisplayWith]	如何在输入框显示所选的节点值的方法	(node: NzTreeNode) => string	(node: NzTreeNode) => node.title
(nzExpandChange)	点击展开树节点图标调用	EventEmitter<NzFormatEmitEvent>



十七.Upload上传
文件选择上传和拖拽上传控件。
何时使用#
上传是将信息（网页、文字、图片、视频等）通过网页或者上传工具发布到远程服务器上的过程。

当需要上传一个或一些文件时。
当需要展现上传的进度时。
当需要使用拖拽交互时。

1.点击上传
经典款式，用户点击按钮弹出文件选择框。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-upload-basic',
  template: `
  <nz-upload
    nzAction="https://jsonplaceholder.typicode.com/posts/">
    <button nz-button>
      <i nz-icon type="upload"></i><span>Click to Upload</span>
    </button>
  </nz-upload>
  `
})
export class NzDemoUploadBasicComponent {}

2.用户头像
点击上传用户头像，并使用 nzBeforeUpload 限制用户上传的图片格式和大小。
nzBeforeUpload 的返回值可以是一个 Observable 以支持也支持异步检查。

import { Component } from '@angular/core';
import { NzMessageService, UploadFile } from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-upload-avatar',
  template: `
  <nz-upload class="avatar-uploader"
    nzAction="https://jsonplaceholder.typicode.com/posts/"
    nzName="avatar"
    nzListType="picture-card"
    [nzShowUploadList]="false"
    [nzBeforeUpload]="beforeUpload"
    (nzChange)="handleChange($event)">
    <ng-container *ngIf="!avatarUrl">
      <i nz-icon type="plus"></i>
      <div class="ant-upload-text">Upload</div>
    </ng-container>
    <img *ngIf="avatarUrl" [src]="avatarUrl" class="avatar">
  </nz-upload>
  `,
  styles: [
    `
    :host ::ng-deep .avatar-uploader > .ant-upload {
      width: 128px;
      height: 128px;
    }
    :host ::ng-deep .ant-upload-select-picture-card i {
      font-size: 32px;
      color: #999;
    }
    :host ::ng-deep .ant-upload-select-picture-card .ant-upload-text {
      margin-top: 8px;
      color: #666;
    }
  `
  ]
})
export class NzDemoUploadAvatarComponent {
  loading = false;
  avatarUrl: string;

  constructor(private msg: NzMessageService) {}

  beforeUpload = (file: File) => {
    const isJPG = file.type === 'image/jpeg';
    if (!isJPG) {
      this.msg.error('You can only upload JPG file!');
    }
    const isLt2M = file.size / 1024 / 1024 < 2;
    if (!isLt2M) {
      this.msg.error('Image must smaller than 2MB!');
    }
    return isJPG && isLt2M;
  }

  private getBase64(img: File, callback: (img: {}) => void): void {
    const reader = new FileReader();
    reader.addEventListener('load', () => callback(reader.result));
    reader.readAsDataURL(img);
  }

  handleChange(info: { file: UploadFile }): void {
    if (info.file.status === 'uploading') {
      this.loading = true;
      return;
    }
    if (info.file.status === 'done') {
      // Get this url from response in real world.
      this.getBase64(info.file.originFileObj, (img: string) => {
        this.loading = false;
        this.avatarUrl = img;
      });
    }
  }
}

3.已上传的文件列表
使用 nzFileList 设置已上传的内容。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-upload-file-list',
  template: `
  <nz-upload
    nzAction="https://jsonplaceholder.typicode.com/posts/"
    [nzFileList]="fileList">
    <button nz-button>
      <i nz-icon type="upload"></i><span>Upload</span>
    </button>
  </nz-upload>
  `
})
export class NzDemoUploadFileListComponent {
  fileList = [
    {
      uid: 1,
      name: 'xxx.png',
      status: 'done',
      response: 'Server Error 500', // custom error message to show
      url: 'http://www.baidu.com/xxx.png'
    },
    {
      uid: 2,
      name: 'yyy.png',
      status: 'done',
      url: 'http://www.baidu.com/yyy.png'
    },
    {
      uid: 3,
      name: 'zzz.png',
      status: 'error',
      response: 'Server Error 500', // custom error message to show
      url: 'http://www.baidu.com/zzz.png'
    }
  ];
}

4.照片墙
用户可以上传图片并在列表中显示缩略图。当上传照片数到达限制后，上传按钮消失。
import { Component } from '@angular/core';
import { NzMessageService, UploadFile } from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-upload-picture-card',
  template: `
  <div class="clearfix">
    <nz-upload
      nzAction="https://jsonplaceholder.typicode.com/posts/"
      nzListType="picture-card"
      [(nzFileList)]="fileList"
      [nzShowButton]="fileList.length < 3"
      [nzPreview]="handlePreview">
        <i nz-icon type="plus"></i>
        <div class="ant-upload-text">Upload</div>
    </nz-upload>
    <nz-modal [nzVisible]="previewVisible" [nzContent]="modalContent" [nzFooter]="null" (nzOnCancel)="previewVisible=false">
      <ng-template #modalContent>
        <img [src]="previewImage" [ngStyle]="{ 'width': '100%' }" />
      </ng-template>
    </nz-modal>
  </div>
  `,
  styles: [
    `
  :host ::ng-deep i {
    font-size: 32px;
    color: #999;
  }
  :host ::ng-deep .ant-upload-text {
    margin-top: 8px;
    color: #666;
  }
  `
  ]
})
export class NzDemoUploadPictureCardComponent {
  fileList = [
    {
      uid: -1,
      name: 'xxx.png',
      status: 'done',
      url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png'
    }
  ];
  previewImage = '';
  previewVisible = false;

  constructor(private msg: NzMessageService) {}

  handlePreview = (file: UploadFile) => {
    this.previewImage = file.url || file.thumbUrl;
    this.previewVisible = true;
  }
}

5.文件夹上传
支持上传一个文件夹里的所有文件。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-upload-directory',
  template: `
  <nz-upload
    nzAction="https://jsonplaceholder.typicode.com/posts/"
    nzDirectory>
    <button nz-button>
      <i nz-icon type="upload"></i> Upload Directory
    </button>
  </nz-upload>
  `
})
export class NzDemoUploadDirectoryComponent {}

6.拖拽上传
把文件拖入指定区域，完成上传，同样支持点击上传。
设置 nzMultiple 后，在 IE10+ 可以一次上传多个文件。

import { Component } from '@angular/core';
import { NzMessageService, UploadFile } from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-upload-drag',
  template: `
  <nz-upload
    nzType="drag"
    [nzMultiple]="true"
    [nzLimit]="2"
    nzAction="https://jsonplaceholder.typicode.com/posts/"
    (nzChange)="handleChange($event)">
    <p class="ant-upload-drag-icon">
      <i nz-icon type="inbox"></i>
    </p>
    <p class="ant-upload-text">Click or drag file to this area to upload</p>
    <p class="ant-upload-hint">Support for a single or bulk upload. Strictly prohibit from uploading company data or other band files</p>
  </nz-upload>
  `,
  styles: [
    `
  :host ::ng-deep nz-upload { display: block; }
  :host ::ng-deep .ant-upload.ant-upload-drag { height: 180px; }
  `
  ]
})
export class NzDemoUploadDragComponent {
  constructor(private msg: NzMessageService) {}
  // tslint:disable-next-line:typedef
  handleChange({ file, fileList }): void {
    const status = file.status;
    if (status !== 'uploading') {
      console.log(file, fileList);
    }
    if (status === 'done') {
      this.msg.success(`${file.name} file uploaded successfully.`);
    } else if (status === 'error') {
      this.msg.error(`${file.name} file upload failed.`);
    }
  }
}


7.图片列表样式
上传文件为图片，可展示本地缩略图。IE8/9 不支持浏览器本地缩略图展示（Ref），可以写 thumbUrl 属性来代替。
import { Component } from '@angular/core';
import { NzMessageService, UploadFile } from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-upload-picture-style',
  template: `
  <div class="clearfix">
    <nz-upload
      nzAction="https://jsonplaceholder.typicode.com/posts/"
      nzListType="picture"
      [(nzFileList)]="fileList1">
      <button nz-button>
        <i nz-icon type="upload"></i><span>Upload</span>
      </button>
    </nz-upload>
  </div>
    <br><br>
  <div class="clearfix">
    <nz-upload class="upload-list-inline"
      nzAction="https://jsonplaceholder.typicode.com/posts/"
      nzListType="picture"
      [(nzFileList)]="fileList2">
      <button nz-button>
        <span><i nz-icon type="upload"></i> Upload</span>
      </button>
    </nz-upload>
  </div>
  `,
  styles: [
    `
  :host ::ng-deep .upload-list-inline .ant-upload-list-item {
    float: left;
    width: 200px;
    margin-right: 8px;
  }
  `
  ]
})
export class NzDemoUploadPictureStyleComponent {
  defaultFileList = [
    {
      uid: -1,
      name: 'xxx.png',
      status: 'done',
      url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',
      thumbUrl: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png'
    },
    {
      uid: -2,
      name: 'yyy.png',
      status: 'done',
      url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',
      thumbUrl: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png'
    }
  ];

  fileList1 = [...this.defaultFileList];
  fileList2 = [...this.defaultFileList];

  constructor(private msg: NzMessageService) {}
}

8.手动上传
nzBeforeUpload 返回 false 后，手动上传文件。
import { HttpClient, HttpRequest, HttpResponse } from '@angular/common/http';
import { Component } from '@angular/core';
import { NzMessageService, UploadFile } from 'ng-zorro-antd';
import { filter } from 'rxjs/operators';

@Component({
  selector: 'nz-demo-upload-manually',
  template: `
  <nz-upload
    [(nzFileList)]="fileList"
    [nzBeforeUpload]="beforeUpload">
    <button nz-button>
      <i nz-icon type="upload"></i><span>Select File</span>
    </button>
  </nz-upload>
  <button nz-button [nzType]="'primary'" [nzLoading]="uploading" (click)="handleUpload()" [disabled]="fileList.length == 0" style="margin-top: 16px">
    {{ uploading ? 'Uploading' : 'Start Upload' }}
  </button>
  `
})
export class NzDemoUploadManuallyComponent {
  uploading = false;
  fileList: UploadFile[] = [];

  constructor(private http: HttpClient, private msg: NzMessageService) {}

  beforeUpload = (file: UploadFile): boolean => {
    this.fileList.push(file);
    return false;
  }

  handleUpload(): void {
    const formData = new FormData();
    // tslint:disable-next-line:no-any
    this.fileList.forEach((file: any) => {
      formData.append('files[]', file);
    });
    this.uploading = true;
    // You can use any AJAX library you like
    const req = new HttpRequest('POST', 'https://jsonplaceholder.typicode.com/posts/', formData, {
      // reportProgress: true
    });
    this.http
      .request(req)
      .pipe(filter(e => e instanceof HttpResponse))
      .subscribe(
        (event: {}) => {
          this.uploading = false;
          this.msg.success('upload successfully.');
        },
        err => {
          this.uploading = false;
          this.msg.error('upload failed.');
        }
      );
  }
}

9.自定义上传
使用 nzCustomRequest 改变上传行为。
import { Component } from '@angular/core';
import { HttpRequest, HttpClient, HttpEventType, HttpEvent, HttpResponse } from '@angular/common/http';
import { NzMessageService, UploadXHRArgs } from 'ng-zorro-antd';
import { forkJoin } from 'rxjs';

@Component({
  selector: 'nz-demo-upload-custom-request',
  template: `
  <nz-upload
    nzAction="https://jsonplaceholder.typicode.com/posts/"
    [nzCustomRequest]="customReq">
    <button nz-button>
      <i nz-icon type="upload"></i><span>Click to Upload</span>
    </button>
  </nz-upload>
  `
})
export class NzDemoUploadCustomRequestComponent {

  constructor(private http: HttpClient, private msg: NzMessageService) {}

  customReq = (item: UploadXHRArgs) => {
    // 构建一个 FormData 对象，用于存储文件或其他参数
    const formData = new FormData();
    // tslint:disable-next-line:no-any
    formData.append('file', item.file as any);
    formData.append('id', '1000');
    const req = new HttpRequest('POST', item.action, formData, {
      reportProgress : true,
      withCredentials: true
    });
    // 始终返回一个 `Subscription` 对象，nz-upload 会在适当时机自动取消订阅
    return this.http.request(req).subscribe((event: HttpEvent<{}>) => {
      if (event.type === HttpEventType.UploadProgress) {
        if (event.total > 0) {
          // tslint:disable-next-line:no-any
          (event as any).percent = event.loaded / event.total * 100;
        }
        // 处理上传进度条，必须指定 `percent` 属性来表示进度
        item.onProgress(event, item.file);
      } else if (event instanceof HttpResponse) {
        // 处理成功
        item.onSuccess(event.body, item.file, event);
      }
    }, (err) => {
      // 处理失败
      item.onError(err, item.file);
    });
  }

  // 一个简单的分片上传
  customBigReq = (item: UploadXHRArgs) => {
    const size = item.file.size;
    const chunkSize = parseInt((size / 3) + '', 10);
    const maxChunk = Math.ceil(size / chunkSize);
    const reqs = Array(maxChunk).fill(0).map((v: {}, index: number) => {
      const start = index * chunkSize;
      let end = start + chunkSize;
      if (size - end < 0) {
        end = size;
      }
      const formData = new FormData();
      formData.append('file', item.file.slice(start, end));
      formData.append('start', start.toString());
      formData.append('end', end.toString());
      formData.append('index', index.toString());
      const req = new HttpRequest('POST', item.action, formData, {
        withCredentials: true
      });
      return this.http.request(req);
    });
    return forkJoin(...reqs).subscribe(resules => {
      // 处理成功
      item.onSuccess({}, item.file, event);
    }, (err) => {
      // 处理失败
      item.onError(err, item.file);
    });
  }
}

10.API#
服务端上传接口实现可以参考 jQuery-File-Upload。

nz-uploadCOMPONENT#
参数	说明	类型	默认值
[nzAccept]	接受上传的文件类型, 详见 input accept Attribute	string	-
[nzAction]	必选参数, 上传的地址	string	-
[nzDirectory]	支持上传文件夹（caniuse）	boolean	false
[nzBeforeUpload]	上传文件之前的钩子，参数为上传的文件，若返回 false 则停止上传。注意：IE9 不支持该方法；注意：务必使用 => 定义处理方法。	(file, fileList) => `boolean	Observable`	-
[nzCustomRequest]	通过覆盖默认的上传行为，可以自定义自己的上传实现；注意：务必使用 => 定义处理方法。	(item) => Subscription	-
[nzData]	上传所需参数或返回上传参数的方法；注意：务必使用 => 定义处理方法。	`Object	((file: UploadFile) => Object)`	-
[nzDisabled]	是否禁用	boolean	false
[nzFileList]	文件列表，双向绑定	UploadFile[]	-
[nzLimit]	限制单次最多上传数量，nzMultiple 打开时有效；0 表示不限	number	0
[nzSize]	限制文件大小，单位：KB；0 表示不限	number	0
[nzFileType]	限制文件类型，例如：image/png,image/jpeg,image/gif,image/bmp	string	-
[nzFilter]	自定义过滤器	UploadFilter[]	-
[nzHeaders]	设置上传的请求头部，IE10 以上有效；注意：务必使用 => 定义处理方法。	Object｜((file: UploadFile) => Object)	-
[nzListType]	上传列表的内建样式，支持三种基本样式 text, picture 和 picture-card	string	'text'
[nzMultiple]	是否支持多选文件，ie10+ 支持。开启后按住 ctrl 可选择多个文件。	boolean	false
[nzName]	发到后台的文件参数名	string	'file'
[nzShowUploadList]	是否展示 uploadList, 可设为一个对象，用于单独设定 showPreviewIcon 和 showRemoveIcon	Boolean or { showPreviewIcon?: boolean, showRemoveIcon?: boolean }	true
[nzShowButton]	是否展示上传按钮	boolean	true
[nzWithCredentials]	上传请求时是否携带 cookie	boolean	false
[nzPreview]	点击文件链接或预览图标时的回调；注意：务必使用 => 定义处理方法。	(file: UploadFile) => void	-
[nzRemove]	点击移除文件时的回调，返回值为 false 时不移除。支持返回 Observable 对象；注意：务必使用 => 定义处理方法。	(file: UploadFile) => boolean｜Observable	无
(nzChange)	上传文件改变时的状态	EventEmitter	-
nzChange#
开始、上传进度、完成、失败都会调用这个函数。

文件状态改变的回调，返回为：

{
  file: { /* ... */ },
  fileList: [ /* ... */ ],
  event: { /* ... */ },
}
file 当前操作的文件对象。

{
   uid: 'uid',      // 文件唯一标识
   name: 'xx.png'   // 文件名
   status: 'done', // 状态有：uploading done error removed
   response: '{"status": "success"}' // 服务端响应内容
}
fileList 当前的文件列表。

event 上传中的服务端响应内容，包含了上传进度等信息，高级浏览器支持。
nzCustomRequest#
默认使用HTML5方式上传（即：使用 HttpClient），允许覆盖默认行为实现定制需求，例如直接与阿里云交互等。

nzCustomRequest 回调传递以下参数：

onProgress: (event: { percent: number }): void
onError: (event: Error): void
onSuccess: (body: Object, xhr?: Object): void
data: Object
filename: String
file: File
withCredentials: Boolean
action: String
headers: Object

======================================== Data Display 数据显示 ========================================

一.Avatar头像
用来代表用户或事物，支持图片、图标或字符展示。

1.基本 头像有三种尺寸，两种形状可选。

<div>
  <nz-avatar nzSize="large" nzIcon="anticon anticon-user"></nz-avatar>
  <nz-avatar nzIcon="anticon anticon-user"></nz-avatar>
  <nz-avatar nzSize="small" nzIcon="anticon anticon-user"></nz-avatar>
</div>
<div>
  <nz-avatar [nzShape]="'square'" [nzSize]="'large'" [nzIcon]="'anticon anticon-user'"></nz-avatar>
  <nz-avatar [nzShape]="'square'" [nzIcon]="'anticon anticon-user'"></nz-avatar>
  <nz-avatar [nzShape]="'square'" [nzSize]="'small'" [nzIcon]="'anticon anticon-user'"></nz-avatar>
</div>

:host ::ng-deep .ant-avatar {
  margin-top: 16px;
  margin-right: 16px;
}

2.类型
支持三种类型：图片、Icon 以及字符，其中 Icon 和字符型可以自定义图标颜色及背景色。
<nz-avatar nzIcon="anticon anticon-user"></nz-avatar>
<nz-avatar nzText="U"></nz-avatar>
<nz-avatar nzText="USER"></nz-avatar>
<nz-avatar nzIcon="anticon anticon-user" nzSrc="//zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png"></nz-avatar>
<nz-avatar nzText="U" style="color:#f56a00; background-color:#fde3cf;"></nz-avatar>
<nz-avatar nzIcon="anticon anticon-user" style="background-color:#87d068;"></nz-avatar>

:host ::ng-deep .ant-avatar {
  margin-top: 16px;
  margin-right: 16px;
}

3.自动调整字符大小
对于字符型的头像，当字符串较长时，字体大小可以根据头像宽度自动调整。
<nz-avatar [nzText]="text" nzSize="large" [ngStyle]="{'background-color':color}" style="vertical-align: middle;"></nz-avatar>
<button nz-button [nzType]="'dashed'" (click)="change()" style="margin-left: 16px; vertical-align: middle;">
  <span>Change</span>
</button>

const userList = [ 'U', 'Lucy', 'Tom', 'Edward' ];
const colorList = [ '#f56a00', '#7265e6', '#ffbf00', '#00a2ae' ];

text: string = userList[ 3 ];
color: string = colorList[ 3 ];

change(): void {
  let idx = userList.indexOf(this.text);
  ++idx;
  console.log('idx',idx);
  if (idx === userList.length) idx = 0;
  this.text = userList[ idx ];
  this.color = colorList[ idx ];
}

4.带徽标的头像
通常用于消息提示。
<nz-badge [nzCount]="5" style="margin-right: 24px;">
  <nz-avatar nzIcon="anticon anticon-user" [nzShape]="'square'"></nz-avatar>
</nz-badge>
<nz-badge nzDot>
  <nz-avatar nzIcon="anticon anticon-user" [nzShape]="'square'"></nz-avatar>
</nz-badge>

二.Badge徽标数
一般出现在通知图标或头像的右上角，用于显示需要处理的消息条数，通过醒目视觉形式吸引用户处理。
1.基本
简单的徽章展示，当 nzCount 为 0 时，默认不显示，但是可以使用 nzShowZero 修改为显示。

2.封顶数字
超过 nzOverflowCount 的会显示为 nzOverflowCount+，默认的 nzOverflowCount 为 99。
<nz-badge [nzCount]="99"><a class="head-example"></a></nz-badge>
<nz-badge [nzCount]="200"><a class="head-example"></a></nz-badge>
<nz-badge [nzCount]="200" [nzOverflowCount]="10"><a class="head-example"></a></nz-badge>
<nz-badge [nzCount]="10000" [nzOverflowCount]="999"><a class="head-example"></a></nz-badge>

3.独立使用
不包裹任何元素即是独立使用，可自定样式展现。
在右上角的 badge 则限定为红色。
<nz-badge [nzCount]="25"></nz-badge>
<nz-badge [nzCount]="4" [nzStyle]="{ backgroundColor: '#fff', color: '#999', boxShadow: '0 0 0 1px #d9d9d9 inset' }"></nz-badge>
<nz-badge [nzCount]="109" [nzStyle]="{ backgroundColor: '#52c41a' }"></nz-badge>

4.讨嫌的小红点
没有具体的数字。
<nz-badge nzDot><i nz-icon type="notification"></i></nz-badge>
<nz-badge nzDot><a>Link something</a></nz-badge>
[nz-icon] {
  width: 16px;
  height: 16px;
  line-height: 16px;
  font-size: 16px;
}

5.可点击
用 a 标签进行包裹即可。
<a>
  <nz-badge [nzCount]="5">
    <a class="head-example"></a>
  </nz-badge>
</a>

6.动态
展示动态变化的效果。
<div>
  <nz-badge [nzCount]="count">
    <a class="head-example"></a>
  </nz-badge>
  <nz-button-group>
    <button nz-button (click)="minCount()"><i nz-icon type="minus"></i></button>
    <button nz-button (click)="addCount()"><i nz-icon type="plus"></i></button>
  </nz-button-group>
</div>

<div style="margin-top: 10px;">
  <nz-badge [nzDot]="dot">
    <a class="head-example"></a>
  </nz-badge>
  <nz-switch [(ngModel)]="dot"></nz-switch>
</div>

.ant-badge:not(.ant-badge-status) {
  margin-right: 20px;
}

.head-example {
  width: 42px;
  height: 42px;
  border-radius: 4px;
  background: #eee;
  display: inline-block;
}

count = 5;
dot = true;

addCount(): void {
  this.count++;
}

minCount(): void {
  this.count--;
  if (this.count < 0) {
    this.count = 0;
  }
}

7.Color
状态点
用于表示状态的小圆点。
<nz-badge nzStatus="success"></nz-badge>
<nz-badge nzStatus="error"></nz-badge>
<nz-badge nzStatus="default"></nz-badge>
<nz-badge nzStatus="processing"></nz-badge>
<nz-badge nzStatus="warning"></nz-badge>
<nz-badge nzStatus="default" [nzStyle]="{'background-color':'#2f54eb'}"></nz-badge>
<br>
<nz-badge nzStatus="success" nzText="Success"></nz-badge>
<br>
<nz-badge nzStatus="error" nzText="Error"></nz-badge>
<br>
<nz-badge nzStatus="default" nzText="Default"></nz-badge>
<br>
<nz-badge nzStatus="processing" nzText="Processing"></nz-badge>
<br>
<nz-badge nzStatus="warning" nzText="Warning"></nz-badge>
<br>
<nz-badge nzStatus="default" nzText="Color" [nzStyle]="{'background-color':'#2f54eb'}"></nz-badge>

8.API
<nz-badge [nzCount]="5">
  <a class="head-example"></a>
</nz-badge>
<nz-badge [nzCount]="5"></nz-badge>

nz-badge
[nzCount]	展示的数字，大于 nzOverflowCount 时显示为 ${nzOverflowCount}+，为 0 时隐藏	number	
[nzDot]	不展示数字，只有一个小红点	boolean	false
[nzOverflowCount]	展示封顶的数字值	number	99
[nzShowZero]	当数值为 0 时，是否展示 Badge	boolean	false
[nzStatus]	设置 nz-badge 为状态点	Enum{ 'success', 'processing', 'default', 'error', 'warning' }	''
[nzText]	在设置了 nzStatus 的前提下有效，设置状态点的文本	string	''


三.Calendar日历
按照日历形式展示数据的容器。
当数据是日期或按照日期划分时，例如日程、课表、价格日历等，农历等。目前支持年/月切换。

1.基本
一个通用的日历面板，支持年/月切换。
<nz-calendar [(ngModel)]="date" [(nzMode)]="mode"></nz-calendar>
date = new Date(2012, 11, 21);
mode = 'month';

2.通知事项日历
一个复杂的应用示例，用 dateCell 和 monthCell 模版来自定义需要渲染的数据。
<nz-calendar>
  <ul *nzDateCell="let date" class="events">
    <ng-container [ngSwitch]="date.getDate()">
      <ng-container *ngSwitchCase="8">
        <li *ngFor="let item of listDataMap.eight">
          <nz-badge [nzStatus]="item.type" [nzText]="item.content"></nz-badge>
        </li>
      </ng-container>
      <ng-container *ngSwitchCase="10">
        <li *ngFor="let item of listDataMap.ten">
          <nz-badge [nzStatus]="item.type" [nzText]="item.content"></nz-badge>
        </li>
      </ng-container>
      <ng-container *ngSwitchCase="11">
        <li *ngFor="let item of listDataMap.eleven">
          <nz-badge [nzStatus]="item.type" [nzText]="item.content"></nz-badge>
        </li>
      </ng-container>
    </ng-container>
  </ul>
  <ng-container *nzMonthCell="let month">
    <div *ngIf="getMonthData(month) as monthData" class="notes-month">
      <section>{{ monthData }}</section>
      <span>Backlog number</span>
    </div>
  </ng-container>
</nz-calendar>

.events {
  list-style: none;
  margin: 0;
  padding: 0;
}

.events .ant-badge-status {
  overflow: hidden;
  white-space: nowrap;
  width: 100%;
  text-overflow: ellipsis;
  font-size: 12px;
}

.notes-month {
  text-align: center;
  font-size: 28px;
}

.notes-month section {
  font-size: 28px;
}

listDataMap = {
  eight : [
    { type: 'warning', content: 'This is warning event.' },
    { type: 'success', content: 'This is usual event.' }
  ],
  ten   : [
    { type: 'warning', content: 'This is warning event.' },
    { type: 'success', content: 'This is usual event.' },
    { type: 'error', content: 'This is error event.' }
  ],
  eleven: [
    { type: 'warning', content: 'This is warning event' },
    { type: 'success', content: 'This is very long usual event........' },
    { type: 'error', content: 'This is error event 1.' },
    { type: 'error', content: 'This is error event 2.' },
    { type: 'error', content: 'This is error event 3.' },
    { type: 'error', content: 'This is error event 4.' }
  ]
};

getMonthData(date: Date): number | null {
  if (date.getMonth() === 8) {
    return 1394;
  }
  return null;
}

3.卡片模式
用于嵌套在空间有限的容器中。
<div [ngStyle]="{ width: '300px', border: '1px solid #d9d9d9', borderRadius: '4px' }">
  <nz-calendar nzCard (nzValueChange)="onValueChange($event)" (nzModeChange)="onModeChange($event)"></nz-calendar>
</div>

onValueChange(value: Date): void {
  console.log(`Current value: ${value}`);
}

onModeChange(mode: 'month'|'year'): void {
  console.log(`Current mode: ${mode}`);
}

4.选择功能
一个通用的日历面板，支持年/月切换。
<nz-alert nzMessage="Your selected date: {{ selectedValue | date:'yyyy-MM-dd' }}"></nz-alert>
<nz-calendar [(ngModel)]="selectedValue"></nz-calendar>
selectedValue = new Date('2017-01-25');

5.API
注意：Calendar 的部分 locale 来自于 Angular 自身的国际化支持，需要在 app.module.ts 文件中 引入相应的 Angular 语言包。

例如：

import { registerLocaleData } from '@angular/common';
import zh from '@angular/common/locales/zh';
registerLocaleData(zh);
<nz-calendar
  [nzDateCell]="dateCellTpl"
  [(ngModel)]="selectedDate"
  [(nzMode)]="mode">
  <!-- 定义 Cell 的另一种方式 -->
  <div *dateCell>Foo</div>
</nz-calendar>
<!-- 传入 TemplateRef 的方式 -->
<ng-template #dateCellTpl>Bar</ng-template>

nz-calendar
[(ngModel)]	（可双向绑定）展示日期	Date	当前日期
[(nzMode)]	（可双向绑定）显示模式	'month'/'year'	'month'
[nzFullscreen]	是否全屏显示	boolean	true
[nzCard]	是否不全屏显示	boolean	false
[nzDateCell]	（可作为内容）自定义渲染日期单元格，模版内容会被追加到单元格	TemplateRef<Date>	无
[nzDateFullCell]	（可作为内容）自定义渲染日期单元格，模版内容覆盖单元格	TemplateRef<Date>	无
[nzMonthCell]	（可作为内容）自定义渲染月单元格，模版内容会被追加到单元格	TemplateRef<Date>	无
[nzMonthFullCell]	（可作为内容）自定义渲染月单元格，模版内容覆盖单元格	TemplateRef<Date>	无

四.Card卡片
通用卡片容器。
1.典型卡片
包含标题、内容、操作区域。
<nz-card style="width:300px;" nzTitle="Card title" [nzExtra]="extraTemplate">
  <p>Card content</p>
  <p>Card content</p>
  <p>Card content</p>
</nz-card>
<ng-template #extraTemplate>
  <a>More</a>
</ng-template>

2.无边框
在灰色背景上使用无边框的卡片。
<div style="background: #ECECEC;padding:30px;">
  <nz-card style="width:300px;" [nzBordered]="false" nzTitle="Card title" [nzExtra]="extraTemplate">
    <p>Card content</p>
    <p>Card content</p>
    <p>Card content</p>
  </nz-card>
</div>
<ng-template #extraTemplate>
  <a>More</a>
</ng-template>

3.简洁卡片
只包含内容区域。
<nz-card style="width:300px;">
  <p>Card content</p>
  <p>Card content</p>
  <p>Card content</p>
</nz-card>

4.更灵活的内容展示
可以利用 nz-card-meta 支持更灵活的内容。
<nz-card nzHoverable style="width:240px" [nzCover]="coverTemplate">
  <nz-card-meta nzTitle="Europe Street beat" nzDescription="www.instagram.com"></nz-card-meta>
</nz-card>
<ng-template #coverTemplate>
  <img alt="example" src="https://os.alipayobjects.com/rmsportal/QBnOOoLaAfKPirc.png"/>
</ng-template>

5.栅格卡片
在系统概览页面常常和栅格进行配合。
<div style="background: #ECECEC;padding:30px;">
  <div nz-row [nzGutter]="8">
    <div nz-col [nzSpan]="8">
      <nz-card nzTitle="Card title">
        <p>Card content</p>
      </nz-card>
    </div>
    <div nz-col [nzSpan]="8">
      <nz-card nzTitle="Card title">
        <p>Card content</p>
      </nz-card>
    </div>
    <div nz-col [nzSpan]="8">
      <nz-card nzTitle="Card title">
        <p>Card content</p>
      </nz-card>
    </div>
  </div>
</div>

6.预加载的卡片
数据读入前会有文本块样式。
<nz-switch [(ngModel)]="loading"></nz-switch>
<nz-card style="width: 300px;margin-top: 16px" [nzLoading]="loading">
  <nz-card-meta [nzAvatar]="avatarTemplate" nzTitle="Card title" nzDescription="This is the description"></nz-card-meta>
</nz-card>
<nz-card style="width: 300px;margin-top: 16px" [nzActions]="[actionSetting,actionEdit,actionEllipsis]">
  <nz-skeleton [nzActive]="true" [nzLoading]="loading" [nzAvatar]="{size: 'large'}">
    <nz-card-meta [nzAvatar]="avatarTemplate" nzTitle="Card title" nzDescription="This is the description"></nz-card-meta>
  </nz-skeleton>
</nz-card>
<ng-template #avatarTemplate>
  <nz-avatar nzSrc="https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png"></nz-avatar>
</ng-template>
<ng-template #actionSetting>
  <i nz-icon type="setting"></i>
</ng-template>
<ng-template #actionEdit>
  <i nz-icon type="edit"></i>
</ng-template>
<ng-template #actionEllipsis>
  <i nz-icon type="ellipsis"></i>
</ng-template>

loading = true;

7.网格型内嵌卡片
一种常见的卡片内容区隔模式。
<nz-card nzTitle="Cart Title">
  <div nz-card-grid [ngStyle]="gridStyle">Content</div>
  <div nz-card-grid [ngStyle]="gridStyle">Content</div>
  <div nz-card-grid [ngStyle]="gridStyle">Content</div>
  <div nz-card-grid [ngStyle]="gridStyle">Content</div>
  <div nz-card-grid [ngStyle]="gridStyle">Content</div>
  <div nz-card-grid [ngStyle]="gridStyle">Content</div>
  <div nz-card-grid [ngStyle]="gridStyle">Content</div>
</nz-card>

gridStyle = {
  width    : '25%',
  textAlign: 'center'
};

8.内部卡片
可以放在普通卡片内部，展示多层级结构的信息。
<nz-card nzTitle="Card Title">
  <p style="font-size:14px;color:rgba(0, 0, 0, 0.85);margin-bottom:16px;font-weight: 500;">Group title</p>
  <nz-card nzType="inner" nzTitle="Inner Card Title" [nzExtra]="extraTemplate">
    <a>Inner Card Content</a>
  </nz-card>
  <nz-card nzType="inner" style="margin-top:16px;" nzTitle="Inner Card Title" [nzExtra]="extraTemplate">
    <a>Inner Card Content</a>
  </nz-card>
</nz-card>
<ng-template #extraTemplate>
  <a>More</a>
</ng-template>

9.带页签的卡片(选项卡)
可承载更多内容。
<nz-card style="width: 100%;" nzTitle="Card title" [nzExtra]="extraTemplate">
  <nz-card-tab>
    <nz-tabset nzSize="large" [(nzSelectedIndex)]="index1">
      <nz-tab nzTitle="tab1"></nz-tab>
      <nz-tab nzTitle="tab2"></nz-tab>
    </nz-tabset>
  </nz-card-tab> 
  <p>content{{ index1 }}</p>
</nz-card>
<ng-template #extraTemplate>
  <a>More</a>
</ng-template>
<br>
<br>
<nz-card style="width: 100%;">
  <nz-card-tab>
    <nz-tabset nzSize="large" [(nzSelectedIndex)]="index2" >
      <nz-tab nzTitle="article"></nz-tab>
      <nz-tab nzTitle="app"></nz-tab>
      <nz-tab nzTitle="project"></nz-tab>
    </nz-tabset>
  </nz-card-tab>
  <p>content{{ index2 }}</p>
</nz-card>

index1 = 0;
index2 = 0;


10.支持更多内容配置
一种支持封面、头像、标题和描述信息的卡片。
<nz-card style="width:300px;" [nzCover]="coverTemplate" [nzActions]="[actionSetting,actionEdit,actionEllipsis]">
  <nz-card-meta nzTitle="Card title" nzDescription="This is the description" [nzAvatar]="avatarTemplate"></nz-card-meta>
</nz-card>
<ng-template #avatarTemplate>
  <nz-avatar nzSrc="https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png"></nz-avatar>
</ng-template>
<ng-template #coverTemplate>
  <img alt="example" src="https://gw.alipayobjects.com/zos/rmsportal/JiqGstEfoWAOHiTxclqi.png"/>
</ng-template>
<ng-template #actionSetting>
  <i nz-icon type="setting"></i>
</ng-template>
<ng-template #actionEdit>
  <i nz-icon type="edit"></i>
</ng-template>
<ng-template #actionEllipsis>
  <i nz-icon type="ellipsis"></i>
</ng-template>

11.API
<nz-card nzTitle="卡片标题">卡片内容</nz-card>

nz-card
[nzActions]	卡片操作组，位置在卡片底部	Array<TemplateRef<void>>	-
[nzBodyStyle]	内容区域自定义样式	{ [key: string]: string }	-
[nzBordered]	是否有边框	boolean	true
[nzCover]	卡片封面	TemplateRef<void>	-
[nzExtra]	卡片右上角的操作区域	string｜TemplateRef<void>	-
[nzHoverable]	鼠标移过时可浮起	boolean	false
[nzLoading]	当卡片内容还在加载中时，可以用 loading 展示一个占位	boolean	false
[nzTitle]	卡片标题	string｜TemplateRef<void>	-
[nzType]	卡片类型，可设置为 inner 或 不设置	string

nz-card-meta
[nzAvatar]	头像/图标	TemplateRef<void>	-
[nzDescription]	描述内容	string｜TemplateRef<void>	-
[nzTitle]	标题内容	string｜TemplateRef<void>

[nz-card-grid] 分隔卡片内容区域
nz-card-tab 分隔页签标题区域

四.Carousel走马灯(轮播图)
旋转木马，一组轮播的区域。

1.基本效果
<nz-carousel [nzEffect]="effect">
  <div nz-carousel-content *ngFor="let index of array"><h3>{{index}}</h3></div>
</nz-carousel>

[nz-carousel-content] {
  text-align: center;
  height: 160px;
  line-height: 160px;
  background: #364d79;
  color: #fff;
  overflow: hidden;
}

h3 {
  color: #fff;
}

array = [ 1, 2, 3, 4 ];
effect = 'scrollx';

ngOnInit() {
  setTimeout(() => {
    this.effect = 'fade';
  }, 3000);
}

2.垂直显示
<nz-carousel nzVertical>
  <div nz-carousel-content *ngFor="let index of array"><h3>{{index}}</h3></div>
</nz-carousel>

array = [ 1, 2, 3, 4 ];

3.切换效果为渐显。
<nz-carousel [nzEffect]="'fade'">
  <div nz-carousel-content *ngFor="let index of array"><h3>{{index}}</h3></div>
</nz-carousel>

[nz-carousel-content] {
  text-align: center;
  height: 160px;
  line-height: 160px;
  background: #364d79;
  color: #fff;
  overflow: hidden;
}

h3 {
  color: #fff;
}

array = [ 1, 2, 3, 4 ];

4.定时切换下一张。自动切换
<nz-carousel nzAutoPlay>
  <div nz-carousel-content *ngFor="let index of array"><h3>{{index}}</h3></div>
</nz-carousel>

[nz-carousel-content] {
  text-align: center;
  height: 160px;
  line-height: 160px;
  background: #364d79;
  color: #fff;
  overflow: hidden;
}

h3 {
  color: #fff;
}

array = [ 1, 2, 3, 4 ];

nz-carousel#
[nzAutoPlay]	是否自动切换	boolean	false
[nzAutoPlaySpeed]	切换时间(毫秒)，当设置为0时不切换	number	3000
[nzDots]	是否显示面板指示点	boolean	true
[nzDotRender]	Dot渲染模板	TemplateRef<{ $implicit: number }>	-
[nzEffect]	动画效果函数，可取 scrollx, fade	string	scrollx
[nzVertical]	垂直显示	boolean	false
(nzAfterChange)	切换面板的回调	EventEmitter<number>	无
(nzBeforeChange)	切换面板的回调	EventEmitter<{ from: number; to: number }>	无
[nzEnableSwipe]	是否支持手势划动切换，仅在自行引入 hammer.js 的情形下生效	boolean	true
方法#
名称	描述
goTo(slideNumber)	切换到指定面板
next()	切换到下一面板
pre()	切换到上一面板

五.Collapse折叠面板
手风琴 是一种特殊的折叠面板，只允许单个内容区域展开。

1.折叠面板
可以同时展开多个面板，这个例子默认展开了第一个。
<nz-collapse>
  <nz-collapse-panel *ngFor="let panel of panels" [nzHeader]="panel.name" [nzActive]="panel.active" [nzDisabled]="panel.disabled">
    <p style="margin:0;">A dog is a type of domesticated animal. Known for its loyalty and faithfulness, it can be found as a welcome guest in many households across the world.</p>
  </nz-collapse-panel>
</nz-collapse>
panels = [
    {
      active    : true,
      name      : 'This is panel header 1',
      disabled  : false
    },
    {
      active  : false,
      disabled: false,
      name    : 'This is panel header 2'
    },
    {
      active  : false,
      disabled: true,
      name    : 'This is panel header 3'
    }
  ];

2.手风琴
手风琴，每次只打开一个tab。默认打开第一个。
<nz-collapse nzAccordion>
  <nz-collapse-panel *ngFor="let panel of panels" [nzHeader]="panel.name" [nzActive]="panel.active">
    <p>{{panel.name}} content</p>
  </nz-collapse-panel>
</nz-collapse>

panels = [
  {
    active    : true,
    name      : 'This is panel header 1',
    childPanel: [
      {
        active: false,
        name  : 'This is panel header 1-1'
      }
    ]
  },
  {
    active: false,
    name  : 'This is panel header 2'
  },
  {
    active: false,
    name  : 'This is panel header 3'
  }
];

3.嵌套折叠面板。
<nz-collapse>
  <nz-collapse-panel *ngFor="let panel of panels" [nzHeader]="panel.name" [nzActive]="panel.active">
    <p>{{panel.name}}</p>
    <div *ngIf="panel.childPanel && panel.childPanel.length>0">
      <nz-collapse>
        <nz-collapse-panel *ngFor="let childPanel of panel.childPanel" [nzHeader]="childPanel.name" [nzActive]="childPanel.active">
          <p>A dog is a type of domesticated animal. Known for its loyalty and faithfulness, it can be found as a welcome guest in many households across the world.</p>
        </nz-collapse-panel>
      </nz-collapse>
    </div>
  </nz-collapse-panel>
</nz-collapse>

panels = [
  {
    active    : true,
    disabled  : false,
    name      : 'This is panel header 1',
    childPanel: [
      {
        active: true,
        name  : 'This is panel header 1-1'
      },
      {
        active: false,
        name  : 'This is panel header 1-2'
      }
    ]
  },
  {
    active  : false,
    disabled: true,
    name    : 'This is panel header 2'
  },
  {
    active  : false,
    disabled: false,
    name    : 'This is panel header 3'
  }
];

4.一套没有边框的简洁样式。
<nz-collapse [nzBordered]="false">
  <nz-collapse-panel *ngFor="let panel of panels" [nzHeader]="panel.name" [nzActive]="panel.active">
    <p>{{panel.name}} content</p>
  </nz-collapse-panel>
</nz-collapse>

panels = [
  {
    active     : true,
    disabled   : false,
    name       : 'This is panel header 1',
    childPannel: [
      {
        active  : false,
        disabled: true,
        name    : 'This is panel header 1-1'
      }
    ]
  },
  {
    active  : false,
    disabled: true,
    name    : 'This is panel header 2'
  },
  {
    active  : false,
    disabled: false,
    name    : 'This is panel header 3'
  }
];


5.自定义各个面板的背景色、圆角和边距。
<nz-collapse [nzBordered]="false">
  <nz-collapse-panel *ngFor="let panel of panels" [nzHeader]="panel.name" [nzActive]="panel.active" [ngStyle]="panel.customStyle">
    <p>{{panel.name}} content</p>
  </nz-collapse-panel>
</nz-collapse>

panels = [
  {
    active     : true,
    disabled   : false,
    name       : 'This is panel header 1',
    customStyle: {
      'background'   : '#f7f7f7',
      'border-radius': '4px',
      'margin-bottom': '24px',
      'border'       : '0px'
    }
  },
  {
    active     : false,
    disabled   : true,
    name       : 'This is panel header 2',
    customStyle: {
      'background'   : '#f7f7f7',
      'border-radius': '4px',
      'margin-bottom': '24px',
      'border'       : '0px'
    }
  },
  {
    active     : false,
    disabled   : false,
    name       : 'This is panel header 3',
    customStyle: {
      'background'   : '#f7f7f7',
      'border-radius': '4px',
      'margin-bottom': '24px',
      'border'       : '0px'
    }
  }
];

6.隐藏箭头
你可以通过 [nzShowArrow]="false" 隐藏 nz-collapse-panel 组件的箭头图标。
<nz-collapse>
  <nz-collapse-panel *ngFor="let panel of panels" [nzHeader]="panel.name" [nzActive]="panel.active" [nzDisabled]="panel.disabled" [nzShowArrow]="panel.arrow">
    <p style="margin:0;">A dog is a type of domesticated animal. Known for its loyalty and faithfulness, it can be found as a welcome guest in many households across the world.</p>
  </nz-collapse-panel>
</nz-collapse>

panels = [
  {
    active: true,
    name  : 'This is panel header 1',
    arrow : true
  },
  {
    active: false,
    arrow : false,
    name  : 'This is panel header 2'
  }
];

6.API
nz-collapse#

[nzAccordion]	是否每次只打开一个tab	boolean	false
[nzBordered]	是否有边框	boolean	true

nz-collapse-panel#
[nzDisabled]	禁用后的面板展开与否将无法通过用户交互改变	boolean	false
[nzHeader]	面板头内容	string｜ TemplateRef<void>	无
[nzShowArrow]	是否展示箭头	boolean	true
[nzActive]	面板是否展开，可双向绑定	boolean	无
(nzActiveChange)	面板展开回调	EventEmitter<boolean>	无

六.List列表
最基础的列表展示，可承载文字、列表、图片、段落，常用于后台数据展示页面。

1.简单列表
列表拥有大、中、小三种尺寸。
通过设置 size 为 largesmall 分别把按钮设为大、小尺寸。若不设置 size，则尺寸为中。
可通过设置 nzHeader 和 nzFooter，来自定义列表头部和尾部。
<h3 [ngStyle]="{'margin-bottom.px': 16 }">Default Size</h3>
<nz-list [nzDataSource]="data" nzBordered [nzHeader]="'Header'"  [nzFooter]="'Footer'" [nzRenderItem]="item">
  <ng-template #item let-item><nz-list-item [nzContent]="item"></nz-list-item></ng-template>
</nz-list>
<h3 [ngStyle]="{'margin': '16px 0' }">Small Size</h3>
<nz-list [nzDataSource]="data" nzBordered nzSize="small" [nzHeader]="'Header'" [nzFooter]="'Footer'" [nzRenderItem]="item">
  <ng-template #item let-item><nz-list-item [nzContent]="item"></nz-list-item></ng-template>
</nz-list>
<h3 [ngStyle]="{'margin': '16px 0' }">Large Size</h3>
<nz-list [nzDataSource]="data" nzBordered nzSize="large" [nzHeader]="'Header'" [nzFooter]="'Footer'" [nzRenderItem]="item">
  <ng-template #item let-item><nz-list-item [nzContent]="item"></nz-list-item></ng-template>
</nz-list>

data = [
  'Racing car sprays burning fuel into crowd.',
  'Japanese princess to wed commoner.',
  'Australian walks 100km after outback crash.',
  'Man charged over missing wedding girl.',
  'Los Angeles battles huge wildfires.'
];

2.基础列表(可切换显示)
<div style="margin-bottom: 8px;"><button nz-button (click)="change()">Switch Data</button></div>
<nz-list [nzDataSource]="data" [nzRenderItem]="item" [nzItemLayout]="'horizontal'" [nzLoading]="loading">
  <ng-template #item let-item>
    <nz-list-item>
      <nz-list-item-meta [nzTitle]="nzTitle" nzAvatar="https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png" nzDescription="Ant Design, a design language for background applications, is refined by Ant UED Team">
        <ng-template #nzTitle>
          <a href="https://ng.ant.design">{{item.title}}</a>
        </ng-template>
      </nz-list-item-meta>
    </nz-list-item>
  </ng-template>
</nz-list>

loading = false;
data = [
  {
    title: 'Ant Design Title 1'
  },
  {
    title: 'Ant Design Title 2'
  },
  {
    title: 'Ant Design Title 3'
  },
  {
    title: 'Ant Design Title 4'
  }
];

change(): void {
  this.loading = true;
  if (this.data.length > 0) {
    setTimeout(() => {
      this.data = [];
      this.loading = false;
    }, 1000);
  } else {
    setTimeout(() => {
      this.data = [
        {
          title: 'Ant Design Title 1'
        },
        {
          title: 'Ant Design Title 2'
        },
        {
          title: 'Ant Design Title 3'
        },
        {
          title: 'Ant Design Title 4'
        }
      ];
      this.loading = false;
    }, 1000);
  }
}

3.加载更多
可通过 loadMore 属性实现加载更多功能。
<nz-list class="demo-loadmore-list" [nzDataSource]="list" [nzItemLayout]="'horizontal'" [nzLoading]="initLoading" [nzRenderItem]="item" [nzLoadMore]="loadMore">
  <ng-template #item let-item>
    <nz-list-item [nzContent]="item.loading?'':'content'" [nzActions]="item.loading?[]:[editAction,moreAction]">
      <nz-skeleton [nzAvatar]="true" [nzActive]="true" [nzTitle]="false" [nzLoading]="item.loading">
        <ng-template #editAction><a (click)="edit(item)">edit</a></ng-template>
        <ng-template #moreAction><a (click)="edit(item)">more</a></ng-template>
        <nz-list-item-meta [nzTitle]="nzTitle" nzAvatar="https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png" nzDescription="Ant Design, a design language for background applications, is refined by Ant UED Team">
          <ng-template #nzTitle>
            <a href="https://ng.ant.design">{{item.name.last}}</a>
          </ng-template>
        </nz-list-item-meta>
      </nz-skeleton>
    </nz-list-item>
  </ng-template>
  <ng-template #loadMore>
    <div class="loadmore">
      <button nz-button *ngIf="!loadingMore" (click)="onLoadMore()">loading more</button>
    </div>
  </ng-template>
</nz-list>

const count = 5;
const fakeDataUrl = 'https://randomuser.me/api/?results=5&inc=name,gender,email,nat&noinfo';

initLoading = true; // bug
loadingMore = false;
data = [];
list = [];

constructor(private http: HttpClient, private msg: NzMessageService) {}

ngOnInit(): void {
  this.getData((res: any) => {
    this.data = res.results;
    this.list = res.results;
    this.initLoading = false;
  });
}

getData(callback: (res: any) => void): void {
  this.http.get(fakeDataUrl).subscribe((res: any) => callback(res));
}

onLoadMore(): void {
  this.loadingMore = true;
  this.list = this.data.concat([...Array(count)].fill({}).map(() => ({ loading: true, name: {} })));
  this.http.get(fakeDataUrl).subscribe((res: any) => {
    this.data = this.data.concat(res.results);
    this.list = [...this.data];
    this.loadingMore = false;
  });
}

edit(item: any): void {
  this.msg.success(item.email);
}

:host ::ng-deep .demo-loadmore-list {
  min-height: 350px;
}
:host ::ng-deep .loadmore {
  text-align: center;
  margin-top: 12px;
  height: 32px;
  line-height: 32px;
}

5.竖排列表样式
通过设置 nzItemLayout 属性为 vertical 可实现竖排列表样式。
<nz-list [nzDataSource]="data" [nzItemLayout]="'vertical'" [nzRenderItem]="item" [nzPagination]="pagination">
    <ng-template #item let-item>
        <nz-list-item [nzContent]="item.content" [nzActions]="[starAction,likeAction,msgAction]" [nzExtra]="extra">
            <ng-template #starAction><i nz-icon type="star-o" style="margin-right: 8px;"></i> 156</ng-template>
            <ng-template #likeAction><i nz-icon type="like-o" style="margin-right: 8px;"></i> 156</ng-template>
            <ng-template #msgAction><i nz-icon type="message" style="margin-right: 8px;"></i> 2</ng-template>
            <nz-list-item-meta [nzAvatar]="item.avatar" [nzTitle]="nzTitle" [nzDescription]="item.description">
                <ng-template #nzTitle><a href="{{item.href}}">{{item.title}}</a></ng-template>
            </nz-list-item-meta>
            <ng-template #extra>
                <img width="272" alt="logo" src="https://gw.alipayobjects.com/zos/rmsportal/mqaQswcyDLcXyDKnZfES.png">
            </ng-template>
        </nz-list-item>
    </ng-template>
    <ng-template #pagination>
        <nz-pagination [nzPageIndex]="1" [nzTotal]="50"></nz-pagination>
    </ng-template>
</nz-list>

data = new Array(5).fill({}).map((i, index) => {
  return {
    href: 'http://ant.design',
    title: `ant design part ${index}`,
    avatar: 'https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png',
    description: 'Ant Design, a design language for background applications, is refined by Ant UED Team.',
    content: 'We supply a series of design principles, practical patterns and high quality design resources (Sketch and Axure), to help people create their product prototypes beautifully and efficiently.'
  };
});

6.栅格列表
可以通过设置 nz-list 的 grid 属性来实现栅格列表，column 可设置期望显示的列数。
<nz-list [nzDataSource]="data" [nzRenderItem]="item" [nzGrid]="{gutter: 16, span: 6}">
  <ng-template #item let-item>
    <nz-list-item [nzContent]="nzContent">
      <ng-template #nzContent>
        <nz-card [nzTitle]="item.title"> Card content</nz-card>
      </ng-template>
    </nz-list-item>
  </ng-template>
</nz-list>

data = [
  {
    title: 'Title 1',
  },
  {
    title: 'Title 2',
  },
  {
    title: 'Title 3',
  },
  {
    title: 'Title 4',
  },
];



7.响应式的栅格列表
响应式的栅格列表。尺寸与 Layout Grid 保持一致。
<nz-list [nzDataSource]="data" [nzRenderItem]="item" [nzGrid]="{gutter: 16, xs: 24, sm: 12, md: 6, lg: 6, xl: 4 }">
  <ng-template #item let-item>
    <nz-list-item [nzContent]="nzContent">
      <ng-template #nzContent>
        <nz-card [nzTitle]="item.title"> Card content</nz-card>
      </ng-template>
    </nz-list-item>
  </ng-template>
</nz-list>

data = [
  {
    title: 'Title 1'
  },
  {
    title: 'Title 2'
  },
  {
    title: 'Title 3'
  },
  {
    title: 'Title 4'
  },
  {
    title: 'Title 5'
  },
  {
    title: 'Title 6'
  }
];

8.滚动加载()
结合 ngx-infinite-scroll 实现滚动自动加载列表。
npm install angular2-infinite-scroll --save
import { HttpClient } from '@angular/common/http';
import { Component, OnInit } from '@angular/core';
import { NzMessageService } from 'ng-zorro-antd';

const fakeDataUrl = 'https://randomuser.me/api/?results=5&inc=name,gender,email,nat&noinfo';

@Component({
  selector: 'nz-demo-list-infinite-load',
  template: `
  <div class="demo-infinite-container"
    infiniteScroll
    [infiniteScrollDistance]="2"
    [infiniteScrollThrottle]="50"
    (scrolled)="onScroll()"
    [scrollWindow]="false">
    <nz-list [nzDataSource]="data" [nzRenderItem]="item">
      <ng-template #item let-item>
        <nz-list-item>
          <nz-list-item-meta
              [nzTitle]="nzTitle"
              nzAvatar="https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png"
              [nzDescription]="item.email">
              <ng-template #nzTitle>
                  <a href="https://ng.ant.design">{{item.name.last}}</a>
              </ng-template>
          </nz-list-item-meta>
        </nz-list-item>
      </ng-template>
      <nz-spin *ngIf="loading && hasMore" class="demo-loading"></nz-spin>
    </nz-list>
  </div>
  `,
  styles: [ `
  :host ::ng-deep .demo-infinite-container {
    border: 1px solid #e8e8e8;
    border-radius: 4px;
    overflow: auto;
    padding: 8px 24px;
    height: 300px;
  }
  :host ::ng-deep .demo-loading {
    position: absolute;
    bottom: -40px;
    left: 50%;
  }
  ` ]
})
export class NzDemoListInfiniteLoadComponent implements OnInit {
  data: any[] = [];
  loading = false;
  hasMore = true;

  constructor(private http: HttpClient, private msg: NzMessageService) {}

  ngOnInit(): void {
    this.getData((res: any) => this.data = res.results);
  }

  getData(callback: (res: any) => void): void {
    this.http.get(fakeDataUrl).subscribe((res: any) => callback(res));
  }

  onScroll(): void {
    if (this.loading) return;
    this.loading = true;
    if (this.data.length > 14) {
      this.msg.warning('Infinite List loaded all');
      this.hasMore = false;
      this.loading = false;
      return;
    }
    this.getData((res: any) => {
      this.data = this.data.concat(res.results);
      this.loading = false;
    });
  }
}

9.API
nz-listCOMPONENT#
[nzDataSource]	列表数据源	any[]	-
[nzRenderItem]	自定义列表项	TemplateRef<void>	-
[nzBordered]	是否展示边框	boolean	false
[nzFooter]	列表底部	string｜TemplateRef<void>	-
[nzGrid]	列表栅格配置	object	-
[nzHeader]	列表头部	string,TemplateRef<void>	-
[nzItemLayout]	设置 nz-list-item 布局, 设置成 vertical 则竖直样式显示, 默认横排	string	-
[nzLoading]	当卡片内容还在加载中时，可以用 loading 展示一个占位	boolean	false
[nzLoadMore]	加载更多	TemplateRef<void>	-
[nzPagination]	对应的 pagination 配置	TemplateRef<void>	-
[nzSize]	list 的尺寸	default,small,large	default
[nzSplit]	是否展示分割线	boolean	true

nzGrid#
column	列数	number	-
gutter	栅格间隔	number	0
xs	<576px 展示的列数	number	-
sm	≥576px 展示的列数	number	-
md	≥768px 展示的列数	number	-
lg	≥992px 展示的列数	number	-
xl	≥1200px 展示的列数	number	-
xxl	≥1600px 展示的列数	number	-

nz-list-itemCOMPONENT#
[nzContent]	内容项	string｜TemplateRef<void>	-
[nzActions]	列表操作组，根据 nzItemLayout 的不同, 位置在卡片底部或者最右侧。	Array<TemplateRef<void><void>>	-
[nzExtra]	额外内容, 通常用在 nzItemLayout 为 vertical 的情况下, 展示右侧内容; horizontal 展示在列表元素最右侧	TemplateRef<void>	-

nz-list-item-metaCOMPONENT#
[nzAvatar]	列表元素的图标	string｜TemplateRef<void>	-
[nzDescription]	列表元素的描述内容	string｜TemplateRef<void>	-
[nzTitle]	列表元素的标题	string｜TemplateRef<void>	-

七.Popover气泡卡片
点击/鼠标移入元素，弹出气泡式的卡片浮层。
1.最简单的用法，浮层的大小由内容区域决定。
template: `
    <button
      nz-button
      nz-popover
      nzType="primary"
      nzTitle="Title"
      nzContent="Content">
      Hover me
    </button>
  `
2.位置 位置有十二个方向。
template: `
    <div style="margin-left: 60px">
      <button nz-button nz-popover nzTitle="Title" [nzContent]="contentTemplate" nzPlacement="topLeft">TL</button>
      <button nz-button nz-popover nzTitle="Title" [nzContent]="contentTemplate" nzPlacement="top">Top</button>
      <button nz-button nz-popover nzTitle="Title" [nzContent]="contentTemplate" nzPlacement="topRight">TR</button>
    </div>
    <div style="width: 60px; float: left;">
      <button nz-button nz-popover nzTitle="Title" [nzContent]="contentTemplate" nzPlacement="leftTop">LT</button>
      <button nz-button nz-popover nzTitle="Title" [nzContent]="contentTemplate" nzPlacement="left">Left</button>
      <button nz-button nz-popover nzTitle="Title" [nzContent]="contentTemplate" nzPlacement="leftBottom">LB</button>
    </div>
    <div style="width: 60px; margin-left: 252px;">
      <button nz-button nz-popover nzTitle="Title" [nzContent]="contentTemplate" nzPlacement="rightTop">RT</button>
      <button nz-button nz-popover nzTitle="Title" [nzContent]="contentTemplate" nzPlacement="right">Right</button>
      <button nz-button nz-popover nzTitle="Title" [nzContent]="contentTemplate" nzPlacement="rightBottom">RB</button>
    </div>
    <div style="margin-left: 60px; clear: both;">
      <button nz-button nz-popover nzTitle="Title" [nzContent]="contentTemplate" nzPlacement="bottomLeft">BL</button>
      <button nz-button nz-popover nzTitle="Title" [nzContent]="contentTemplate" nzPlacement="bottom">Bottom</button>
      <button nz-button nz-popover nzTitle="Title" [nzContent]="contentTemplate" nzPlacement="bottomRight">BR</button>
    </div>
    <ng-template #contentTemplate>
      <div>
        <p>Content</p>
        <p>Content</p>
      </div>
    </ng-template>
  `,
  styles  : [ `
    button {
      margin-right: 8px;
      margin-bottom: 8px;
      width: 70px;
      text-align: center;
      padding: 0;
    }
  ` ]

3.从浮层内关闭
使用 nzVisible 属性控制浮层显示。
template: `
    <button
      nz-button
      nzType="primary"
      nz-popover
      nzTitle="Title"
      [(nzVisible)]="visible"
      (nzVisibleChange)="change($event)"
      nzTrigger="click"
      [nzContent]="contentTemplate">
      Click me
    </button>
    <ng-template #contentTemplate>
      <a (click)='clickMe()'>Close</a>
    </ng-template>
  `
})
export class LoginComponent {
  visible: boolean;

  clickMe(): void {
    this.visible = false;
  }

  change(value: boolean): void {
    console.log(value);
  }
  
}

3.模板渲染
nzContent 与 nzTitle 可以传入 TemplateRef<void> 模板渲染。
template: `
    <button
      nz-button
      nz-popover
      [nzTitle]="titleTemplate"
      [nzContent]="contentTemplate">
      Render Template
    </button>
    <ng-template #titleTemplate><i nz-icon type="close"></i> Title</ng-template>
    <ng-template #contentTemplate><i nz-icon type="check"></i> Content</ng-template>
  `

4.箭头指向
通过设置 nzPlacement ，可以箭头将指向目标元素的中心。
template: `
    <button nz-button nzTitle="Title" nzContent="Content" nzPlacement="topLeft" nz-popover>Align edge / 边缘对齐</button>
    <button nz-button nzTitle="Title" nzContent="Content" nzPlacement="topCenter" nz-popover>Arrow points to center / 箭头指向中心</button>
  `,
  styles  : [
      `button {
      margin-right: 8px;
      margin-bottom: 8px;
    }`

5.三种触发方式
鼠标移入、聚集、点击。
  template: `
    <ng-template #contentTemplate>
      <div>
        <p>Content</p>
        <p>Content</p>
      </div>
    </ng-template>
    <button nz-button nz-popover nzTitle="Title" [nzContent]="contentTemplate" nzTrigger="click">Click me</button>
    <button nz-button nz-popover nzTitle="Title" [nzContent]="contentTemplate" nzTrigger="hover">Hover me</button>
    <button nz-button nz-popover nzTitle="Title" [nzContent]="contentTemplate" nzTrigger="focus">Focus me</button>
  `,
  styles  : [
      `
      button {
        margin-right: 8px;
      }
    `
  ]

6.API#
[nz-popover]DIRECTIVE#
参数	说明	类型	默认值
[nzTitle]	卡片标题	string 丨TemplateRef<void>	无
[nzContent]	用于定义Content内容	string 丨TemplateRef<void>	无
更多属性请参考 Tooltip。

注意#
请确保 nz-popover 的子元素能接受 onMouseEnter、onMouseLeave、onFocus、onClick 事件。

八.Table表格
1.基本用法
简单的表格，最后一列是各种操作。

template: `
    <nz-table #basicTable [nzData]="dataSet">
      <thead>
        <tr>
          <th>Name</th>
          <th>Age</th>
          <th>Address</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let data of basicTable.data">
          <td>{{data.name}}</td>
          <td>{{data.age}}</td>
          <td>{{data.address}}</td>
          <td>
            <a>Action 一 {{data.name}}</a>
            <nz-divider nzType="vertical"></nz-divider>
            <a>Delete</a>
          </td>
        </tr>
      </tbody>
    </nz-table>
  `
dataSet = [
    {
      key    : '1',
      name   : 'John Brown',
      age    : 32,
      address: 'New York No. 1 Lake Park'
    },
    {
      key    : '2',
      name   : 'Jim Green',
      age    : 42,
      address: 'London No. 1 Lake Park'
    },
    {
      key    : '3',
      name   : 'Joe Black',
      age    : 32,
      address: 'Sidney No. 1 Lake Park'
    }
  ];

2.可选择
第一列是联动的选择框，增加 nzShowCheckbox 后，th 获得和 nz-checkbox 一样的功能，请注意：数据逻辑需要自行控制。
template: `
    <nz-table
      #rowSelectionTable
      [nzData]="data"
      (nzCurrentPageDataChange)="currentPageDataChange($event)"
      (nzPageIndexChange)="refreshStatus()"
      (nzPageSizeChange)="refreshStatus()">
      <thead>
        <tr>
          <th nzShowCheckbox [(nzChecked)]="allChecked" [nzIndeterminate]="indeterminate" (nzCheckedChange)="checkAll($event)"></th>
          <th>Name</th>
          <th>Age</th>
          <th>Address</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let data of rowSelectionTable.data">
          <td nzShowCheckbox [(nzChecked)]="data.checked" [nzDisabled]="data.disabled" (nzCheckedChange)="refreshStatus()"></td>
          <td>{{data.name}}</td>
          <td>{{data.age}}</td>
          <td>{{data.address}}</td>
        </tr>
      </tbody>
    </nz-table>`,
  styles  : []

  allChecked = false;
  indeterminate = false;
  displayData = [];
  data = [
    {
      name    : 'John Brown',
      age     : 32,
      address : 'New York No. 1 Lake Park',
      checked : false,
      disabled: false
    },
    {
      name    : 'Jim Green',
      age     : 42,
      address : 'London No. 1 Lake Park',
      checked : false,
      disabled: false
    },
    {
      name    : 'Joe Black',
      age     : 32,
      address : 'Sidney No. 1 Lake Park',
      checked : false,
      disabled: false
    },
    {
      name    : 'Disabled User',
      age     : 32,
      address : 'Sidney No. 1 Lake Park',
      checked : false,
      disabled: true
    }
  ];

  currentPageDataChange($event: Array<{ name: string; age: number; address: string; checked: boolean; disabled: boolean; }>): void {
    this.displayData = $event;
    this.refreshStatus();
  }

  refreshStatus(): void {
    const allChecked = this.displayData.filter(value => !value.disabled).every(value => value.checked === true);
    const allUnChecked = this.displayData.filter(value => !value.disabled).every(value => !value.checked);
    this.allChecked = allChecked;
    this.indeterminate = (!allChecked) && (!allUnChecked);
  }

  checkAll(value: boolean): void {
    this.displayData.forEach(data => {
      if (!data.disabled) {
        data.checked = value;
      }
    });
    this.refreshStatus();
  }

3.选择和操作
选择后进行操作，完成后清空选择，请注意：数据逻辑需要自行控制。
template: `
    <div style="margin-bottom: 16px;">
      <button nz-button [disabled]="disabledButton" [nzType]="'primary'" [nzLoading]="operating" (click)="operateData()">
        Reload
      </button>
      <span style="margin-left: 8px;" *ngIf="checkedNumber">Selected {{checkedNumber}} items</span>
    </div>
    <nz-table
      #rowSelectionTable
      [nzData]="dataSet"
      (nzCurrentPageDataChange)="currentPageDataChange($event)"
      (nzPageIndexChange)="refreshStatus()"
      (nzPageSizeChange)="refreshStatus()">
      <thead>
        <tr>
          <th nzShowCheckbox [(nzChecked)]="allChecked" [nzIndeterminate]="indeterminate" (nzCheckedChange)="checkAll($event)"></th>
          <th>Name</th>
          <th>Age</th>
          <th>Address</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let data of rowSelectionTable.data">
          <td nzShowCheckbox [(nzChecked)]="data.checked" (nzCheckedChange)="refreshStatus()"></td>
          <td>{{data.name}}</td>
          <td>{{data.age}}</td>
          <td>{{data.address}}</td>
        </tr>
      </tbody>
    </nz-table>`,
  styles  : []

  allChecked = false;
  disabledButton = true;
  checkedNumber = 0;
  displayData: Array<{ name: string; age: number; address: string; checked: boolean }> = [];
  operating = false;
  dataSet = [];
  indeterminate = false;

  currentPageDataChange($event: Array<{ name: string; age: number; address: string; checked: boolean }>): void {
    this.displayData = $event;
  }

  refreshStatus(): void {
    const allChecked = this.displayData.every(value => value.checked === true);
    const allUnChecked = this.displayData.every(value => !value.checked);
    this.allChecked = allChecked;
    this.indeterminate = (!allChecked) && (!allUnChecked);
    this.disabledButton = !this.dataSet.some(value => value.checked);
    this.checkedNumber = this.dataSet.filter(value => value.checked).length;
  }

  checkAll(value: boolean): void {
    this.displayData.forEach(data => data.checked = value);
    this.refreshStatus();
  }

  operateData(): void {
    this.operating = true;
    setTimeout(_ => {
      this.dataSet.forEach(value => value.checked = false);
      this.refreshStatus();
      this.operating = false;
    }, 1000);
  }

  ngOnInit(): void {
    for (let i = 0; i < 46; i++) {
      this.dataSet.push({
        name   : `Edward King ${i}`,
        age    : 32,
        address: `London, Park Lane no. ${i}`,
        checked: false
      });
    }
  }

4.自定义选择项
通过 nzShowRowSelection 与 nzSelections 自定义选择项.
template: `
    <nz-table
      #rowSelectionTable
      [nzData]="dataSet"
      [nzPageSize]="10"
      (nzPageIndexChange)="refreshStatus()"
      (nzPageSizeChange)="refreshStatus()">
      <thead>
        <tr>
          <th nzShowCheckbox nzShowRowSelection [nzSelections]="listOfSelection" [(nzChecked)]="allChecked" [nzIndeterminate]="indeterminate" (nzCheckedChange)="checkAll($event)"></th>
          <th>Name</th>
          <th>Age</th>
          <th>Address</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let data of rowSelectionTable.data">
          <td nzShowCheckbox [(nzChecked)]="data.checked" (nzCheckedChange)="refreshStatus()"></td>
          <td>{{data.name}}</td>
          <td>{{data.age}}</td>
          <td>{{data.address}}</td>
        </tr>
      </tbody>
    </nz-table>`,
  styles  : []

  listOfSelection = [
    {
      text    : 'Select All Row',
      onSelect: () => {
        this.checkAll(true);
      }
    },
    {
      text    : 'Select Odd Row',
      onSelect: () => {
        this.dataSet.forEach((data, index) => data.checked = index % 2 !== 0);
        this.refreshStatus();
      }
    },
    {
      text    : 'Select Even Row',
      onSelect: () => {
        this.dataSet.forEach((data, index) => data.checked = index % 2 === 0);
        this.refreshStatus();
      }
    }
  ];
  allChecked = false;
  dataSet: Array<{ name: string; age: number; address: string; checked: boolean }> = [];
  indeterminate = false;

  refreshStatus(): void {
    const allChecked = this.dataSet.every(value => value.checked === true);
    const allUnChecked = this.dataSet.every(value => !value.checked);
    this.allChecked = allChecked;
    this.indeterminate = (!allChecked) && (!allUnChecked);
  }

  checkAll(value: boolean): void {
    this.dataSet.forEach(data => data.checked = value);
    this.refreshStatus();
  }

  ngOnInit(): void {
    for (let i = 0; i < 46; i++) {
      this.dataSet.push({
        name   : `Edward King ${i}`,
        age    : 32,
        address: `London, Park Lane no. ${i}`,
        checked: false
      });
    }
  }

5.默认筛选
通过设置 filter 对象的 { byDefault: true } 属性来默认启用一个筛选器。注意，你必须同时自行设置过滤后应当展示的列表项，为了保持数据流的清晰和数据的一致性，ng-zorro 不会为你做这项工作。详情请见 demo。
template: `
    <nz-table #filterTable [nzData]="displayData">
      <thead (nzSortChange)="sort($event)" nzSingleSort>
        <tr>
          <th nzShowSort nzSortKey="name" nzShowFilter [nzFilters]="nameList" (nzFilterChange)="filter($event,searchAddress)">Name</th>
          <th nzShowSort nzSortKey="age">Age</th>
          <th nzShowSort nzSortKey="address" nzShowFilter [nzFilterMultiple]="false" [nzFilters]="addressList" (nzFilterChange)="filter(listOfSearchName,$event)">Address</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let data of filterTable.data">
          <td>{{data.name}}</td>
          <td>{{data.age}}</td>
          <td>{{data.address}}</td>
        </tr>
      </tbody>
    </nz-table>`

  nameList = [
    { text: 'Joe', value: 'Joe', byDefault: true },
    { text: 'Jim', value: 'Jim' }
  ];
  addressList = [
    { text: 'London', value: 'London', byDefault: true },
    { text: 'Sidney', value: 'Sidney' }
  ];
  sortName = null;
  sortValue = null;
  listOfSearchName = [ 'Joe' ];  // You need to change it as well!
  searchAddress = 'London';
  data = [
    {
      name: 'John Brown',
      age: 32,
      address: 'New York No. 1 Lake Park'
    },
    {
      name: 'Jim Green',
      age: 42,
      address: 'London No. 1 Lake Park'
    },
    {
      name: 'Joe Black',
      age: 32,
      address: 'Sidney No. 1 Lake Park'
    },
    {
      name: 'Jim Red',
      age: 32,
      address: 'London No. 2 Lake Park'
    }
  ];
  displayData = [ ]; // You need to change it as well!

  sort(sort: { key: string, value: string }): void {
    this.sortName = sort.key;
    this.sortValue = sort.value;
    this.search();
  }

  filter(listOfSearchName: string[], searchAddress: string): void {
    this.listOfSearchName = listOfSearchName;
    this.searchAddress = searchAddress;
    this.search();
  }

  search(): void {
    /** filter data **/
    const filterFunc = item => (this.searchAddress ? item.address.indexOf(this.searchAddress) !== -1 : true) && (this.listOfSearchName.length ? this.listOfSearchName.some(name => item.name.indexOf(name) !== -1) : true);
    const data = this.data.filter(item => filterFunc(item));
    /** sort data **/
    if (this.sortName && this.sortValue) {
      this.displayData = data.sort((a, b) => (this.sortValue === 'ascend') ? (a[ this.sortName ] > b[ this.sortName ] ? 1 : -1) : (b[ this.sortName ] > a[ this.sortName ] ? 1 : -1));
    } else {
      this.displayData = data;
    }
  }

6.筛选和排序
对某一列数据进行筛选，通过指定 th 的 nzShowFilter 属性来展示筛选菜单， 使用 nzFilters 属性来指定筛选选项，nzFilterChange 用于获取当前选中的选项，nzFilterMultiple 用于指定多选和单选。
对某一列数据进行排序，通过指定 th 的 nzShowSort 属性来展示排序按钮，使用 nzSortKey 来指定排序的 key，在 thead 上通过 nzSortChange 来获取排序改变事件，通过 nzSingleSort 来指定是否单列排序。
template: `
  <nz-table #filterTable [nzData]="displayData">
    <thead (nzSortChange)="sort($event)" nzSingleSort>
      <tr>
        <th nzShowSort nzSortKey="name" nzShowFilter [nzFilters]="nameList" (nzFilterChange)="filter($event,searchAddress)">Name</th>
        <th nzShowSort nzSortKey="age">Age</th>
        <th nzShowSort nzSortKey="address" nzShowFilter [nzFilterMultiple]="false" [nzFilters]="addressList" (nzFilterChange)="filter(listOfSearchName,$event)">Address</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let data of filterTable.data">
        <td>{{data.name}}</td>
        <td>{{data.age}}</td>
        <td>{{data.address}}</td>
      </tr>
    </tbody>
  </nz-table>`

nameList = [
  { text: 'Joe', value: 'Joe' },
  { text: 'Jim', value: 'Jim' }
];
addressList = [
  { text: 'London', value: 'London' },
  { text: 'Sidney', value: 'Sidney' }
];
sortName = null;
sortValue = null;
listOfSearchName = [];
searchAddress: string;
data = [
  {
    name   : 'John Brown',
    age    : 32,
    address: 'New York No. 1 Lake Park'
  },
  {
    name   : 'Jim Green',
    age    : 42,
    address: 'London No. 1 Lake Park'
  },
  {
    name   : 'Joe Black',
    age    : 32,
    address: 'Sidney No. 1 Lake Park'
  },
  {
    name   : 'Jim Red',
    age    : 32,
    address: 'London No. 2 Lake Park'
  }
];
displayData = [ ...this.data ];

sort(sort: { key: string, value: string }): void {
  this.sortName = sort.key;
  this.sortValue = sort.value;
  this.search();
}

filter(listOfSearchName: string[], searchAddress: string): void {
  this.listOfSearchName = listOfSearchName;
  this.searchAddress = searchAddress;
  this.search();
}

search(): void {
  /** filter data **/
  const filterFunc = item => (this.searchAddress ? item.address.indexOf(this.searchAddress) !== -1 : true) && (this.listOfSearchName.length ? this.listOfSearchName.some(name => item.name.indexOf(name) !== -1) : true);
  const data = this.data.filter(item => filterFunc(item));
  /** sort data **/
  if (this.sortName && this.sortValue) {
    this.displayData = data.sort((a, b) => (this.sortValue === 'ascend') ? (a[ this.sortName ] > b[ this.sortName ] ? 1 : -1) : (b[ this.sortName ] > a[ this.sortName ] ? 1 : -1));
  } else {
    this.displayData = data;
  }
}

7.可控的筛选和排序
使用受控属性对筛选状态进行控制。

在th 中定义了 nzSort 属性即视为受控模式。
通过手动指定 nzSort 来指定当前列的排序状态
通过 th 的 nzSortChange 事件来获取当前列排序状态的改变
不可与 thead 中的 nzSortChange 或 nzSingleSort 同时使用
template: `
    <div class="table-operations">
      <button nz-button (click)="sort('age','descend')">Sort age</button>
      <button nz-button (click)="resetFilters()">Clear filters</button>
      <button nz-button (click)="resetSortAndFilters()">Clear filters and sorters</button>
    </div>
    <nz-table #filterTable [nzData]="displayData">
      <thead>
        <tr>
          <th nzShowSort nzShowFilter [(nzSort)]="sortMap.name" (nzSortChange)="sort('name',$event)" [nzFilters]="filterNameList" (nzFilterChange)="search($event,searchAddressList)">Name</th>
          <th nzShowSort [(nzSort)]="sortMap.age" (nzSortChange)="sort('age',$event)">Age</th>
          <th nzShowSort nzShowFilter [(nzSort)]="sortMap.address" (nzSortChange)="sort('address',$event)" [nzFilters]="filterAddressList" (nzFilterChange)="search(searchNameList,$event)">Address</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let data of filterTable.data">
          <td>{{data.name}}</td>
          <td>{{data.age}}</td>
          <td>{{data.address}}</td>
        </tr>
      </tbody>
    </nz-table>`,
  styles  : [
      `
      .table-operations {
        margin-bottom: 16px;
      }

      .table-operations > button {
        margin-right: 8px;
      }
    `
  ]

  searchNameList = [];
  searchAddressList = [];
  filterNameList = [
    { text: 'Joe', value: 'Joe' },
    { text: 'Jim', value: 'Jim' }
  ];
  filterAddressList = [
    { text: 'London', value: 'London' },
    { text: 'Sidney', value: 'Sidney' }
  ];
  sortMap = {
    name   : null,
    age    : null,
    address: null
  };
  sortName = null;
  sortValue = null;

  data = [
    {
      name   : 'John Brown',
      age    : 32,
      address: 'New York No. 1 Lake Park'
    },
    {
      name   : 'Jim Green',
      age    : 42,
      address: 'London No. 1 Lake Park'
    },
    {
      name   : 'Joe Black',
      age    : 32,
      address: 'Sidney No. 1 Lake Park'
    },
    {
      name   : 'Jim Red',
      age    : 32,
      address: 'London No. 2 Lake Park'
    }
  ];
  displayData = [ ...this.data ];

  sort(sortName: string, value: string): void {
    this.sortName = sortName;
    this.sortValue = value;
    for (const key in this.sortMap) {
      this.sortMap[ key ] = (key === sortName ? value : null);
    }
    this.search(this.searchNameList, this.searchAddressList);
  }

  search(searchNameList: string[], searchAddressList: string[]): void {
    this.searchNameList = searchNameList;
    this.searchAddressList = searchAddressList;
    const filterFunc = item => (this.searchAddressList.length ? this.searchAddressList.some(address => item.address.indexOf(address) !== -1) : true) && (this.searchNameList.length ? this.searchNameList.some(name => item.name.indexOf(name) !== -1) : true);
    const data = this.data.filter(item => filterFunc(item));
    if (this.sortName && this.sortValue) {
      this.displayData = data.sort((a, b) => (this.sortValue === 'ascend') ? (a[ this.sortName ] > b[ this.sortName ] ? 1 : -1) : (b[ this.sortName ] > a[ this.sortName ] ? 1 : -1));
    } else {
      this.displayData = data;
    }
  }

  resetFilters(): void {
    this.filterNameList = [
      { text: 'Joe', value: 'Joe' },
      { text: 'Jim', value: 'Jim' }
    ];
    this.filterAddressList = [
      { text: 'London', value: 'London' },
      { text: 'Sidney', value: 'Sidney' }
    ];
    this.searchNameList = [];
    this.searchAddressList = [];
    this.search(this.searchNameList, this.searchAddressList);
  }

  resetSortAndFilters(): void {
    this.sortName = null;
    this.sortValue = null;
    this.sortMap = {
      name   : null,
      age    : null,
      address: null
    };
    this.resetFilters();
    this.search(this.searchNameList, this.searchAddressList);
  }

8.自定义筛选菜单
通过 nz-dropdown、nzFilters 和 nzFilterChange 定义自定义的列筛选功能，并实现一个搜索列的示例。
template: `
  <nz-table #nzTable [nzData]="displayData">
    <thead>
      <tr>
        <th nzCustomFilter>
          Name
          <nz-dropdown nzTrigger="click" [nzClickHide]="false" #dropdown>
            <i nz-icon type="smile-o" class="ant-table-filter-icon" [class.ant-table-filter-open]="dropdown.nzVisible" nz-dropdown></i>
            <div class="custom-filter-dropdown">
              <input type="text" nz-input placeholder="Search name" [(ngModel)]="searchValue">
              <button nz-button [nzType]="'primary'" (click)="search()">Search</button>
            </div>
          </nz-dropdown>
        </th>
        <th>Age</th>
        <th nzShowFilter [nzFilters]="filterAddressArray" (nzFilterChange)="filterAddressChange($event)">Address</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let data of nzTable.data">
        <td>{{data.name}}</td>
        <td>{{data.age}}</td>
        <td>{{data.address}}</td>
      </tr>
    </tbody>
  </nz-table>`,
styles  : [
    `
    .custom-filter-dropdown {
      padding: 8px;
      border-radius: 6px;
      background: #fff;
      box-shadow: 0 1px 6px rgba(0, 0, 0, .2);
    }

    [nz-input] {
      width: 130px;
      margin-right: 8px;
    }

    .highlight {
      color: #f50;
    }
  `
]

searchValue = '';
filterAddressArray = [
  { text: 'London', value: 'London' },
  { text: 'Sidney', value: 'Sidney' }
];
searchAddress = [];
sortMap = {
  name   : null,
  age    : null,
  address: null
};
sortName = null;
sortValue = null;
data = [
  {
    name   : 'John Brown',
    age    : 32,
    address: 'New York No. 1 Lake Park'
  },
  {
    name   : 'Jim Green',
    age    : 42,
    address: 'London No. 1 Lake Park'
  },
  {
    name   : 'Joe Black',
    age    : 32,
    address: 'Sidney No. 1 Lake Park'
  },
  {
    name   : 'Jim Red',
    age    : 32,
    address: 'London No. 2 Lake Park'
  }
];
displayData = [ ...this.data ];

sort(sortName: string, value: boolean): void {
  this.sortName = sortName;
  this.sortValue = value;
  for (const key in this.sortMap) {
    this.sortMap[ key ] = (key === sortName ? value : null);
  }
  this.search();
}

filterAddressChange(value: string[]): void {
  this.searchAddress = value;
  this.search();
}

search(): void {
  const filterFunc = (item) => {
    return (this.searchAddress.length ? this.searchAddress.some(address => item.address.indexOf(address) !== -1) : true) &&
      (item.name.indexOf(this.searchValue) !== -1);
  };
  const data = this.data.filter(item => filterFunc(item));
  this.displayData = data.sort((a, b) => (this.sortValue === 'ascend') ? (a[ this.sortName ] > b[ this.sortName ] ? 1 : -1) : (b[ this.sortName ] > a[ this.sortName ] ? 1 : -1));
}

9.远程加载数据
这个例子通过简单的 ajax 读取方式，演示了如何从服务端读取并展现数据，具有筛选、排序等功能以及页面 loading 效果。开发者可以自行接入其他数据处理方式。
注意，此示例使用 模拟接口，展示数据可能不准确，请打开网络面板查看请求。

import { HttpClient, HttpParams } from '@angular/common/http';
import { Component, Injectable, OnInit } from '@angular/core';
import { Observable } from 'rxjs';

@Injectable()
export class RandomUserService {
  randomUserUrl = 'https://api.randomuser.me/';

  getUsers(pageIndex: number = 1, pageSize: number = 10, sortField: string, sortOrder: string, genders: string[]): Observable<{}> {
    let params = new HttpParams()
    .append('page', `${pageIndex}`)
    .append('results', `${pageSize}`)
    .append('sortField', sortField)
    .append('sortOrder', sortOrder);
    genders.forEach(gender => {
      params = params.append('gender', gender);
    });
    return this.http.get(`${this.randomUserUrl}`, {
      params
    });
  }

  constructor(private http: HttpClient) {
  }
}

@Component({
  selector : 'nz-demo-table-ajax',
  providers: [ RandomUserService ],
  template : `
    <nz-table
      #ajaxTable
      nzShowSizeChanger
      [nzFrontPagination]="false"
      [nzData]="dataSet"
      [nzLoading]="loading"
      [nzTotal]="total"
      [(nzPageIndex)]="pageIndex"
      [(nzPageSize)]="pageSize"
      (nzPageIndexChange)="searchData()"
      (nzPageSizeChange)="searchData(true)">
      <thead (nzSortChange)="sort($event)" nzSingleSort>
        <tr>
          <th nzShowSort nzSortKey="name">Name</th>
          <th nzShowFilter [nzFilters]="filterGender" (nzFilterChange)="updateFilter($event)">Gender</th>
          <th nzShowSort nzSortKey="email"><span>Email</span></th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let data of ajaxTable.data">
          <td>{{data.name.first}} {{data.name.last}}</td>
          <td>{{data.gender}}</td>
          <td>{{data.email}}</td>
        </tr>
      </tbody>
    </nz-table>`
})
export class NzDemoTableAjaxComponent implements OnInit {
  pageIndex = 1;
  pageSize = 10;
  total = 1;
  dataSet = [];
  loading = true;
  sortValue = null;
  sortKey = null;
  filterGender = [
    { text: 'male', value: 'male' },
    { text: 'female', value: 'female' }
  ];
  searchGenderList: string[] = [];

  sort(sort: { key: string, value: string }): void {
    this.sortKey = sort.key;
    this.sortValue = sort.value;
    this.searchData();
  }

  constructor(private randomUserService: RandomUserService) {
  }

  searchData(reset: boolean = false): void {
    if (reset) {
      this.pageIndex = 1;
    }
    this.loading = true;
    this.randomUserService.getUsers(this.pageIndex, this.pageSize, this.sortKey, this.sortValue, this.searchGenderList).subscribe((data: any) => {
      this.loading = false;
      this.total = 200;
      this.dataSet = data.results;
    });
  }

  updateFilter(value: string[]): void {
    this.searchGenderList = value;
    this.searchData(true);
  }

  ngOnInit(): void {
    this.searchData();
  }
}


10.紧凑型
两种紧凑型的列表，小型列表只用于对话框内。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-table-size',
  template: `
    <h4>Middle size table</h4>
    <nz-table
      #middleTable
      nzSize="middle"
      [nzData]="data">
      <thead>
        <tr>
          <th>Name</th>
          <th>Age</th>
          <th>Address</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let data of middleTable.data">
          <td>{{data.name}}</td>
          <td>{{data.age}}</td>
          <td>{{data.address}}</td>
        </tr>
      </tbody>
    </nz-table>
    <h4>Small size table</h4>
    <nz-table
      #smallTable
      nzSize="small"
      [nzData]="data">
      <thead>
        <tr>
          <th>Name</th>
          <th>Age</th>
          <th>Address</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let data of smallTable.data">
          <td>{{data.name}}</td>
          <td>{{data.age}}</td>
          <td>{{data.address}}</td>
        </tr>
      </tbody>
    </nz-table>
  `,
  styles  : [
    `h4 { margin-bottom: 16px; }`
  ]
})
export class NzDemoTableSizeComponent {
  data = [
    {
      key    : '1',
      name   : 'John Brown',
      age    : 32,
      address: 'New York No. 1 Lake Park',
    },
    {
      key    : '2',
      name   : 'Jim Green',
      age    : 42,
      address: 'London No. 1 Lake Park',
    },
    {
      key    : '3',
      name   : 'Joe Black',
      age    : 32,
      address: 'Sidney No. 1 Lake Park',
    }
  ];
}

11.带边框
添加表格边框线，页头和页脚。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-table-bordered',
  template: `
    <nz-table
      #borderedTable
      nzBordered
      nzFooter="Footer"
      nzTitle="Header"
      [nzData]="dataSet">
      <thead>
        <tr>
          <th>Name</th>
          <th>Age</th>
          <th>Address</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let data of borderedTable.data">
          <td>{{data.name}}</td>
          <td>{{data.age}}</td>
          <td>{{data.address}}</td>
        </tr>
      </tbody>
    </nz-table>
  `
})
export class NzDemoTableBorderedComponent {
  dataSet = [
    {
      key    : '1',
      name   : 'John Brown',
      age    : 32,
      address: 'New York No. 1 Lake Park'
    },
    {
      key    : '2',
      name   : 'Jim Green',
      age    : 42,
      address: 'London No. 1 Lake Park'
    },
    {
      key    : '3',
      name   : 'Joe Black',
      age    : 32,
      address: 'Sidney No. 1 Lake Park'
    }
  ];
}

12.可展开
当表格内容较多不能一次性完全展示时，可以通过 td 上的 nzExpand 属性展开。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-table-expand',
  template: `
    <nz-table #nzTable [nzData]="dataSet" [nzPageSize]="10">
      <thead>
        <tr>
          <th nzShowExpand></th>
          <th>Name</th>
          <th>Age</th>
          <th>Address</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
        <ng-template ngFor let-data [ngForOf]="nzTable.data">
          <tr>
            <td nzShowExpand [(nzExpand)]="data.expand"></td>
            <td>{{data.name}}</td>
            <td>{{data.age}}</td>
            <td>{{data.address}}</td>
            <td><a href="#">Delete</a></td>
          </tr>
          <tr [nzExpand]="data.expand">
            <td></td>
            <td colspan="4">{{data.description}}</td>
          </tr>
        </ng-template>
      </tbody>
    </nz-table>`,
  styles  : []
})
export class NzDemoTableExpandComponent {
  dataSet = [
    {
      name       : 'John Brown',
      age        : 32,
      expand     : false,
      address    : 'New York No. 1 Lake Park',
      description: 'My name is John Brown, I am 32 years old, living in New York No. 1 Lake Park.'
    },
    {
      name       : 'Jim Green',
      age        : 42,
      expand     : false,
      address    : 'London No. 1 Lake Park',
      description: 'My name is Jim Green, I am 42 years old, living in London No. 1 Lake Park.'
    },
    {
      name       : 'Joe Black',
      age        : 32,
      expand     : false,
      address    : 'Sidney No. 1 Lake Park',
      description: 'My name is Joe Black, I am 32 years old, living in Sidney No. 1 Lake Park.'
    }
  ];
}


13.表格行/列合并
像 W3C标准 <table> 一样，使用 colspan 和 rowspan 合并行/列。
template: `
    <nz-table #nzTable [nzData]="dataSet" [nzPageSize]="10" nzBordered>
      <thead>
        <tr>
          <th>Name</th>
          <th>Age</th>
          <th colspan="2">Home phone</th>
          <th>Address</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let data of nzTable.data; index as i;">
          <td>{{data.name}}</td>
          <td [attr.colspan]="i==4?5:1">{{data.age}}</td>
          <td [attr.rowspan]="i==2?2:1" *ngIf="(i!=3)&&(i!=4)">{{data.tel}}</td>
          <td *ngIf="i!=4">{{data.phone}}</td>
          <td *ngIf="i!=4">{{data.address}}</td>
        </tr>
      </tbody>
    </nz-table>`,
  styles  : []

dataSet = [
    {
      key    : '1',
      name   : 'John Brown',
      age    : 32,
      tel    : '0571-22098909',
      phone  : 18889898989,
      address: 'New York No. 1 Lake Park',
    },
    {
      key    : '2',
      name   : 'Jim Green',
      tel    : '0571-22098333',
      phone  : 18889898888,
      age    : 42,
      address: 'London No. 1 Lake Park',
    },
    {
      key    : '3',
      name   : 'Joe Black',
      age    : 32,
      tel    : '0575-22098909',
      phone  : 18900010002,
      address: 'Sidney No. 1 Lake Park',
    },
    {
      key    : '4',
      name   : 'Jim Red',
      age    : 18,
      tel    : '0575-22098909',
      phone  : 18900010002,
      address: 'London No. 2 Lake Park',
    },
    {
      key    : '5',
      name   : 'Jake White',
      age    : 18,
      tel    : '0575-22098909',
      phone  : 18900010002,
      address: 'Dublin No. 2 Lake Park',
    }
  ];

14.树形数据展示
表格支持树形数据的展示，可以通过设置 nzIndentSize 以控制每一层的缩进宽度，本例子中提供了树与数组之间的转换函数，实际业务中请根据需求修改。
import { Component, OnInit } from '@angular/core';

export interface TreeNodeInterface {
  key: number;
  name: string;
  age: number;
  level: number;
  expand: boolean;
  address: string;
  children?: TreeNodeInterface[];
}

@Component({
  selector: 'nz-demo-table-expand-children',
  template: `
    <nz-table #nzTable [nzData]="data">
      <thead>
        <tr>
          <th nzWidth="40%">Name</th>
          <th nzWidth="30%">Age</th>
          <th>Address</th>
        </tr>
      </thead>
      <tbody>
        <ng-template ngFor let-data [ngForOf]="nzTable.data">
          <ng-template ngFor let-item [ngForOf]="expandDataCache[data.key]">
            <tr *ngIf="(item.parent&&item.parent.expand)||!(item.parent)">
              <td [nzIndentSize]="item.level*20" [nzShowExpand]="!!item.children" [(nzExpand)]="item.expand" (nzExpandChange)="collapse(expandDataCache[data.key],item,$event)">
                {{item.name}}
              </td>
              <td>{{item.age}}</td>
              <td>{{item.address}}</td>
            </tr>
          </ng-template>
        </ng-template>
      </tbody>
    </nz-table>`,
  styles  : []
})
export class NzDemoTableExpandChildrenComponent implements OnInit {
  data = [
    {
      key     : 1,
      name    : 'John Brown sr.',
      age     : 60,
      address : 'New York No. 1 Lake Park',
      children: [
        {
          key    : 11,
          name   : 'John Brown',
          age    : 42,
          address: 'New York No. 2 Lake Park'
        },
        {
          key     : 12,
          name    : 'John Brown jr.',
          age     : 30,
          address : 'New York No. 3 Lake Park',
          children: [ {
            key    : 121,
            name   : 'Jimmy Brown',
            age    : 16,
            address: 'New York No. 3 Lake Park'
          } ]
        },
        {
          key     : 13,
          name    : 'Jim Green sr.',
          age     : 72,
          address : 'London No. 1 Lake Park',
          children: [
            {
              key     : 131,
              name    : 'Jim Green',
              age     : 42,
              address : 'London No. 2 Lake Park',
              children: [
                {
                  key    : 1311,
                  name   : 'Jim Green jr.',
                  age    : 25,
                  address: 'London No. 3 Lake Park'
                },
                {
                  key    : 1312,
                  name   : 'Jimmy Green sr.',
                  age    : 18,
                  address: 'London No. 4 Lake Park'
                }
              ]
            }
          ]
        }
      ]
    },
    {
      key    : 2,
      name   : 'Joe Black',
      age    : 32,
      address: 'Sidney No. 1 Lake Park'
    }
  ];
  expandDataCache = {};

  collapse(array: TreeNodeInterface[], data: TreeNodeInterface, $event: boolean): void {
    if ($event === false) {
      if (data.children) {
        data.children.forEach(d => {
          const target = array.find(a => a.key === d.key);
          target.expand = false;
          this.collapse(array, target, false);
        });
      } else {
        return;
      }
    }
  }

  convertTreeToList(root: object): TreeNodeInterface[] {
    const stack = [];
    const array = [];
    const hashMap = {};
    stack.push({ ...root, level: 0, expand: false });

    while (stack.length !== 0) {
      const node = stack.pop();
      this.visitNode(node, hashMap, array);
      if (node.children) {
        for (let i = node.children.length - 1; i >= 0; i--) {
          stack.push({ ...node.children[ i ], level: node.level + 1, expand: false, parent: node });
        }
      }
    }

    return array;
  }

  visitNode(node: TreeNodeInterface, hashMap: object, array: TreeNodeInterface[]): void {
    if (!hashMap[ node.key ]) {
      hashMap[ node.key ] = true;
      array.push(node);
    }
  }

  ngOnInit(): void {
    this.data.forEach(item => {
      this.expandDataCache[ item.key ] = this.convertTreeToList(item);
    });
  }
}

15.固定表头
方便一页内展示大量数据。
需要指定 th 的 nzWidth 属性，否则列头和内容可能不对齐。
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'nz-demo-table-fixed-header',
  template: `
    <nz-table #nzTable [nzData]="dataSet" [nzPageSize]="50" [nzScroll]="{ y: '240px' }">
      <thead>
        <tr>
          <th nzWidth="150px">Name</th>
          <th nzWidth="150px">Age</th>
          <th>Address</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let data of nzTable.data">
          <td>{{data.name}}</td>
          <td>{{data.age}}</td>
          <td>{{data.address}}</td>
        </tr>
      </tbody>
    </nz-table>`,
  styles  : []
})
export class NzDemoTableFixedHeaderComponent implements OnInit {
  dataSet = [];

  ngOnInit(): void {
    for (let i = 0; i < 100; i++) {
      this.dataSet.push({
        name   : `Edward King ${i}`,
        age    : 32,
        address: `London, Park Lane no. ${i}`
      });
    }
  }
}

16.固定列
对于列数很多的数据，可以使用 nzLeft 和 nzRight 固定前后的列，横向滚动查看其它数据，需要和 nzScroll.x 配合使用。
固定列使用了 sticky 属性，浏览器支持情况可以参考这里。
若列头与内容不对齐或出现列重复，请指定 th 的宽度 nzWidth。
建议指定 nzScroll.x 为大于表格宽度的固定值或百分比。注意，且非固定列宽度之和不要超过 nzScroll.x。

import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-table-fixed-columns',
  template: `
    <nz-table #nzTable [nzData]="dataSet" [nzPageSize]="10" [nzScroll]="{x:'1300px'}">
      <thead>
        <tr>
          <th nzWidth="100px" nzLeft="0px">Full Name</th>
          <th nzWidth="100px" nzLeft="100px">Age</th>
          <th>Column 1</th>
          <th>Column 2</th>
          <th>Column 3</th>
          <th>Column 4</th>
          <th>Column 5</th>
          <th>Column 6</th>
          <th>Column 7</th>
          <th>Column 8</th>
          <th nzWidth="100px" nzRight="0px">Action</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let data of nzTable.data">
          <td nzLeft="0px">{{data.name}}</td>
          <td nzLeft="100px">{{data.age}}</td>
          <td>{{data.address}}</td>
          <td>{{data.address}}</td>
          <td>{{data.address}}</td>
          <td>{{data.address}}</td>
          <td>{{data.address}}</td>
          <td>{{data.address}}</td>
          <td>{{data.address}}</td>
          <td>{{data.address}}</td>
          <td nzRight="0px">
            <a>action</a>
          </td>
        </tr>
      </tbody>
    </nz-table>`,
  styles  : []
})
export class NzDemoTableFixedColumnsComponent {
  dataSet = [
    {
      key    : '1',
      name   : 'John Brown',
      age    : 32,
      address: 'New York Park',
    },
    {
      key    : '2',
      name   : 'Jim Green',
      age    : 40,
      address: 'London Park',
    }
  ];
}

17.固定头和列
适合同时展示有大量数据和数据列。
固定列使用了 sticky 属性，浏览器支持情况可以参考这里。
若列头与内容不对齐或出现列重复，请指定列的宽度 nzWidth。
建议指定 nzScroll.x 为大于表格宽度的固定值或百分比。注意，且非固定列宽度之和不要超过 nzScroll.x。
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'nz-demo-table-fixed-columns-header',
  template: `
    <nz-table #nzTable [nzData]="dataSet" [nzPageSize]="10" [nzScroll]="{ x:'1300px',y: '240px' }">
      <thead>
        <tr>
          <th nzWidth="100px" nzLeft="0px">Full Name</th>
          <th nzWidth="100px" nzLeft="100px">Age</th>
          <th>Column 1</th>
          <th>Column 2</th>
          <th>Column 3</th>
          <th>Column 4</th>
          <th>Column 5</th>
          <th>Column 6</th>
          <th>Column 7</th>
          <th>Column 8</th>
          <th nzWidth="100px" nzRight="0px">Action</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let data of nzTable.data">
          <td nzLeft="0px">{{data.name}}</td>
          <td nzLeft="100px">{{data.age}}</td>
          <td>{{data.address}}</td>
          <td>{{data.address}}</td>
          <td>{{data.address}}</td>
          <td>{{data.address}}</td>
          <td>{{data.address}}</td>
          <td>{{data.address}}</td>
          <td>{{data.address}}</td>
          <td>{{data.address}}</td>
          <td nzRight="0px">
            <a>action</a>
          </td>
        </tr>
      </tbody>
    </nz-table>`,
  styles  : []
})
export class NzDemoTableFixedColumnsHeaderComponent implements OnInit {
  dataSet = [];

  ngOnInit(): void {
    for (let i = 0; i < 100; i++) {
      this.dataSet.push({
        name   : `Edward King ${i}`,
        age    : 32,
        address: `London, Park Lane no. ${i}`
      });
    }
  }
}

18.表头分组
当使用分组表头时，th 的 nzWidth 方式不再适用，使用 nzWidthConfig 来设定每个分组的宽度
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'nz-demo-table-grouping-columns',
  template: `
    <nz-table
      #groupingTable
      [nzData]="displayData"
      nzBordered
      nzSize="middle"
      [nzWidthConfig]="['100px','200px','200px','100px','100px',null,null,'60px']"
      [nzScroll]="{ x:'130%',y: '240px' }">
      <thead>
        <tr>
          <th rowspan="4" nzLeft="0px" nzShowFilter [nzFilters]="filterName" (nzFilterChange)="search($event)">Name</th>
          <th colspan="4">Other</th>
          <th colspan="2">Company</th>
          <th rowspan="4" nzRight="0px">Gender</th>
        </tr>
        <tr>
          <th rowspan="3" nzShowSort [(nzSort)]="sortValue" (nzSortChange)="search(searchName)">Age</th>
          <th colspan="3">Address</th>
          <th rowspan="3">Company Address</th>
          <th rowspan="3">Company Name</th>
        </tr>
        <tr>
          <th rowspan="2">Street</th>
          <th colspan="2">Block</th>
        </tr>
        <tr>
          <th>Building</th>
          <th>Door No.</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let data of groupingTable.data">
          <td nzLeft="0px">{{data.name}}</td>
          <td>{{data.age}}</td>
          <td>{{data.street}}</td>
          <td>{{data.building}}</td>
          <td>{{data.number}}</td>
          <td>{{data.companyAddress}}</td>
          <td>{{data.companyName}}</td>
          <td nzRight="0px">{{data.gender}}</td>
        </tr>
      </tbody>
    </nz-table>`,
  styles  : []
})
export class NzDemoTableGroupingColumnsComponent implements OnInit {
  displayData = [];
  data = [];
  sortValue = null;
  filterName = [
    { text: 'Joe', value: 'Joe' },
    { text: 'John', value: 'John' }
  ];
  searchName = [];

  search(searchName: string[]): void {
    this.searchName = searchName;
    const filterFunc = (item) => {
      return this.searchName.length ? this.searchName.some(name => item.name.indexOf(name) !== -1) : true;
    };
    const data = this.data.filter(item => filterFunc(item));
    this.displayData = data.sort((a, b) => (this.sortValue === 'ascend') ? (a.age > b.age ? 1 : -1) : (b.age > a.age ? 1 : -1));
  }

  ngOnInit(): void {
    for (let i = 0; i < 100; i++) {
      this.displayData.push({
        name          : 'John Brown',
        age           : i + 1,
        street        : 'Lake Park',
        building      : 'C',
        number        : 2035,
        companyAddress: 'Lake Street 42',
        companyName   : 'SoftLake Co',
        gender        : 'M'
      });
    }
    this.data = [ ...this.displayData ];
  }
}

19.可编辑单元格（有bug 修改时候报错 官网demo也是）
定制带单元格编辑功能的表格，自由操作单元格内容。
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'nz-demo-table-edit-cell',
  template: `
    <button nz-button (click)="addRow()" class="editable-add-btn">Add</button>
    <nz-table
      #editRowTable
      nzBordered
      [nzData]="dataSet">
      <thead>
        <tr>
          <th nzWidth="30%">Name</th>
          <th>Age</th>
          <th>Address</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let data of editRowTable.data">
          <td>
            <div class="editable-cell">
              <div class="editable-cell-text-wrapper">
                <ng-container *ngIf="!editCache[data.key].edit">
                  {{data.name}}
                  <i nz-icon type="edit" class="editable-cell-icon" (click)="startEdit(data.key)"></i>
                </ng-container>
                <ng-container *ngIf="editCache[data.key].edit">
                  <input type="text" nz-input [(ngModel)]="editCache[data.key].name">
                  <i nz-icon type="check editable-cell-icon-check" (click)="finishEdit(data.key)"></i>
                </ng-container>
              </div>
            </div>
          </td>
          <td>{{data.age}}</td>
          <td>{{data.address}}</td>
          <td>
            <nz-popconfirm [nzTitle]="'Sure to delete?'" (nzOnConfirm)="deleteRow(data.key)">
              <a nz-popconfirm>Delete</a>
            </nz-popconfirm>
          </td>
        </tr>
      </tbody>
    </nz-table>
  `,
  styles  : [
      `
      .editable-cell {
        position: relative;
      }

      .editable-cell-input-wrapper,
      .editable-cell-text-wrapper {
        padding-right: 24px;
      }

      .editable-cell-text-wrapper {
        padding: 5px 24px 5px 5px;
      }

      .editable-cell-icon,
      .editable-cell-icon-check {
        position: absolute;
        right: 0;
        width: 20px;
        cursor: pointer;
      }

      .editable-cell-icon {
        line-height: 18px;
        display: none;
      }

      .editable-cell-icon-check {
        line-height: 28px;
      }

      .editable-cell:hover .editable-cell-icon {
        display: inline-block;
      }

      .editable-cell-icon:hover,
      .editable-cell-icon-check:hover {
        color: #108ee9;
      }

      .editable-add-btn {
        margin-bottom: 8px;
      }
    `
  ]
})
export class NzDemoTableEditCellComponent implements OnInit {
  i = 1;
  editCache = {};
  dataSet = [
    {
      key    : '0',
      name   : 'Edward King 0',
      age    : '32',
      address: 'London, Park Lane no. 0'
    },
    {
      key    : '1',
      name   : 'Edward King 1',
      age    : '32',
      address: 'London, Park Lane no. 1'
    }
  ];

  addRow(): void {
    this.i++;
    this.dataSet = [ ...this.dataSet, {
      key    : `${this.i}`,
      name   : `Edward King ${this.i}`,
      age    : '32',
      address: `London, Park Lane no. ${this.i}`
    } ];
    this.updateEditCache();
  }

  deleteRow(i: string): void {
    const dataSet = this.dataSet.filter(d => d.key !== i);
    this.dataSet = dataSet;
  }

  startEdit(key: string): void {
    this.editCache[ key ].edit = true;
  }

  finishEdit(key: string): void {
    this.editCache[ key ].edit = false;
    this.dataSet.find(item => item.key === key).name = this.editCache[ key ].name;
  }

  updateEditCache(): void {
    this.dataSet.forEach(item => {
      if (!this.editCache[ item.key ]) {
        this.editCache[ item.key ] = {
          edit: false,
          name: item.name
        };
      }
    });
  }

  ngOnInit(): void {
    this.updateEditCache();
  }
}

19.可编辑行
定制带行编辑功能的表格，自由操作行内容。
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'nz-demo-table-edit-row',
  template: `
    <nz-table
      #editRowTable
      nzBordered
      [nzData]="dataSet">
      <thead>
        <tr>
          <th nzWidth="25%">Name</th>
          <th nzWidth="15%">Age</th>
          <th nzWidth="40%">Address</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let data of editRowTable.data">
          <td>
            <div class="editable-cell">
              <div class="editable-cell-text-wrapper">
                <ng-container *ngIf="!editCache[data.key].edit">
                  {{data.name}}
                </ng-container>
                <ng-container *ngIf="editCache[data.key].edit">
                  <input type="text" nz-input [(ngModel)]="editCache[data.key].data.name">
                </ng-container>
              </div>
            </div>
          </td>
          <td>
            <ng-container *ngIf="!editCache[data.key].edit">
              {{data.age}}
            </ng-container>
            <ng-container *ngIf="editCache[data.key].edit">
              <input type="text" nz-input [(ngModel)]="editCache[data.key].data.age">
            </ng-container>
          </td>
          <td>
            <ng-container *ngIf="!editCache[data.key].edit">
              {{data.address}}
            </ng-container>
            <ng-container *ngIf="editCache[data.key].edit">
              <input type="text" nz-input [(ngModel)]="editCache[data.key].data.address">
            </ng-container>
          </td>
          <td>
            <div class="editable-row-operations">
              <ng-container *ngIf="!editCache[data.key].edit">
                <a (click)="startEdit(data.key)">Edit</a>
              </ng-container>
              <ng-container *ngIf="editCache[data.key].edit">
                <a (click)="saveEdit(data.key)">Save</a>
                <nz-popconfirm [nzTitle]="'Sure to cancel?'" (nzOnConfirm)="cancelEdit(data.key)">
                  <a nz-popconfirm>Cancel</a>
                </nz-popconfirm>
              </ng-container>
            </div>
          </td>
        </tr>
      </tbody>
    </nz-table>
  `,
  styles  : [
    `
      .editable-row-operations a {
        margin-right: 8px;
      }
    `
  ]
})
export class NzDemoTableEditRowComponent implements OnInit {
  i = 1;
  editCache = {};
  dataSet = [];

  startEdit(key: string): void {
    this.editCache[ key ].edit = true;
  }

  cancelEdit(key: string): void {
    this.editCache[ key ].edit = false;
  }

  saveEdit(key: string): void {
    const index = this.dataSet.findIndex(item => item.key === key);
    Object.assign(this.dataSet[ index ], this.editCache[ key ].data);
    // this.dataSet[ index ] = this.editCache[ key ].data;
    this.editCache[ key ].edit = false;
  }

  updateEditCache(): void {
    this.dataSet.forEach(item => {
      if (!this.editCache[ item.key ]) {
        this.editCache[ item.key ] = {
          edit: false,
          data: { ...item }
        };
      }
    });
  }

  ngOnInit(): void {
    for (let i = 0; i < 100; i++) {
      this.dataSet.push({
        key    : i.toString(),
        name   : `Edrward ${i}`,
        age    : 32,
        address: `London Park no. ${i}`
      });
    }
    this.updateEditCache();
  }
}

20.嵌套子表格
展示每行数据更详细的信息。
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'nz-demo-table-nested-table',
  template: `
    <nz-table #nestedTable [nzData]="nestedTableData" [nzPageSize]="10">
      <thead>
        <tr>
          <th nzShowExpand></th>
          <th>Name</th>
          <th>Platform</th>
          <th>Version</th>
          <th>Upgraded</th>
          <th>Creator</th>
          <th>Date</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
        <ng-template ngFor let-data [ngForOf]="nestedTable.data">
          <tr>
            <td nzShowExpand [(nzExpand)]="data.expand"></td>
            <td>{{data.name}}</td>
            <td>{{data.platform}}</td>
            <td>{{data.version}}</td>
            <td>{{data.upgradeNum}}</td>
            <td>{{data.creator}}</td>
            <td>{{data.createdAt}}</td>
            <td>
              <a>Publish</a>
            </td>
          </tr>
          <tr [nzExpand]="data.expand">
            <td></td>
            <td colspan="7">
              <nz-table #innerTable [nzData]="innerTableData" nzSize="middle" [nzShowPagination]="false">
                <thead>
                  <tr>
                    <th>Date</th>
                    <th>Name</th>
                    <th>Status</th>
                    <th>Upgrade Status</th>
                    <th>Action</th>
                  </tr>
                </thead>
                <tbody>
                  <tr *ngFor="let data of innerTable.data">
                    <td>{{data.date}}</td>
                    <td>{{data.name}}</td>
                    <td>
                      <nz-badge [nzStatus]="'success'" [nzText]="'Finished'"></nz-badge>
                    </td>
                    <td>{{data.upgradeNum}}</td>
                    <td>
                      <span class="table-operation">
                        <nz-dropdown>
                          <a nz-dropdown class="operation">
                            Pause <i nz-icon type="down"></i>
                          </a>
                          <ul nz-menu>
                            <li nz-menu-item>
                              <a>Action 1</a>
                            </li>
                            <li nz-menu-item>
                              <a>Action 2</a>
                            </li>
                          </ul>
                        </nz-dropdown>
                        <a class="operation">Stop</a>
                        <a>More</a>
                      </span>
                    </td>
                  </tr>
                </tbody>
              </nz-table>
            </td>
          </tr>
        </ng-template>
      </tbody>
    </nz-table>
  `,
  styles  : [
      `

      :host ::ng-deep .ant-table-expanded-row > td:last-child {
        padding: 0 48px 0 8px;
      }

      :host ::ng-deep .ant-table-expanded-row > td:last-child .ant-table-thead th {
        border-bottom: 1px solid #e9e9e9;
      }

      :host ::ng-deep .ant-table-expanded-row > td:last-child .ant-table-thead th:first-child {
        padding-left: 0;
      }

      :host ::ng-deep .ant-table-expanded-row > td:last-child .ant-table-row td:first-child {
        padding-left: 0;
      }

      :host ::ng-deep .ant-table-expanded-row .ant-table-row:last-child td {
        border: none;
      }

      :host ::ng-deep .ant-table-expanded-row .ant-table-thead > tr > th {
        background: none;
      }

      :host ::ng-deep .table-operation a.operation {
        margin-right: 24px;
      }
    `
  ]
})
export class NzDemoTableNestedTableComponent implements OnInit {
  nestedTableData = [];
  innerTableData = [];

  ngOnInit(): void {
    for (let i = 0; i < 3; ++i) {
      this.nestedTableData.push({
        key       : i,
        name      : 'Screem',
        platform  : 'iOS',
        version   : '10.3.4.5654',
        upgradeNum: 500,
        creator   : 'Jack',
        createdAt : '2014-12-24 23:12:00',
        expand    : false
      });
    }
    for (let i = 0; i < 3; ++i) {
      this.innerTableData.push({
        key       : i,
        date      : '2014-12-24 23:12:00',
        name      : 'This is production name',
        upgradeNum: 'Upgraded: 56',
      });
    }
  }
}


21.动态控制表格属性
选择不同配置组合查看效果。
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'nz-demo-table-dynamic-settings',
  template: `
    <div class="components-table-demo-control-bar">
      <form nz-form nzLayout="inline">
        <nz-form-item>
          <nz-form-label>
            <label>Bordered</label>
          </nz-form-label>
          <nz-form-control>
            <nz-switch [(ngModel)]="bordered" name="bordered"></nz-switch>
          </nz-form-control>
        </nz-form-item>
        <nz-form-item>
          <nz-form-label>
            <label>Loading</label>
          </nz-form-label>
          <nz-form-control>
            <nz-switch [(ngModel)]="loading" name="loading"></nz-switch>
          </nz-form-control>
        </nz-form-item>
        <nz-form-item>
          <nz-form-label>
            <label>Pagination</label>
          </nz-form-label>
          <nz-form-control>
            <nz-switch [(ngModel)]="pagination" name="pagination"></nz-switch>
          </nz-form-control>
        </nz-form-item>
        <nz-form-item>
          <nz-form-label>
            <label>Title</label>
          </nz-form-label>
          <nz-form-control>
            <nz-switch [(ngModel)]="title" name="title"></nz-switch>
          </nz-form-control>
        </nz-form-item>
        <nz-form-item>
          <nz-form-label>
            <label>Column Header</label>
          </nz-form-label>
          <nz-form-control>
            <nz-switch [(ngModel)]="header" name="header"></nz-switch>
          </nz-form-control>
        </nz-form-item>
        <nz-form-item>
          <nz-form-label>
            <label>Footer</label>
          </nz-form-label>
          <nz-form-control>
            <nz-switch [(ngModel)]="footer" name="footer"></nz-switch>
          </nz-form-control>
        </nz-form-item>
        <nz-form-item>
          <nz-form-label>
            <label>Expandable</label>
          </nz-form-label>
          <nz-form-control>
            <nz-switch [(ngModel)]="expandable" name="expandable"></nz-switch>
          </nz-form-control>
        </nz-form-item>
        <nz-form-item>
          <nz-form-label>
            <label>Checkbox</label>
          </nz-form-label>
          <nz-form-control>
            <nz-switch [(ngModel)]="checkbox" name="checkbox"></nz-switch>
          </nz-form-control>
        </nz-form-item>
        <nz-form-item>
          <nz-form-label>
            <label>Fixed Header</label>
          </nz-form-label>
          <nz-form-control>
            <nz-switch [(ngModel)]="fixHeader" name="fixHeader"></nz-switch>
          </nz-form-control>
        </nz-form-item>
        <nz-form-item>
          <nz-form-label>
            <label>No Result</label>
          </nz-form-label>
          <nz-form-control>
            <nz-switch [(ngModel)]="noResult" (ngModelChange)="noResultChange($event)" name="noResult"></nz-switch>
          </nz-form-control>
        </nz-form-item>
        <nz-form-item>
          <nz-form-label>
            <label>Simple Pagination</label>
          </nz-form-label>
          <nz-form-control>
            <nz-switch [(ngModel)]="simple" name="simple"></nz-switch>
          </nz-form-control>
        </nz-form-item>
        <nz-form-item>
          <nz-form-label>
            <label>Size</label>
          </nz-form-label>
          <nz-form-control>
            <nz-radio-group [(ngModel)]="size" name="size">
              <label nz-radio-button nzValue="default">Default</label>
              <label nz-radio-button nzValue="middle">Middle</label>
              <label nz-radio-button nzValue="small">Small</label>
            </nz-radio-group>
          </nz-form-control>
        </nz-form-item>
      </form>
    </div>
    <nz-table
      #dynamicTable
      (nzCurrentPageDataChange)="currentPageDataChange($event)"
      [nzScroll]="fixHeader?{ y: '240px' }:null"
      [nzData]="dataSet"
      [nzBordered]="bordered"
      [nzSimple]="simple"
      [nzLoading]="loading"
      [nzFrontPagination]="pagination"
      [nzShowPagination]="pagination"
      [nzFooter]="footer?'Here is Footer':null"
      [nzTitle]="title?'Here is Title':null"
      [nzSize]="size">
      <thead>
        <tr *ngIf="header">
          <th nzWidth="50px" nzShowExpand *ngIf="expandable"></th>
          <th nzWidth="62px" nzShowCheckbox *ngIf="checkbox" [(nzChecked)]="allChecked" [nzIndeterminate]="indeterminate" (nzCheckedChange)="checkAll($event)"></th>
          <th nzWidth="150px">Name</th>
          <th nzWidth="70px">Age</th>
          <th>Address</th>
          <th nzWidth="260px">Action</th>
        </tr>
      </thead>
      <tbody>
        <ng-template ngFor let-data [ngForOf]="dynamicTable.data">
          <tr>
            <td nzShowExpand *ngIf="expandable" [(nzExpand)]="data.expand"></td>
            <td nzShowCheckbox *ngIf="checkbox" [(nzChecked)]="data.checked" (nzCheckedChange)="refreshStatus()"></td>
            <td>{{data.name}}</td>
            <td>{{data.age}}</td>
            <td>{{data.address}}</td>
            <td>
              <a href="#">Action 一 {{data.name}}</a>
              <nz-divider nzType="vertical"></nz-divider>
              <a href="#">Delete</a>
            </td>
          </tr>
          <tr [nzExpand]="data.expand&&expandable">
            <td></td>
            <td [attr.colspan]="checkbox?5:4">{{data.description}}</td>
          </tr>
        </ng-template>
      </tbody>
    </nz-table>`,
  styles  : [
      `
      .components-table-demo-control-bar {
        margin-bottom: 10px;
      }

      .components-table-demo-control-bar ::ng-deep .ant-form-item {
        margin-right: 15px;
        margin-bottom: 8px;
      }
    `
  ]
})
export class NzDemoTableDynamicSettingsComponent implements OnInit {
  dataSet = [];
  bordered = false;
  loading = false;
  pagination = true;
  header = true;
  title = true;
  footer = true;
  fixHeader = false;
  size = 'small';
  expandable = true;
  checkbox = true;
  allChecked = false;
  indeterminate = false;
  displayData = [];
  simple = false;
  noResult = false;

  currentPageDataChange($event: Array<{ name: string; age: number; address: string; checked: boolean; expand: boolean; description: string; }>): void {
    this.displayData = $event;
    this.refreshStatus();
  }

  refreshStatus(): void {
    const validData = this.displayData.filter(value => !value.disabled);
    const allChecked = validData.length > 0 && validData.every(value => value.checked === true);
    const allUnChecked = validData.every(value => !value.checked);
    this.allChecked = allChecked;
    this.indeterminate = (!allChecked) && (!allUnChecked);
  }

  checkAll(value: boolean): void {
    this.displayData.forEach(data => {
      if (!data.disabled) {
        data.checked = value;
      }
    });
    this.refreshStatus();
  }

  ngOnInit(): void {
    for (let i = 1; i <= 20; i++) {
      this.dataSet.push({
        name       : 'John Brown',
        age        : `${i}2`,
        address    : `New York No. ${i} Lake Park`,
        description: `My name is John Brown, I am ${i}2 years old, living in New York No. ${i} Lake Park.`,
        checked    : false,
        expand     : false
      });
    }
  }

  noResultChange(status: boolean): void {
    this.dataSet = [];
    if (!status) {
      this.ngOnInit();
    }
  }
}

22.API#
nz-tableCOMPONENT#
参数	说明	类型	默认值
[nzData]	数据数组	any[]	-
[nzFrontPagination]	是否在前端对数据进行分页，如果在服务器分页数据或者需要在前端显示全部数据时传入 false	boolean	true
[nzTotal]	当前总数据，在服务器渲染时需要传入	number	-
[nzPageIndex]	当前页码，可双向绑定	number	-
[nzPageSize]	每页展示多少数据，可双向绑定	number	-
[nzShowPagination]	是否显示分页器	boolean	true
[nzBordered]	是否展示外边框和列边框	boolean	false
[nzWidthConfig]	表头分组时指定每列宽度，与 th 的 nzWidth 不可混用	string[]	-
[nzSize]	正常或迷你类型，default or small or middle	string	default
[nzLoading]	页面是否加载中	boolean	false
[nzLoadingDelay]	延迟显示加载效果的时间（防止闪烁）	number	0
[nzScroll]	横向或纵向支持滚动，也可用于指定滚动区域的宽高度：{ x: "300px", y: "300px" }	object	-
[nzTitle]	表格标题	string丨TemplateRef<void>	-
[nzFooter]	表格尾部	string丨TemplateRef<void>	-
[nzNoResult]	无数据时显示内容	string丨TemplateRef<void>	-
[nzPageSizeOptions]	页数选择器可选值	number[]	[ 10, 20, 30, 40, 50 ]
[nzShowQuickJumper]	是否可以快速跳转至某页	boolean	false
[nzShowSizeChanger]	是否可以改变 nzPageSize	boolean	false
[nzShowTotal]	用于显示数据总量和当前数据范围，与 Pagination 用法相同	TemplateRef<{ $implicit: number, range: [ number, number ] }>	-
[nzHideOnSinglePage]	只有一页时是否隐藏分页器	boolean	false
[nzSimple]	当添加该属性时，显示为简单分页	boolean	-
(nzPageIndexChange)	当前页码改版时的回调函数	EventEmitter<number>	-
(nzPageSizeChange)	页数改变时的回调函数	EventEmitter<number>	-
(nzCurrentPageDataChange)	当前页面展示数据改变的回调函数	EventEmitter<any[]>	-
th#
勾选属性

参数	说明	类型	默认值
[nzShowCheckbox]	是否添加checkbox	boolean	-
[nzDisabled]	checkbox 是否禁用	boolean	-
[nzIndeterminate]	checkbox indeterminate 状态	boolean	-
[nzChecked]	checkbox 是否被选中，可双向绑定	boolean	-
(nzCheckedChange)	选中的回调	EventEmitter<boolean>	-
下拉选择属性

参数	说明	类型	默认值
[nzShowRowSelection]	是否显示下拉选择	boolean	-
[nzSelections]	下拉选择的内容 text 及回调函数 onSelect	Array<{ text: string, onSelect: any }>	-
排序属性

参数	说明	类型	默认值
[nzShowSort]	是否显示排序	boolean	-
[nzSortKey]	排序key，非受控模式使用，与 thead 中 nzSortChange 配合使用	string	-
[nzSort]	当前排序状态，受控模式使用，可双向绑定	'descend'丨'ascend'丨null	null
(nzSortChange)	排序状态改变回调，受控模式使用	EventEmitter<'descend'丨'ascend'丨null>	-
过滤属性

参数	说明	类型	默认值
[nzShowFilter]	是否显示过滤	boolean	-
[nzFilters]	过滤器内容, 显示数据 text，回调函数传出 value，设置 byDefault 以默认应用过滤规则	Array<{ text: string; value: any; byDefault?: boolean }>	-
[nzFilterMultiple]	是否为多选过滤器	boolean	true
(nzFilterChange)	过滤器内容选择的 value 数据回调	EventEmitter<any[]丨 any>	-
样式属性

参数	说明	类型	默认值
[nzWidth]	指定该列宽度，表头未分组时可用	string	-
[nzLeft]	左侧距离，用于固定左侧列	string	-
[nzRight]	右侧距离，用于固定右侧列	string	-
其他

参数	说明	类型	默认值
[nzExpand]	当前列是否包含展开按钮	boolean	-
td#
勾选属性

参数	说明	类型	默认值
[nzShowCheckbox]	是否添加checkbox	boolean	-
[nzDisabled]	checkbox 是否禁用	boolean	-
[nzIndeterminate]	checkbox indeterminate 状态	boolean	-
[nzChecked]	checkbox 是否被选中，可双向绑定	boolean	-
(nzCheckedChange)	选中的回调	EventEmitter<boolean>	-
展开属性

参数	说明	类型	默认值
[nzShowExpand]	是否显示展开按钮	boolean	-
[nzExpand]	当前展开按钮状态，可双向绑定	boolean	-
(nzExpandChange)	当前展开按钮状态改变回调函数	EventEmitter<boolean>	-
样式属性

参数	说明	类型	默认值
[nzLeft]	左侧距离，用于固定左侧列	string	-
[nzRight]	右侧距离，用于固定右侧列	string	-
其他

参数	说明	类型	默认值
[nzIndentSize]	展示树形数据时，每层缩进的宽度，以 px 为单位	number	-
thead#
参数	说明	类型	默认值
[nzSingleSort]	是否单列排序模式，非受控排序下使用	boolean	false
(nzSortChange)	排序改变时的回调函数，需要与 th 上的 nzSortKey 同时使用，非受控排序下使用	EventEmitter<{ nzSortKey: string, value: 'descend'丨'ascend'丨null }>	-
nz-trCOMPONENT#
参数	说明	类型	默认值
[nzExpand]	当前列是否展开，与 td 上的 nzExpand 属性配合使用	boolean	-
注意#
按照 Angular 的设计，当需要对 nzData 中的数据进行增删时需要使用以下操作，使用 push 或者 splice 修改 nzData 的数据不会生效

// 增加数据
this.dataSet = [ ...this.dataSet, {
  key    : `${this.i}`,
  name   : `Edward King ${this.i}`,
  age    : '32',
  address: `London, Park Lane no. ${this.i}`
}];
// 删除数据
this.dataSet = this.dataSet.filter(d => d.key !== i);


九.Tabs标签页
选项卡切换组件。
Ant Design 依次提供了三级选项卡，分别用于不同的场景。
卡片式的页签，提供可关闭的样式，常用于容器顶部。
标准线条式页签，用于容器内部的主功能切换，这是最常用的 Tabs。
RadioButton 可作为更次级的页签来使用。

1.基本
默认选中第一项。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-tabs-basic',
  template: `
    <nz-tabset>
      <nz-tab nzTitle="Tab 1">
        Content of Tab Pane 1
      </nz-tab>
      <nz-tab nzTitle="Tab 2">
        Content of Tab Pane 2
      </nz-tab>
      <nz-tab nzTitle="Tab 3">
        Content of Tab Pane 3
      </nz-tab>
    </nz-tabset>`
})
export class NzDemoTabsBasicComponent {
}

2.禁用
禁用某一项。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-tabs-disabled',
  template: `
    <nz-tabset>
      <nz-tab
        *ngFor="let tab of tabs"
        [nzTitle]="tab.name"
        [nzDisabled]="tab.disabled">
        {{ tab.name }}
      </nz-tab>
    </nz-tabset>`
})
export class NzDemoTabsDisabledComponent {
  tabs = [
    {
      name    : 'Tab 1',
      disabled: false
    },
    {
      name    : 'Tab 2',
      disabled: true
    },
    {
      name    : 'Tab 3',
      disabled: false
    }
  ];
}

3.图标
有图标的标签。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-tabs-icon',
  template: `
    <nz-tabset>
      <nz-tab *ngFor="let tab of tabs" [nzTitle]="titleTemplate">
        <ng-template #titleTemplate>
          <i nz-icon [type]="tab.icon"></i>{{ tab.name }}
        </ng-template>
        {{ tab.name }}
      </nz-tab>
    </nz-tabset>`
})
export class NzDemoTabsIconComponent {
  tabs = [
    {
      active: true,
      name  : 'Tab 1',
      icon  : 'apple'
    },
    {
      active: false,
      name  : 'Tab 2',
      icon  : 'android'
    }
  ];
}

4.滑动
可以左右、上下滑动，容纳更多标签。
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'nz-demo-tabs-slide',
  template: `
    <nz-radio-group [(ngModel)]="nzTabPosition">
      <label nz-radio-button [nzValue]="'top'">Horizontal</label>
      <label nz-radio-button [nzValue]="'left'">Vertical</label>
    </nz-radio-group>
    <nz-input-number style="float:right;" [nzMin]="0" [nzMax]="10" [(ngModel)]="selectedIndex"></nz-input-number>
    <nz-tabset
      style="height:220px;"
      [nzTabPosition]="nzTabPosition"
      [(nzSelectedIndex)]="selectedIndex"
      (nzSelectChange)="log([$event])">
      <nz-tab
        *ngFor="let tab of tabs"
        [nzTitle]="tab.name"
        (nzSelect)="log(['select',tab])"
        (nzClick)="log(['click',tab])"
        (nzDeselect)="log(['deselect',tab])">
        {{ tab.content }}
      </nz-tab>
    </nz-tabset>`,
  styles  : []
})
export class NzDemoTabsSlideComponent implements OnInit {
  tabs = [];
  nzTabPosition = 'top';
  selectedIndex = 0;

  /* tslint:disable-next-line:no-any */
  log(args: any[]): void {
    console.log(args);
  }

  ngOnInit(): void {
    for (let i = 0; i < 11; i++) {
      this.tabs.push({
        name   : `Tab ${i}`,
        content: `Content of tab ${i}`
      });
    }
  }
}

5.附加内容
可以在页签右边添加附加操作。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-tabs-extra',
  template: `
    <nz-tabset [nzTabBarExtraContent]="extraTemplate">
      <nz-tab *ngFor="let tab of tabs" [nzTitle]="'Tab' + tab ">
        Content of tab {{ tab }}
      </nz-tab>
    </nz-tabset>
    <ng-template #extraTemplate>
      <button nz-button>Extra Action</button>
    </ng-template>
  `
})
export class NzDemoTabsExtraComponent {
  tabs = [ 1, 2, 3 ];
}

6.大小
大号页签用在页头区域，小号用在弹出框等较狭窄的容器内。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-tabs-size',
  template: `
    <nz-radio-group [(ngModel)]="size">
      <label nz-radio-button nzValue="small"><span>Small</span></label>
      <label nz-radio-button nzValue="default"><span>Default</span></label>
      <label nz-radio-button nzValue="large"><span>Large</span></label>
    </nz-radio-group>
    <nz-tabset [nzSize]="size">
      <nz-tab *ngFor="let tab of tabs" [nzTitle]="'Tab' + tab">
        Content of tab {{ tab }}
      </nz-tab>
    </nz-tabset>`,
  styles  : []
})
export class NzDemoTabsSizeComponent {
  size = 'small';
  tabs = [ 1, 2, 3 ];
}

7.位置
有四个位置，nzTabPosition="left|right|top|bottom"。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-tabs-position',
  template: `
    <div style="margin-bottom: 16px;">
      Tab position：
      <nz-select [(ngModel)]="position" style="width: 80px;">
        <nz-option
          *ngFor="let option of options"
          [nzLabel]="option.label"
          [nzValue]="option.value">
        </nz-option>
      </nz-select>
    </div>
    <nz-tabset [nzTabPosition]="position" [nzType]="'line'">
      <nz-tab *ngFor="let tab of tabs" [nzTitle]="'Tab'+ tab">
        Content of tab {{ tab }}
      </nz-tab>
    </nz-tabset>`,
  styles  : []
})
export class NzDemoTabsPositionComponent {
  position = 'top';
  tabs = [ 1, 2, 3 ];
  options = [
    { value: 'top', label: 'top' },
    { value: 'left', label: 'left' },
    { value: 'right', label: 'right' },
    { value: 'bottom', label: 'bottom' }
  ];
}

8.卡片式页签
另一种样式的页签，不提供对应的垂直样式。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-tabs-card',
  template: `
    <nz-tabset [nzTabPosition]="'top'" [nzType]="'card'">
      <nz-tab *ngFor="let tab of tabs" [nzTitle]="'Tab' + tab ">
        Content of Tab Pane {{ tab }}
      </nz-tab>
    </nz-tabset>`,
  styles  : []
})
export class NzDemoTabsCardComponent {
  tabs = [ 1, 2, 3 ];
}

9.新增和关闭页签
只有卡片样式的页签支持新增和关闭选项。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-tabs-editable-card',
  template: `
    <nz-tabset [nzType]="'card'" [nzTabBarExtraContent]="extraTemplate">
      <nz-tab *ngFor="let tab of tabs" [nzTitle]="titleTemplate">
        <ng-template #titleTemplate>
          <div>
            {{ tab }}
            <i nz-icon type="close" (click)="closeTab(tab)" class="ant-tabs-close-x"></i>
          </div>
        </ng-template>
        Content of {{ tab }}
      </nz-tab>
    </nz-tabset>
    <ng-template #extraTemplate>
      <i class="ant-tabs-new-tab" nz-icon type="plus" (click)="newTab()"></i>
    </ng-template>
  `
})
export class NzDemoTabsEditableCardComponent {
  tabs = [ 'Tab 1', 'Tab 2' ];

  closeTab(tab: string): void {
    this.tabs.splice(this.tabs.indexOf(tab), 1);
  }

  newTab(): void {
    this.tabs.push('New Tab');
  }
}

10.卡片式页签容器
用于容器顶部，需要一点额外的样式覆盖。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-tabs-card-top',
  template: `
    <div class="card-container">
      <nz-tabset [nzTabPosition]="'top'" [nzType]="'card'">
        <nz-tab *ngFor="let tab of tabs" [nzTitle]="'Tab Title ' + tab">
          <p>Content of Tab Pane {{ tab }}</p>
          <p>Content of Tab Pane {{ tab }}</p>
          <p>Content of Tab Pane {{ tab }}</p>
        </nz-tab>
      </nz-tabset>
    </div>
  `,
  styles  : [
      `
      :host {
        background: #F5F5F5;
        overflow: hidden;
        padding: 24px;
        display: block;
      }

      .card-container ::ng-deep .ant-tabs-card .ant-tabs-content {
        height: 120px;
        margin-top: -16px;
      }

      .card-container ::ng-deep .ant-tabs-card .ant-tabs-content .ant-tabs-tabpane {
        background: #fff;
        padding: 16px;
      }

      .card-container ::ng-deep .ant-tabs-card .ant-tabs-bar {
        border-color: #fff;
      }

      .card-container ::ng-deep .ant-tabs-card .ant-tabs-bar .ant-tabs-tab {
        border-color: transparent;
        background: transparent;
      }

      .card-container ::ng-deep .ant-tabs-card .ant-tabs-bar .ant-tabs-tab-active {
        border-color: #fff;
        background: #fff;
      }
    `
  ]
})
export class NzDemoTabsCardTopComponent {
  tabs = [ 1, 2, 3 ];
}

11.自定义新增页签触发器
给自定义触发器绑定事件。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-tabs-custom-add-trigger',
  template: `
    <div style="margin-bottom: 16px;">
      <button nz-button (click)="newTab()">ADD</button>
    </div>
    <nz-tabset [nzType]="'card'" [nzSelectedIndex]="index">
      <nz-tab *ngFor="let tab of tabs" [nzTitle]="titleTemplate">
        <ng-template #titleTemplate>
          <div>{{ tab }}<i nz-icon type="close" class="ant-tabs-close-x" (click)="closeTab(tab)"></i></div>
        </ng-template>
        Content of {{ tab }}
      </nz-tab>
    </nz-tabset>`,
  styles  : []
})
export class NzDemoTabsCustomAddTriggerComponent {
  index = 0;
  tabs = [ 'Tab 1', 'Tab 2' ];

  closeTab(tab: string): void {
    this.tabs.splice(this.tabs.indexOf(tab), 1);
  }

  newTab(): void {
    this.tabs.push('New Tab');
    this.index = this.tabs.length - 1;
  }
}

12.API#
nz-tabsetCOMPONENT#
参数	说明	类型	默认值
[nzSelectedIndex]	当前激活 tab 面板的 序列号，可双向绑定	number	无
[nzAnimated]	是否使用动画切换 Tabs，在 nzTabPosition=top丨bottom 时有效	boolean丨{inkBar:boolean, tabPane:boolean}	true, 当 type="card" 时为 false
[nzSize]	大小，提供 largedefault 和 small 三种大小	string	'default'
[nzTabBarExtraContent]	tab bar 上额外的元素	TemplateRef<void>	无
[nzTabBarStyle]	tab bar 的样式对象	object	-
[nzTabPosition]	页签位置，可选值有 toprightbottomleft	string	'top'
[nzType]	页签的基本样式，可选 line、card 类型	string	'line'
[nzTabBarGutter]	tabs 之间的间隙	number	无
[nzHideAll]	是否隐藏所有tab内容	boolean	false
[nzShowPagination]	是否超出范围时显示pre和next按钮	boolean	true
(nzSelectedIndexChange)	当前激活 tab 面板的 序列号变更回调函数	EventEmitter<number>	无
(nzSelectChange)	当前激活 tab 面板变更回调函数	EventEmitter<{nzSelectedIndex: number,tab: NzTabComponent}>	无
(nzOnNextClick)	next 按钮被点击的回调	EventEmitter<void>	无
(nzOnPrevClick)	prev 按钮被点击的回调	EventEmitter<void>	无
nz-tabCOMPONENT#
参数	说明	类型	默认值
[nzTitle]	选项卡头显示文字	string ｜ TemplateRef<void>	-
[nzDisabled]	是否禁用	boolean	-
(nzClick)	title被点击的回调函数	EventEmitter<void>	-
(nzSelect)	tab被选中的回调函数	EventEmitter<void>	-
(nzDeselect)	tab被取消选中的回调函数	EventEmitter<void>	-

十.Tag标签
进行标记和分类的小标签。

1.基本标签的用法，可以通过添加 nzMode="closable" 变为可关闭标签。可关闭标签具有 nzOnClosenzAfterClose 两个事件。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-tag-basic',
  template: `
    <nz-tag>Tag 1</nz-tag>
    <nz-tag>
      <a href="https://github.com/NG-ZORRO/ng-zorro-antd">Link</a>
    </nz-tag>
    <nz-tag nzMode="closeable" (nzOnClose)="onClose($event)" (nzAfterClose)="afterClose()">Tag 2</nz-tag>
    <nz-tag nzMode="closeable" (nzOnClose)="preventDefault($event)">Prevent Default</nz-tag>
  `,
  styles  : []
})
export class NzDemoTagBasicComponent {

  onClose(e: MouseEvent): void {
    console.log('tag was closed.');
  }

  afterClose(): void {
    console.log('after tag closed');
  }

  preventDefault(e: Event): void {
    e.preventDefault();
    e.stopPropagation();
    console.log('tag can not be closed.');
  }
}

2.多彩标签
我们添加了多种预设色彩的标签样式，用作不同场景使用。如果预设值不能满足你的需求，可以设置为具体的色值。
import { Component, ViewEncapsulation } from '@angular/core';

@Component({
  selector     : 'nz-demo-tag-colorful',
  encapsulation: ViewEncapsulation.None,
  template     : `
    <h4 style="margin-bottom: 16px;">Presets:</h4>
    <div>
      <nz-tag [nzColor]="'magenta'">magenta</nz-tag>
      <nz-tag [nzColor]="'red'">red</nz-tag>
      <nz-tag [nzColor]="'volcano'">volcano</nz-tag>
      <nz-tag [nzColor]="'orange'">orange</nz-tag>
      <nz-tag [nzColor]="'gold'">gold</nz-tag>
      <nz-tag [nzColor]="'lime'">lime</nz-tag>
      <nz-tag [nzColor]="'green'">green</nz-tag>
      <nz-tag [nzColor]="'cyan'">cyan</nz-tag>
      <nz-tag [nzColor]="'blue'">blue</nz-tag>
      <nz-tag [nzColor]="'geekblue'">geekblue</nz-tag>
      <nz-tag [nzColor]="'purple'">purple</nz-tag>
    </div>
    <h4 style="margin: 16px 0px;'">Custom:</h4>
    <div>
      <nz-tag [nzColor]="'#f50'">#f50</nz-tag>
      <nz-tag [nzColor]="'#2db7f5'">#2db7f5</nz-tag>
      <nz-tag [nzColor]="'#87d068'">#87d068</nz-tag>
      <nz-tag [nzColor]="'#108ee9'">#108ee9</nz-tag>
    </div>
  `,
  styles       : [ `
    .ant-tag {
      margin-bottom: 8px;
    }
  ` ]
})
export class NzDemoTagColorfulComponent {
}

3.动态添加和删除
用数组生成一组标签，可以动态添加和删除，通过监听删除动画结束的事件 nzAfterClose 实现。
import { Component, ElementRef, ViewChild } from '@angular/core';

@Component({
  selector: 'nz-demo-tag-control',
  template: `
    <nz-tag
      *ngFor="let tag of tags; let i = index;"
      [nzMode]="i === 0 ? 'default' : 'closeable'"
      (nzAfterClose)="handleClose(tag)">
      {{ sliceTagName(tag) }}
    </nz-tag>
    <nz-tag
      *ngIf="!inputVisible"
      class="editable-tag"
      (click)="showInput()">
      <i nz-icon type="plus"></i> New Tag
    </nz-tag>
    <input
      #inputElement
      nz-input
      nzSize="small"
      *ngIf="inputVisible" type="text"
      [(ngModel)]="inputValue"
      style="width: 78px;"
      (blur)="handleInputConfirm()"
      (keydown.enter)="handleInputConfirm()">
  `,
  styles  : [
      `.editable-tag ::ng-deep .ant-tag {
      background: rgb(255, 255, 255);
      border-style: dashed;
    }`
  ]
})
export class NzDemoTagControlComponent {

  tags = [ 'Unremovable', 'Tag 2', 'Tag 3' ];
  inputVisible = false;
  inputValue = '';
  @ViewChild('inputElement') inputElement: ElementRef;

  handleClose(removedTag: {}): void {
    this.tags = this.tags.filter(tag => tag !== removedTag);
  }

  sliceTagName(tag: string): string {
    const isLongTag = tag.length > 20;
    return isLongTag ? `${tag.slice(0, 20)}...` : tag;
  }

  showInput(): void {
    this.inputVisible = true;
    setTimeout(() => {
      this.inputElement.nativeElement.focus();
    }, 10);
  }

  handleInputConfirm(): void {
    if (this.inputValue && this.tags.indexOf(this.inputValue) === -1) {
      this.tags.push(this.inputValue);
    }
    this.inputValue = '';
    this.inputVisible = false;
  }
}

4.可选择
可通过 nzMode="checkable" 实现类似 Checkbox 的效果，点击切换选中效果。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-tag-checkable',
  template: `
    <nz-tag nzMode="checkable" [nzChecked]="true" (nzCheckedChange)="checkChange($event)">Tag1</nz-tag>
    <nz-tag nzMode="checkable" [nzChecked]="true" (nzCheckedChange)="checkChange($event)">Tag2</nz-tag>
    <nz-tag nzMode="checkable" [nzChecked]="true" (nzCheckedChange)="checkChange($event)">Tag3</nz-tag>
  `
})
export class NzDemoTagCheckableComponent {
  checkChange(e: boolean): void {
    console.log(e);
  }
}

5.热门标签
选择你感兴趣的话题。
import { Component } from '@angular/core';

const tagsFromServer = [ 'Movie', 'Books', 'Music', 'Sports' ];

@Component({
  selector: 'nz-demo-tag-hot-tags',
  template: `
    <strong>Categories: </strong>
    <nz-tag *ngFor="let tag of hotTags" nzMode="checkable"
      [nzChecked]="selectedTags.indexOf(tag) > -1" (nzCheckedChange)="handleChange($event, tag)">
      {{ tag }}
    </nz-tag>
  `,
  styles  : []
})
export class NzDemoTagHotTagsComponent {

  hotTags = tagsFromServer;
  selectedTags = [];

  handleChange(checked: boolean, tag: string): void {
    if (checked) {
      this.selectedTags.push(tag);
    } else {
      this.selectedTags = this.selectedTags.filter(t => t !== tag);
    }
    console.log('You are interested in: ', this.selectedTags);
  }
}

6.API#
nz-tagCOMPONENT#
参数	说明	类型	默认值
[nzMode]	设定标签工作的模式	'closeable'丨'default'丨'checkable'	default
[nzChecked]	设置标签的选中状态，可双向绑定，在 nzMode="checkable" 时可用	boolean	false
[nzColor]	标签色	string	-
(nzAfterClose)	关闭动画完成后的回调，在 nzMode="closable" 时可用	EventEmitter<void>	-
(nzOnClose)	关闭时的回调，在 nzMode="closable" 时可用	EventEmitter<MouseEvent>	-
(nzCheckedChange)	设置标签的选中状态的回调，在 nzMode="checkable" 时可用	EventEmitter<void>	-

十一.Timeline时间轴
垂直展示的时间流信息。
当有一系列信息需按时间排列时，可正序和倒序。
需要有一条时间轴进行视觉上的串联时。

1.基本用法
基本的时间轴。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-timeline-basic',
  template: `
    <nz-timeline>
      <nz-timeline-item>Create a services site 2015-09-01</nz-timeline-item>
      <nz-timeline-item>Solve initial network problems 2015-09-01</nz-timeline-item>
      <nz-timeline-item>Technical testing 2015-09-01</nz-timeline-item>
      <nz-timeline-item>Network problems being solved 2015-09-01</nz-timeline-item>
    </nz-timeline>`
})
export class NzDemoTimelineBasicComponent {
}

2.圆圈颜色
圆圈颜色，绿色用于已完成、成功状态，红色表示告警或错误状态，蓝色可表示正在进行或其他默认状态。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-timeline-color',
  template: `
    <nz-timeline>
      <nz-timeline-item nzColor="green">Create a services site 2015-09-01</nz-timeline-item>
      <nz-timeline-item nzColor="green">Solve initial network problems 2015-09-01</nz-timeline-item>
      <nz-timeline-item nzColor="red">
        <p>Solve initial network problems 1</p>
        <p>Solve initial network problems 2</p>
        <p>Solve initial network problems 3 2015-09-01</p>
      </nz-timeline-item>
      <nz-timeline-item>
        <p>Technical testing 1</p>
        <p>Technical testing 2</p>
        <p>Technical testing 3 2015-09-01</p>
      </nz-timeline-item>
    </nz-timeline>`,
  styles  : []
})
export class NzDemoTimelineColorComponent {
}

3.最后一个
在最后位置添加一个幽灵节点，表示时间轴未完成，还在记录过程中。可以指定 [nzPending]="true" 或者 [nzPending]="一个 TemplateRef"。
一般用于按时间正序排列的模式。

import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-timeline-pending',
  template: `
    <nz-timeline [nzPending]="'Recording...'">
      <nz-timeline-item>Create a services site 2015-09-01</nz-timeline-item>
      <nz-timeline-item>Solve initial network problems 2015-09-01</nz-timeline-item>
      <nz-timeline-item>Technical testing 2015-09-01</nz-timeline-item>
      <nz-timeline-item>Network problems being solved 2015-09-01</nz-timeline-item>
    </nz-timeline>
  `
})

export class NzDemoTimelinePendingComponent {
}

4.自定义时间轴点
可以设置为图标或其他自定义元素。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-timeline-custom',
  template: `
    <nz-timeline>
      <nz-timeline-item>Create a services site 2015-09-01</nz-timeline-item>
      <nz-timeline-item>Solve initial network problems 2015-09-01</nz-timeline-item>
      <nz-timeline-item nzColor="red" [nzDot]="dotTemplate">Technical testing 2015-09-01</nz-timeline-item>
      <nz-timeline-item>Network problems being solved 2015-09-01</nz-timeline-item>
    </nz-timeline>
    <ng-template #dotTemplate>
      <i nz-icon type="clock-circle-o" style="font-size: 16px;"></i>
    </ng-template>
  `
})

export class NzDemoTimelineCustomComponent {
}

5.API#
<nz-timeline>
  <nz-timeline-item>创建服务现场 2015-09-01</nz-timeline-item>
  <nz-timeline-item>初步排除网络异常 2015-09-01</nz-timeline-item>
  <nz-timeline-item>技术测试异常 2015-09-01</nz-timeline-item>
  <nz-timeline-item>网络异常正在修复 2015-09-01</nz-timeline-item>
</nz-timeline>
nz-timelineCOMPONENT#
时间轴。

参数	说明	类型	默认值
[nzPending]	指定最后一个幽灵节点是否存在或内容	boolean｜string｜TemplateRef<void>	false
nz-timeline-itemCOMPONENT#
时间轴的每一个节点。

参数	说明	类型	默认值
[nzColor]	指定圆圈颜色 blue, red, green，或自定义的色值(CSS 颜色)	string	blue
[nzDot]	自定义时间轴点	string｜TemplateRef<void>

十二.Tooltip文字提示
简单的文字提示气泡框。
何时使用#
鼠标移入则显示提示，移出消失，气泡浮层不承载复杂文本和操作。
可用来代替系统默认的 title 提示，提供一个按钮/文字/操作的文案解释。

1.基本
最简单的用法。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-tooltip-basic',
  template: `<span nz-tooltip nzTitle="prompt text">Tooltip will show when mouse enter.</span>`
})
export class NzDemoTooltipBasicComponent {
}

2.位置
位置有 12 个方向。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-tooltip-placement',
  template: `
    <div style="margin-left:60px;">
      <button nzTitle="prompt text" nzPlacement="topLeft" nz-button nz-tooltip>TL</button>
      <button nzTitle="prompt text" nzPlacement="top" nz-button nz-tooltip>Top</button>
      <button nzTitle="prompt text" nzPlacement="topRight" nz-button nz-tooltip>TR</button>
    </div>
    <div style="float:left;width: 60px;">
      <button nzTitle="prompt text" nzPlacement="leftTop" nz-button nz-tooltip>LT</button>
      <button nzTitle="prompt text" nzPlacement="left" nz-button nz-tooltip>Left</button>
      <button nzTitle="prompt text" nzPlacement="leftBottom" nz-button nz-tooltip>LB</button>
    </div>
    <div style="margin-left:270px;width: 60px;">
      <button nzTitle="prompt text" nzPlacement="rightTop" nz-button nz-tooltip>RT</button>
      <button nzTitle="prompt text" nzPlacement="right" nz-button nz-tooltip>Right</button>
      <button nzTitle="prompt text" nzPlacement="rightBottom" nz-button nz-tooltip>RB</button>
    </div>
    <div style="margin-left:60px;clear: both;">
      <button nzTitle="prompt text" nzPlacement="bottomLeft" nz-button nz-tooltip>BL</button>
      <button nzTitle="prompt text" nzPlacement="bottom" nz-button nz-tooltip>Bottom</button>
      <button nzTitle="prompt text" nzPlacement="bottomRight" nz-button nz-tooltip>BR</button>
    </div>
  `,
  styles  : [
      `
      button {
        width: 70px;
        text-align: center;
        padding: 0;
        margin-right: 8px;
        margin-bottom: 8px;
      }
    `
  ]
})
export class NzDemoTooltipPlacementComponent {
}

3.箭头指向
通过设置 nzPlacement ，可以箭头将指向目标元素的中心。

import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-tooltip-arrow-point-at-center',
  template: `
    <button nz-button nzTitle="prompt text" nzPlacement="topLeft" nz-tooltip>Align edge / 边缘对齐</button>
    <button nz-button nzTitle="prompt text" nzPlacement="topCenter" nz-tooltip>Arrow points to center / 箭头指向中心</button>
  `,
  styles  : [
      `button {
      margin-right: 8px;
      margin-bottom: 8px;
    }`
  ]
})
export class NzDemoTooltipArrowPointAtCenterComponent {
}

4.模板渲染
nzTitle 可以传入 TemplateRef<void> 模板渲染。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-tooltip-template',
  template: `
    <a nz-tooltip [nzTitle]="titleTemplate">This Tooltip Have Icon</a>
    <ng-template #titleTemplate>
      <i nz-icon type="file" style="margin-right: 8px"></i> <span>Tooltip With Icon</span>
    </ng-template>
  `
})
export class NzDemoTooltipTemplateComponent {
}

5.API#
参数	说明	类型	默认值
[nzTitle]	提示文字	string丨TemplateRef<void>	无
共同的 API#
以下 API 为 nz-tooltip、nz-popconfirm、nz-popover 共享的 API。

参数	说明	类型	默认值
[nzMouseEnterDelay]	鼠标移入后延时多少才显示 Tooltip，单位：秒	number	0.15
[nzMouseLeaveDelay]	鼠标移出后延时多少才隐藏 Tooltip，单位：秒	number	0.1
[nzOverlayClassName]	卡片类名	string	无
[nzOverlayStyle]	卡片样式	object	无
[nzPlacement]	气泡框位置，可选 top ｜left ｜right ｜bottom ｜topLeft ｜topRight ｜bottomLeft ｜bottomRight ｜leftTop ｜leftBottom ｜rightTop ｜rightBottom	string	top
[nzTrigger]	触发行为，可选 hover/focus/click	string	hover
[nzVisible]	用于手动控制浮层显隐	boolean	false
(nzVisibleChange)	显示隐藏的回调	EventEmitter<boolean>	无
注意#
请确保 nz-tooltip 的子元素能接受 onMouseEnter、onMouseLeave、onFocus、onClick 事件。

十三.Tree树形控件
何时使用#
文件夹、组织架构、生物分类、国家地区等等，世间万物的大多数结构都是树形结构。使用树控件可以完整展现其中的层级关系，并具有展开收起选择等交互功能。
1.基本
最简单的用法，展示可勾选，可选中，禁用，默认展开等功能。
import { Component, OnInit, ViewChild } from '@angular/core';
import { NzFormatEmitEvent, NzTreeNode, NzTreeNodeOptions } from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-tree-basic',
  template: `
    <nz-tree
      #treeCom
      [nzData]="nodes"
      nzCheckable="true"
      nzMultiple="true"
      [nzCheckedKeys]="defaultCheckedKeys"
      [nzExpandedKeys]="defaultExpandedKeys"
      [nzSelectedKeys]="defaultSelectedKeys"
      (nzClick)="nzClick($event)"
      (nzSelectedKeysChange)="nzSelect($event)"
      (nzCheckBoxChange)="nzCheck($event)">
    </nz-tree>
  `
})

export class NzDemoTreeBasicComponent implements OnInit {
  @ViewChild('treeCom') treeCom;
  defaultCheckedKeys = [ '1001', '1002' ];
  defaultSelectedKeys = [ '10011' ];
  defaultExpandedKeys = [ '100', '1001' ];

  nodes: NzTreeNodeOptions[] = [ {
    title   : 'parent 1',
    key     : '100',
    children: [ {
      title   : 'parent 1-0',
      key     : '1001',
      disabled: true,
      children: [
        { title: 'leaf 1-0-0', key: '10010', disableCheckbox: true, isLeaf: true },
        { title: 'leaf 1-0-1', key: '10011', isLeaf: true, checked: true }
      ]
    }, {
      title   : 'parent 1-1',
      key     : '1002',
      children: [
        { title: 'leaf 1-1-0', key: '10020', isLeaf: true }
      ]
    } ]
  } ];

  nzClick(event: NzFormatEmitEvent): void {
    console.log(event, event.selectedKeys, event.keys, event.nodes, this.treeCom.getSelectedNodeList());
  }

  nzCheck(event: NzFormatEmitEvent): void {
    console.log(event, event.checkedKeys, event.keys, event.nodes);
  }

  // nzSelectedKeys change
  nzSelect(keys: string[]): void {
    console.log(keys, this.treeCom.getSelectedNodeList());
  }

  ngOnInit(): void {
    setTimeout(() => {
      console.log(this.treeCom.getTreeNodes(), this.treeCom.getCheckedNodeList(), this.treeCom.getSelectedNodeList());
    }, 500);
  }
}

2.受控操作示例
受控操作示例(默认)。
import { Component, OnInit } from '@angular/core';
import { NzFormatEmitEvent, NzTreeNode } from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-tree-basic-controlled',
  template: `
    <nz-tree
      [nzData]="nodes"
      nzCheckable="true"
      nzMultiple="true"
      [nzCheckedKeys]="defaultCheckedKeys"
      [nzExpandedKeys]="defaultExpandedKeys"
      [nzSelectedKeys]="defaultSelectedKeys"
      (nzClick)="nzEvent($event)"
      (nzExpandChange)="nzEvent($event)"
      (nzCheckBoxChange)="nzEvent($event)">
    </nz-tree>
  `
})

export class NzDemoTreeBasicControlledComponent implements OnInit {
  defaultCheckedKeys = [ '0-0-0' ];
  defaultSelectedKeys = [];
  defaultExpandedKeys = [ '0-0', '0-0-0', '0-0-1' ];

  nodes = [ {
    title   : '0-0',
    key     : '0-0',
    expanded: true,
    children: [ {
      title   : '0-0-0',
      key     : '0-0-0',
      children: [
        { title: '0-0-0-0', key: '0-0-0-0', isLeaf: true },
        { title: '0-0-0-1', key: '0-0-0-1', isLeaf: true },
        { title: '0-0-0-2', key: '0-0-0-2', isLeaf: true }
      ]
    }, {
      title   : '0-0-1',
      key     : '0-0-1',
      children: [
        { title: '0-0-1-0', key: '0-0-1-0', isLeaf: true },
        { title: '0-0-1-1', key: '0-0-1-1', isLeaf: true },
        { title: '0-0-1-2', key: '0-0-1-2', isLeaf: true }
      ]
    }, {
      title : '0-0-2',
      key   : '0-0-2',
      isLeaf: true
    } ]
  }, {
    title   : '0-1',
    key     : '0-1',
    children: [
      { title: '0-1-0-0', key: '0-1-0-0', isLeaf: true },
      { title: '0-1-0-1', key: '0-1-0-1', isLeaf: true },
      { title: '0-1-0-2', key: '0-1-0-2', isLeaf: true }
    ]
  }, {
    title : '0-2',
    key   : '0-2',
    isLeaf: true
  } ];

  nzEvent(event: NzFormatEmitEvent): void {
    console.log(event);
  }

  ngOnInit(): void {
  }
}

3.拖动示例
将节点拖拽到其他节点内部或前后。
import { Component, OnInit } from '@angular/core';
import { NzFormatEmitEvent, NzTreeNode } from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-tree-draggable',
  template: `
    <nz-tree
      [nzData]="nodes"
      nzDraggable="true"
      (nzOnDragStart)="nzEvent($event)"
      (nzOnDragEnter)="nzEvent($event)"
      (nzOnDragLeave)="nzEvent($event)"
      (nzOnDrop)="nzEvent($event)"
      (nzOnDragEnd)="nzEvent($event)">
    </nz-tree>
  `,
  styles  : [ `
    :host ::ng-deep .draggable-tree .ant-tree-node-content-wrapper {
      width: calc(100% - 42px);
    }
  ` ]
})

export class NzDemoTreeDraggableComponent implements OnInit {
  nodes = [ {
    title   : '0-0',
    key     : '00',
    expanded: true,
    children: [ {
      title   : '0-0-0',
      key     : '000',
      expanded: true,
      children: [
        { title: '0-0-0-0', key: '0000', isLeaf: true },
        { title: '0-0-0-1', key: '0001', isLeaf: true },
        { title: '0-0-0-2', key: '0002', isLeaf: true }
      ]
    }, {
      title   : '0-0-1',
      key     : '001',
      children: [
        { title: '0-0-1-0', key: '0010', isLeaf: true },
        { title: '0-0-1-1', key: '0011', isLeaf: true },
        { title: '0-0-1-2', key: '0012', isLeaf: true }
      ]
    }, {
      title: '0-0-2',
      key  : '002'
    } ]
  }, {
    title   : '0-1',
    key     : '01',
    children: [ {
      title   : '0-1-0',
      key     : '010',
      children: [
        { title: '0-1-0-0', key: '0100', isLeaf: true },
        { title: '0-1-0-1', key: '0101', isLeaf: true },
        { title: '0-1-0-2', key: '0102', isLeaf: true }
      ]
    }, {
      title   : '0-1-1',
      key     : '011',
      children: [
        { title: '0-1-1-0', key: '0110', isLeaf: true },
        { title: '0-1-1-1', key: '0111', isLeaf: true },
        { title: '0-1-1-2', key: '0112', isLeaf: true }
      ]
    } ]
  }, {
    title : '0-2',
    key   : '02',
    isLeaf: true
  } ];

  nzEvent(event: NzFormatEmitEvent): void {
    console.log(event);
  }

  ngOnInit(): void {
  }
}

4.拖动示例-二次校验
nzBeforeDrop: 在拖拽放置事件(drop事件)之前做校验, 例如仅允许拖拽到内部(延时一秒)、放置前结合modal验证等。
import { Component, OnInit } from '@angular/core';
import { NzFormatBeforeDropEvent, NzFormatEmitEvent, NzTreeNode } from 'ng-zorro-antd';
import { of, Observable } from 'rxjs';
import { delay } from 'rxjs/operators';

@Component({
  selector: 'nz-demo-tree-draggable-confirm',
  template: `
    <nz-tree
      [nzData]="nodes"
      nzDraggable="true"
      (nzExpandChange)="nzAction($event)"
      [nzBeforeDrop]="beforeDrop"
      (nzOnDragStart)="nzAction($event)"
      (nzOnDragEnter)="nzAction($event)"
      (nzOnDragLeave)="nzAction($event)"
      (nzOnDrop)="nzAction($event)"
      (nzOnDragEnd)="nzAction($event)">
    </nz-tree>
  `
})

export class NzDemoTreeDraggableConfirmComponent implements OnInit {
  nodes = [ {
    title   : '0-0',
    key     : '100',
    expanded: true,
    children: [ {
      title   : '0-0-0',
      key     : '1001',
      children: [
        { title: '0-0-0-0', key: '10010', isLeaf: true },
        { title: '0-0-0-1', key: '10011', isLeaf: true }
      ]
    }, {
      title   : '0-0-1',
      key     : '1002',
      children: [
        { title: '0-0-1-0', key: '10020', isLeaf: true }
      ]
    } ]
  } ];

  nzAction(event: NzFormatEmitEvent): void {
    console.log(event);
  }

  beforeDrop(arg: NzFormatBeforeDropEvent): Observable<boolean> {
    // if insert node into another node, wait 1s
    if (arg.pos === 0) {
      return of(true).pipe(delay(1000));
    } else {
      return of(false);
    }
  }

  ngOnInit(): void {
  }
}

5.异步数据加载
点击展开节点，动态加载数据。

import { Component, OnInit } from '@angular/core';
import { NzFormatEmitEvent, NzTreeNode } from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-tree-dynamic',
  template: `
    <nz-tree
      [nzData]="nodes"
      nzAsyncData="true"
      (nzClick)="nzEvent($event)"
      (nzExpandChange)="nzEvent($event)">
    </nz-tree>
  `
})

export class NzDemoTreeDynamicComponent implements OnInit {
  nodes = [
    { title: 'Expand to load', key: '0' },
    { title: 'Expand to load', key: '1' },
    { title: 'Tree Node', key: '2', isLeaf: true }
  ];

  nzEvent(event: NzFormatEmitEvent): void {
    console.log(event);
    // load child async
    if (event.eventName === 'expand') {
      setTimeout(_ => {
        if (event.node.getChildren().length === 0 && event.node.isExpanded) {
          event.node.addChildren([
            { title: 'Child Node', key: `${event.node.key}-0` },
            { title: 'Child Node', key: `${event.node.key}-1` } ]);
        }
      }, 1000);
    }
  }

  ngOnInit(): void {
  }
}

6.可搜索
可搜索的树。
import { Component, OnInit, ViewChild } from '@angular/core';
import { NzFormatEmitEvent, NzTreeNode } from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-tree-search',
  template: `
    <nz-input-group [nzSuffix]="suffixIcon">
      <input type="text" nz-input placeholder="Search" [(ngModel)]="searchValue">
    </nz-input-group>
    <ng-template #suffixIcon>
      <i nz-icon type="search"></i>
    </ng-template>
    <nz-tree
      #treeCom
      [nzData]="nodes"
      [nzSearchValue]="searchValue"
      (nzClick)="nzEvent($event)"
      (nzExpandChange)="nzEvent($event)"
      (nzSearchValueChange)="nzEvent($event)">
    </nz-tree>
  `,
  styles  : [ `
    nz-input-group {
      padding: 10px 0;
    }
  ` ]
})

export class NzDemoTreeSearchComponent implements OnInit {
  @ViewChild('treeCom') treeCom;
  searchValue;

  nodes = [ {
    title   : '0-0',
    key     : '0-0',
    children: [ {
      title   : '0-0-0',
      key     : '0-0-0',
      children: [
        { title: '0-0-0-0', key: '0-0-0-0', isLeaf: true },
        { title: '0-0-0-1', key: '0-0-0-1', isLeaf: true },
        { title: '0-0-0-2', key: '0-0-0-2', isLeaf: true }
      ]
    }, {
      title   : '0-0-1',
      key     : '0-0-1',
      children: [
        { title: '0-0-1-0', key: '0-0-1-0', isLeaf: true },
        { title: '0-0-1-1', key: '0-0-1-1', isLeaf: true },
        { title: '0-0-1-2', key: '0-0-1-2', isLeaf: true }
      ]
    }, {
      title : '0-0-2',
      key   : '0-0-2',
      isLeaf: true
    } ]
  }, {
    title   : '0-1',
    key     : '0-1',
    children: [
      { title: '0-1-0-0', key: '0-1-0-0', isLeaf: true },
      { title: '0-1-0-1', key: '0-1-0-1', isLeaf: true },
      { title: '0-1-0-2', key: '0-1-0-2', isLeaf: true }
    ]
  }, {
    title : '0-2',
    key   : '0-2',
    isLeaf: true
  } ];

  nzEvent(event: NzFormatEmitEvent): void {
    console.log(event, this.treeCom.getMatchedNodeList().map(v => v.title));
  }

  ngOnInit(): void {
  }
}

7.连接线
带连接线的树。
import { Component, OnInit } from '@angular/core';
import { NzFormatEmitEvent, NzTreeNode } from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-tree-line',
  template: `
    <nz-tree
      [nzData]="nodes"
      nzShowLine="true"
      (nzClick)="nzEvent($event)">
    </nz-tree>
  `
})

export class NzDemoTreeLineComponent implements OnInit {
  nodes = [ {
    title   : 'parent 1',
    key     : '100',
    expanded: true,
    children: [ {
      title   : 'parent 1-0',
      key     : '1001',
      expanded: true,
      children: [
        { title: 'leaf', key: '10010', isLeaf: true },
        { title: 'leaf', key: '10011', isLeaf: true },
        { title: 'leaf', key: '10012', isLeaf: true }
      ]
    }, {
      title   : 'parent 1-1',
      key     : '1002',
      children: [
        { title: 'leaf', key: '10020', isLeaf: true }
      ]
    }, {
      title   : 'parent 1-2',
      key     : '1003',
      children: [
        { title: 'leaf', key: '10030', isLeaf: true },
        { title: 'leaf', key: '10031', isLeaf: true }
      ]
    } ]
  } ];

  nzEvent(event: NzFormatEmitEvent): void {
    console.log(event);
  }

  ngOnInit(): void {
  }
}

8.自定义图标
可以针对不同的节点定制图标。
import { Component, OnInit } from '@angular/core';
import { NzFormatEmitEvent, NzTreeNode } from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-tree-customized-icon',
  template: `
    <nz-tree
      [nzData]="nodes"
      nzShowIcon="true">
    </nz-tree>
  `
})

export class NzDemoTreeCustomizedIconComponent implements OnInit {
  nodes = [
    {
      title   : 'parent 1',
      key     : '100',
      expanded: true,
      icon    : 'anticon anticon-smile-o',
      children: [
        { title: 'leaf', key: '1001', icon: 'anticon anticon-meh-o', isLeaf: true },
        { title: 'leaf', key: '1002', icon: 'anticon anticon-frown-o', isLeaf: true }
      ]
    }
  ];

  ngOnInit(): void {
  }
}

9.目录
自定义目录树(使用nzTreeTemplate实现，支持右键)。
import { Component, TemplateRef, ViewChild } from '@angular/core';
import {
  NzDropdownContextComponent,
  NzDropdownService,
  NzFormatEmitEvent,
  NzTreeComponent,
  NzTreeNode
} from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-tree-directory',
  template: `
    <nz-tree
      #treeCom
      [nzData]="nodes"
      nzMultiple="true"
      (nzClick)="activeNode($event)"
      (nzDblClick)="openFolder($event)">
      <ng-template #contextTemplate>
        <ul nz-menu nzInDropDown>
          <li nz-menu-item (click)="selectDropdown('file')">新建文件</li>
          <li nz-menu-item (click)="selectDropdown('folder')">新建文件夹</li>
        </ul>
      </ng-template>
      <ng-template #nzTreeTemplate let-node>
        <span class="custom-node" [class.active]="activedNode?.key===node.key">
          <span *ngIf="!node.isLeaf" (contextmenu)="contextMenu($event,contextTemplate)">
            <i nz-icon [type]="node.isExpanded ? 'folder-open' : 'folder'" (click)="openFolder(node)"></i>
            <span class="folder-name">{{node.title}}</span>
            <span class="folder-desc">created by {{node?.origin?.author | lowercase}}</span>
          </span>
          <span *ngIf="node.isLeaf">
            <i nz-icon type="file"></i>
            <span class="file-name">{{node.title}}</span>
            <span class="file-desc">modified by {{node?.origin?.author | lowercase}}</span>
          </span>
        </span>
      </ng-template>
    </nz-tree>`,
  styles  : [ `
    :host ::ng-deep .ant-tree {
      overflow: hidden;
      margin: 0 -24px;
      padding: 0 24px;
    }

    :host ::ng-deep .ant-tree li {
      padding: 4px 0 0 0;
    }

    .custom-node {
      cursor: pointer;
      line-height: 24px;
      margin-left: 4px;
      display: inline-block;
      margin: 0 -1000px;
      padding: 0 1000px;
    }

    .active {
      background: #1890FF;
      color: #fff;
    }

    .file-name, .folder-name {
      margin-left: 4px;
    }

    .file-desc, .folder-desc {
      padding: 0 8px;
      display: inline-block;
      background: #87CEFF;
      color: #FFFFFF;
      position: relative;
      left: 12px;
    }
  ` ]
})

export class NzDemoTreeDirectoryComponent {
  @ViewChild('treeCom') treeCom: NzTreeComponent;
  dropdown: NzDropdownContextComponent;
  // actived node
  activedNode: NzTreeNode;
  nodes = [ {
    title   : 'parent 0',
    key     : '100',
    author  : 'NG ZORRO',
    expanded: true,
    children: [
      { title: 'leaf 0-0', key: '1000', author: 'NG ZORRO', isLeaf: true },
      { title: 'leaf 0-1', key: '1001', author: 'NG ZORRO', isLeaf: true }
    ]
  }, {
    title   : 'parent 1',
    key     : '101',
    author  : 'NG ZORRO',
    children: [
      { title: 'leaf 1-0', key: '1010', author: 'NG ZORRO', isLeaf: true },
      { title: 'leaf 1-1', key: '1011', author: 'NG ZORRO', isLeaf: true }
    ]
  } ];

  openFolder(data: NzTreeNode | NzFormatEmitEvent): void {
    // do something if u want
    if (data instanceof NzTreeNode) {
      data.isExpanded = !data.isExpanded;
    } else {
      data.node.isExpanded = !data.node.isExpanded;
    }
  }

  activeNode(data: NzFormatEmitEvent): void {
    if (this.activedNode) {
      // delete selectedNodeList(u can do anything u want)
      this.treeCom.nzTreeService.setSelectedNodeList(this.activedNode);
    }
    data.node.isSelected = true;
    this.activedNode = data.node;
    // add selectedNodeList
    this.treeCom.nzTreeService.setSelectedNodeList(this.activedNode);
  }

  contextMenu($event: MouseEvent, template: TemplateRef<void>): void {
    this.dropdown = this.nzDropdownService.create($event, template);
  }

  selectDropdown(type: string): void {
    this.dropdown.close();
    // do something
  }

  constructor(private nzDropdownService: NzDropdownService) {
  }
}

10.API#
nz-treeCOMPONENT#
参数	说明	类型	默认值
[ngModel]	元数据(建议使用nzData)	NzTreeNode[]	[]
[nzDefaultExpandAll]	默认展开所有节点 Deprecated	boolean	false
[nzDefaultExpandedKeys]	展开指定的节点 Deprecated	string[]	[]
[nzDefaultCheckedKeys]	指定选中复选框的节点 Deprecated	string[]	[]
[nzDefaultSelectedKeys]	指定选中的节点 Deprecated	string[]	[]
[nzData]	元数据	NzTreeNodeOptions[] / NzTreeNode[]	[]
[nzCheckable]	节点前添加 Checkbox 复选框	boolean	false
[nzShowExpand]	节点前添加展开图标	boolean	true
[nzShowLine]	是否展示连接线	boolean	false
[nzShowIcon]	是否展示 TreeNode title 前的图标，没有默认样式	boolean	false
[nzAsyncData]	是否异步加载(显示加载状态)	boolean	false
[nzDraggable]	设置节点可拖拽（IE>8）	boolean	false
[nzMultiple]	支持点选多个节点（节点本身）	boolean	false
[nzCheckStrictly]	checkable状态下节点选择完全受控（父子节点选中状态不再关联）	boolean	false
[nzExpandAll]	默认展开所有树节点	boolean	false
[nzExpandedKeys]	展开指定的树节点,双向绑定	string[]	[]
[nzCheckedKeys]	指定选中复选框的树节点,双向绑定	string[]	[]
[nzSelectedKeys]	指定选中的树节点,双向绑定	string[]	[]
[nzSearchValue]	按需筛选树高亮节点(参考可搜索的树),双向绑定	string	null
[nzBeforeDrop]	drop前二次校验,允许用户自行决定是否允许放置	(confirm: NzFormatBeforeDropEvent) => Observable<boolean>	-
(nzClick)	点击树节点触发	EventEmitter<NzFormatEmitEvent>	-
(nzDblClick)	双击树节点触发	EventEmitter<NzFormatEmitEvent>	-
(nzContextMenu)	右键树节点触发	EventEmitter<NzFormatEmitEvent>	-
(nzCheckBoxChange)	点击树节点 Checkbox 触发	EventEmitter<NzFormatEmitEvent>	-
(nzExpandChange)	点击展开树节点图标触发	EventEmitter<NzFormatEmitEvent>	-
(nzSearchValueChange)	搜索节点时调用(与nzSearchValue配合使用)	EventEmitter<NzFormatEmitEvent>	-
(nzOnSearchNode)	搜索节点时调用(与nzSearchValue配合使用) Deprecated	EventEmitter<NzFormatEmitEvent>	-
(nzOnDragStart)	开始拖拽时调用	EventEmitter<NzFormatEmitEvent>	-
(nzOnDragEnter)	dragenter 触发时调用	EventEmitter<NzFormatEmitEvent>	-
(nzOnDragOver)	dragover 触发时调用	EventEmitter<NzFormatEmitEvent>	-
(nzOnDragLeave)	dragleave 触发时调用	EventEmitter<NzFormatEmitEvent>	-
(nzOnDrop)	drop 触发时调用	EventEmitter<NzFormatEmitEvent>	-
(nzOnDragEnd)	dragend 触发时调用	EventEmitter<NzFormatEmitEvent>	-
方法#
参数	说明	类型	默认值
getTreeNodes	获取组件NzTreeNode节点	NzTreeNode[]	[]
getCheckedNodeList	获取组件 checkBox 被点击选中的节点	NzTreeNode[]	[]
getSelectedNodeList	获取组件被选中的节点	NzTreeNode[]	[]
getHalfCheckedNodeList	获取组件半选状态节点	NzTreeNode[]	[]
getExpandedNodeList	获取组件展开状态节点	NzTreeNode[]	[]
getMatchedNodeList	获取组搜索匹配到的节点	NzTreeNode[]	[]
NzTreeNodeOptions props#
参数	说明	类型	默认值
title	标题	string	'---'
key	整个树范围内的所有节点的 key 值不能重复且不为空！	string	null
children	子节点	array<NzTreeNodeOptions>	[]
isLeaf	设置为叶子节点(叶子节点不可被拖拽模式放置)	boolean	false
checked	设置节点 Checkbox 是否选中	boolean	false
selected	设置节点本身是否选中	boolean	false
expanded	设置节点是否展开(叶子节点无效)	boolean	false
selectable	设置节点是否可被选中	boolean	true
disabled	设置是否禁用节点(不可进行任何操作)	boolean	false
disableCheckbox	设置节点禁用 Checkbox	boolean	false
[key: string]	自定义数据,可通过 NzTreeNode 的 origin 字段获取	any	-
NzFormatEmitEvent props#
参数	说明	类型	默认值
eventName	事件名	enum: clickdblclickcontextmenucheckexpandsearch & dragstartdragenterdragoverdragleavedropdragend	''
node	当前操作节点(拖拽时表示目标节点)	NzTreeNode	null
event	原生事件	enum: MouseEventDragEvent	null
dragNode?	当前拖拽节点(拖拽时存在)	NzTreeNode	null
selectedKeys?	已选中的节点key(单击时存在)	NzTreeNode[]	[]
checkedKeys?	checkBox 已选中的节点key(点击 checkBox 存在)	NzTreeNode[]	[]
matchedKeys?	搜索时匹配到的节点key	NzTreeNode[]	[]
keys?	非拖拽事件相关的全部节点的key数组	string[]	[]
nodes?	非拖拽事件相关的全部节点	NzTreeNode[]	[]
NzFormatBeforeDropEvent props#
参数	说明	类型	默认值
dragNode	当前拖拽节点(拖拽时存在)	NzTreeNode	-
node	当前操作节点(拖拽时表示目标节点)	NzTreeNode	-
pos	放置位置(-1:目标节点前面, 0: 目标节点内部, 1: 目标节点后面)	number	-
NzTreeNode props#
方法	说明	类型	返回值类型
title	标题	string	NzTreeNodeOptions.title
key	key值	string	NzTreeNodeOptions.key
level	层级(最顶层为0,子节点逐层加1)	number	number
children	子节点	array	NzTreeNode[]
origin	原始节点树结构(用户提供,用于展示额外信息)	NzTreeNodeOptions	-
getParentNode	获取父节点	function	NzTreeNode 或 null
isLeaf	是否为叶子节点	boolean	true 或 false
isExpanded	是否已展开	boolean	true 或 false
isDisabled	是否禁用	boolean	true 或 false
isDisableCheckbox	是否禁用 checkBox	boolean	true 或 false
isSelectable	是否可选中	boolean	true 或 false
isChecked	是否选中 checkBox	boolean	true 或 false
isAllChecked	子节点是否全选	boolean	true 或 false
isHalfChecked	子节点有选中但未全选	boolean	true 或 false
isSelected	是否已选中	boolean	true 或 false
isLoading	是否异步加载状态(影响展开图标展示)	boolean	true 或 false
isMatched	title是否包含nzSearchValue(搜索使用)	boolean	true 或 false
getChildren	获取子节点,返回NzTreeNode数组	function	NzTreeNode[]
addChildren	添加子节点,接收NzTreeNode或NzTreeNodeOptions数组,第二个参数为插入的索引位置,默认插入末尾	(children: array, index?: number )=>{}	void
clearChildren	清除子节点	function	void
setChecked	设置checked状态，参数为checked和halfChecked	(checked: boolean, halfChecked: boolean=false)=>{}	void
setExpanded	设置expanded状态	(value: boolean)=>{}	void
setSelected	设置selected状态	(value: boolean)=>{}	void
注意#
NzTreeNodeOptions 可以接受用户自定义属性，可通过 NzTreeNode 的 origin 属性取得。



====================================================== Feedback 反馈 ======================================================
一.Alert警告提示
何时使用#
当某个页面需要向用户显示警告的信息时。
非浮层的静态展现形式，始终展现，不会自动消失，用户可以点击关闭。

1.基本
最简单的用法，适用于简短的警告提示。
import { Component } from '@angular/core';

@Component({
  selector     : 'nz-demo-alert-basic',
  template     : `
    <nz-alert nzType="success" nzMessage="Success Text"></nz-alert>
  `
})
export class NzDemoAlertBasicComponent {
}

2.四种样式
共有四种样式 success、info、warning、error。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-alert-style',
  template: `
    <nz-alert nzType="success" nzMessage="Success Text"></nz-alert>
    <nz-alert nzType="info" nzMessage="Info Text"></nz-alert>
    <nz-alert nzType="warning" nzMessage="Warning Text"></nz-alert>
    <nz-alert nzType="error" nzMessage="Error Text"></nz-alert>
  `,
  styles  : [
      `
      nz-alert {
        margin-bottom: 16px;
      }
    `
  ]
})
export class NzDemoAlertStyleComponent {
}

3.可关闭的警告提示
显示关闭按钮，点击可关闭警告提示。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-alert-closable',
  template: `
    <nz-alert
      nzType="warning"
      nzCloseable
      nzMessage="Warning Text Warning Text Warning Text Warning Text Warning Text Warning Text Warning Text"
      (nzOnClose)="afterClose()">
    </nz-alert>
    <nz-alert
      nzType="error"
      nzCloseable
      nzMessage="Error Text"
      nzDescription="Error Description Error Description Error Description Error Description Error Description Error Description"
      (nzOnClose)="afterClose()">
    </nz-alert>
  `,
  styles  : [
      `
      nz-alert {
        margin-bottom: 16px;
      }
    `
  ]
})
export class NzDemoAlertClosableComponent {
  afterClose(): void {
    console.log('close');
  }
}

4.含有辅助性文字介绍
含有辅助性文字介绍的警告提示
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-alert-description',
  template: `
    <nz-alert
      nzType="success"
      nzMessage="Success Text"
      nzDescription="Success Description Success Description Success Description">
    </nz-alert>
    <nz-alert
      nzType="info"
      nzMessage="Info Text"
      nzDescription="Info Description Info Description Info Description Info Description">
    </nz-alert>
    <nz-alert
      nzType="warning"
      nzMessage="Warning Text"
      nzDescription="Warning Description Warning Description Warning Description Warning Description">
    </nz-alert>
    <nz-alert
      nzType="error"
      nzMessage="Error Text"
      nzDescription="Error Description Error Description Error Description Error Description">
    </nz-alert>
  `,
  styles  : [
    `
      nz-alert {
        margin-bottom: 16px;
      }
    `
  ]
})
export class NzDemoAlertDescriptionComponent {
}

5.自定义关闭
可以自定义关闭，自定义的内容会替换原先的关闭按钮。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-alert-close-text',
  template: `
    <nz-alert nzType="info" nzMessage="Info Text" nzCloseText="Close Now"></nz-alert>
  `
})
export class NzDemoAlertCloseTextComponent {
}


7.图标
可口的图标让信息类型更加醒目。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-alert-icon',
  template: `
    <nz-alert nzType="success" nzMessage="Success Tips" nzShowIcon></nz-alert>
    <nz-alert nzType="info" nzMessage="Informational Notes" nzShowIcon></nz-alert>
    <nz-alert nzType="warning" nzMessage="Warning" nzShowIcon></nz-alert>
    <nz-alert nzType="error" nzMessage="Error" nzShowIcon></nz-alert>
    <nz-alert
      nzType="success"
      nzMessage="Success Tips"
      nzDescription="Detailed description and advices about successful copywriting."
      nzShowIcon>
    </nz-alert>
    <nz-alert
      nzType="info"
      nzMessage="Informational Notes"
      nzDescription="Additional description and informations about copywriting."
      nzShowIcon>
    </nz-alert>
    <nz-alert
      nzType="warning"
      nzMessage="Warning"
      nzDescription="This is a warning notice about copywriting."
      nzShowIcon>
    </nz-alert>
    <nz-alert
      nzType="error"
      nzMessage="Error"
      nzDescription="This is an error message about copywriting."
      nzShowIcon>
    </nz-alert>
  `,
  styles  : [
    `
      nz-alert {
        margin-bottom: 16px;
      }
    `
  ]
})
export class NzDemoAlertIconComponent {
}

8.顶部公告
页面顶部通告形式，默认有图标且nzType 为 'warning'。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-alert-banner',
  template: `
    <nz-alert nzBanner nzMessage="Warning text"></nz-alert>
  `
})
export class NzDemoAlertBannerComponent { }


9.API#
nz-alertCOMPONENT#
参数	说明	类型	默认值
[nzBanner]	是否用作顶部公告	boolean	false
[nzClosable]	默认不显示关闭按钮	boolean	无
[nzCloseText]	自定义关闭按钮	string｜TemplateRef<void>	无
[nzDescription]	警告提示的辅助性文字介绍	string｜TemplateRef<void>	无
[nzMessage]	警告提示内容	string｜TemplateRef<void>	无
[nzShowIcon]	是否显示辅助图标	boolean	false，nzBanner 模式下默认值为 true
[nzIconType]	自定义图标类型，nzShowIcon 为 true 时有效	string 丨 string[] 丨 Set<string> 丨 { [klass: string]: any; };	-
[nzType]	指定警告提示的样式，有四种选择 success、info、warning、error	string	info，banner 模式下默认值为 warning
(nzOnClose)	关闭时触发的回调函数	EventEmitter<void>	-


二.Drawer抽屉
抽屉从父窗体边缘滑入，覆盖住部分父窗体内容。用户在抽屉内操作时不必离开当前任务，操作完成后，可以平滑地回到到原任务。
何时使用#
当需要一个附加的面板来控制父窗体内容，这个面板在需要时呼出。比如，控制界面展示样式，往界面中添加内容。
当需要在当前任务流中插入临时任务，创建或预览附加内容。比如展示协议条款，创建子对象。

1.基础抽屉
基础抽屉，点击触发按钮抽屉从右滑出，点击遮罩区关闭
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-drawer-basic-right',
  template: `
    <button nz-button nzType="primary" (click)="open()">Open</button>
    <nz-drawer [nzClosable]="false" [nzVisible]="visible" nzPlacement="right" nzTitle="Basic Drawer" (nzOnClose)="close()">
      <p>Some contents...</p>
      <p>Some contents...</p>
      <p>Some contents...</p>
    </nz-drawer>
  `
})

export class NzDemoDrawerBasicRightComponent {
  visible = false;

  open(): void {
    this.visible = true;
  }

  close(): void {
    this.visible = false;
  }
}

2.自定义位置
自定义位置，点击触发按钮抽屉从相应的位置滑出，点击遮罩区关闭
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-drawer-placement',
  template: `
    <nz-radio-group [(ngModel)]="placement">
      <label nz-radio nzValue="top">top</label>
      <label nz-radio nzValue="right">right</label>
      <label nz-radio nzValue="bottom">bottom</label>
      <label nz-radio nzValue="left">left</label>
    </nz-radio-group>
    <button nz-button nzType="primary" (click)="open()">Open</button>
    <nz-drawer [nzClosable]="false" [nzVisible]="visible" [nzPlacement]="placement" nzTitle="Basic Drawer" (nzOnClose)="close()">
      <p>Some contents...</p>
      <p>Some contents...</p>
      <p>Some contents...</p>
    </nz-drawer>
  `
})

export class NzDemoDrawerPlacementComponent {

  visible = false;
  placement = 'left';
  open(): void {
    this.visible = true;
  }

  close(): void {
    this.visible = false;
  }
}

3.对象编辑
用于承载编辑相关操作，需要点击关闭按钮关闭。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-drawer-from-drawer',
  template: `
    <button nz-button nzType="primary" (click)="open()">Create</button>
    <nz-drawer [nzBodyStyle]="{ height: 'calc(100% - 55px)', overflow: 'auto', 'padding-bottom':'53px' }"[nzMaskClosable]="false" [nzWidth]="720" [nzVisible]="visible" nzTitle="Create" (nzOnClose)="close()">
      <form nz-form>
        <div nz-row nzGutter="8">
          <div nz-col nzSpan="12">
            <nz-form-item>
              <nz-form-label>Name</nz-form-label>
              <nz-form-control>
                <input nz-input placeholder="please enter user name">
              </nz-form-control>
            </nz-form-item>
          </div>
          <div nz-col nzSpan="12">
            <nz-form-item>
              <nz-form-label>Url</nz-form-label>
              <nz-form-control>
                <nz-input-group nzAddOnBefore="http://" nzAddOnAfter=".com">
                  <input type="text" nz-input placeholder="please enter url">
                </nz-input-group>
              </nz-form-control>
            </nz-form-item>
          </div>
        </div>
        <div nz-row nzGutter="8">
          <div nz-col nzSpan="12">
            <nz-form-item>
              <nz-form-label>Owner</nz-form-label>
              <nz-form-control>
                <nz-select nzPlaceHolder="Please select an owner"></nz-select>
              </nz-form-control>
            </nz-form-item>
          </div>
          <div nz-col nzSpan="12">
            <nz-form-item>
              <nz-form-label>Type</nz-form-label>
              <nz-form-control>
                <nz-select nzPlaceHolder="Please choose the type"></nz-select>
              </nz-form-control>
            </nz-form-item>
          </div>
        </div>
        <div nz-row nzGutter="8">
          <div nz-col nzSpan="12">
            <nz-form-item>
              <nz-form-label>Approver</nz-form-label>
              <nz-form-control>
                <nz-select nzPlaceHolder="Please choose the approver"></nz-select>
              </nz-form-control>
            </nz-form-item>
          </div>
          <div nz-col nzSpan="12">
            <nz-form-item>
              <nz-form-label>DateTime</nz-form-label>
              <nz-form-control>
                <nz-range-picker></nz-range-picker>
              </nz-form-control>
            </nz-form-item>
          </div>
        </div>
        <div nz-row nzGutter="8">
          <div nz-col nzSpan="24">
            <nz-form-item>
              <nz-form-label>Description</nz-form-label>
              <nz-form-control>
                <textarea nz-input placeholder="please enter url description" [nzAutosize]="{ minRows: 4, maxRows: 4 }"></textarea>
              </nz-form-control>
            </nz-form-item>
          </div>
        </div>
      </form>
      <div class="footer">
        <button type="button" (click)="close()" class="ant-btn" style="margin-right: 8px;"><span>Cancel</span></button>
        <button type="button" (click)="close()" class="ant-btn ant-btn-primary"><span>Submit</span></button>
      </div>
    </nz-drawer>
  `,
  styles: [`
    .footer {
      position: absolute;
      bottom: 0px;
      width: 100%;
      border-top: 1px solid rgb(232, 232, 232);
      padding: 10px 16px;
      text-align: right;
      left: 0px;
      background: #fff;
    }
  `]
})

export class NzDemoDrawerFromDrawerComponent {
  visible = false;

  open(): void {
    this.visible = true;
  }

  close(): void {
    this.visible = false;
  }
}

4.信息预览抽屉
需要快速预览对象概要时使用，点击遮罩区关闭。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-drawer-user-profile',
  template: `
    <nz-list [nzDataSource]="data" [nzRenderItem]="item" [nzItemLayout]="'horizontal'">
      <ng-template #item let-item>
        <nz-list-item [nzActions]="[viewAction]">
          <ng-template #viewAction>
            <a (click)="open()">View Profile</a>
          </ng-template>
          <nz-list-item-meta
            [nzTitle]="nzTitle"
            nzAvatar="https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png"
            nzDescription="Progresser AFX">
            <ng-template #nzTitle>
              <a href="https://ng.ant.design">{{item.name}}</a>
            </ng-template>
          </nz-list-item-meta>
        </nz-list-item>
      </ng-template>
    </nz-list>
    <nz-drawer [nzVisible]="visible" [nzWidth]="640" [nzClosable]="false" (nzOnClose)="close()">
      <p class="title" style=" margin-bottom: 24px;">User Profile</p>
      <p class="title">Personal</p>
      <div nz-row>
        <div nz-col nzSpan="12">
          <div class="item-wrap">
            <p class="label">Full Name:</p>Lily
          </div>
        </div>
        <div nz-col nzSpan="12">
          <div class="item-wrap">
            <p class="label">Account:</p>AntDesign@example.com
          </div>
        </div>
      </div>
      <div nz-row>
        <div nz-col nzSpan="12">
          <div class="item-wrap">
            <p class="label">City:</p>HangZhou
          </div>
        </div>
        <div nz-col nzSpan="12">
          <div class="item-wrap">
            <p class="label">Country:</p>China🇨🇳
          </div>
        </div>
      </div>
      <div nz-row>
        <div nz-col nzSpan="12">
          <div class="item-wrap">
            <p class="label">Birthday:</p>February 2,1900
          </div>
        </div>
        <div nz-col nzSpan="12">
          <div class="item-wrap">
            <p class="label">Website:</p>-
          </div>
        </div>
      </div>
      <div nz-row>
        <div nz-col nzSpan="24">
          <div class="item-wrap">
            <p class="label">Message:</p>Make things as simple as possible but no simpler.
          </div>
        </div>
      </div>
      <nz-divider></nz-divider>
      <p class="title">Company</p>
      <div nz-row>
        <div nz-col nzSpan="12">
          <div class="item-wrap">
            <p class="label">Position:</p>Programmer
          </div>
        </div>
        <div nz-col nzSpan="12">
          <div class="item-wrap">
            <p class="label">Responsibilities:</p>Coding
          </div>
        </div>
      </div>
      <div nz-row>
        <div nz-col nzSpan="12">
          <div class="item-wrap">
            <p class="label">Department:</p>AFX
          </div>
        </div>
        <div nz-col nzSpan="12">
          <div class="item-wrap">
            <p class="label">Supervisor:</p>
            <a>Lin</a>
          </div>
        </div>
      </div>
      <div nz-row>
        <div nz-col nzSpan="24">
          <div class="item-wrap">
            <p class="label">Skills:</p>C / C + +, data structures, software engineering, operating systems, computer networks, databases, compiler theory, computer architecture, Microcomputer Principle and Interface Technology, Computer English, Java, ASP, etc.
          </div>
        </div>
      </div>
      <nz-divider></nz-divider>
      <p class="title">Contacts</p>
      <div nz-row>
        <div nz-col nzSpan="12">
          <div class="item-wrap">
            <p class="label">Email:</p>AntDesign@example.com
          </div>
        </div>
        <div nz-col nzSpan="12">
          <div class="item-wrap">
            <p class="label">Phone Number:</p>+86 181 0000 0000
          </div>
        </div>
      </div>
      <div nz-row>
        <div nz-col nzSpan="24">
          <div class="item-wrap">
            <p class="label">Github:</p>
            <a href="https://github.com/NG-ZORRO/ng-zorro-antd" target="_blank">github.com/NG-ZORRO/ng-zorro-antd</a>
          </div>
        </div>
      </div>
    </nz-drawer>
  `,
  styles: [
    `
    .title {
      font-size: 16px;
      color: rgba(0, 0, 0, 0.85);
      line-height: 24px;
      display: block;
      margin-bottom: 16px;
    }
    .item-wrap {
      font-size: 14px;
      line-height: 22px;
      margin-bottom: 7px;
      color: rgba(0, 0, 0, 0.65);
    }
    .label {
      margin-right: 8px;
      display: inline-block;
      color: rgba(0, 0, 0, 0.85);
    }
    `
  ]
})

export class NzDemoDrawerUserProfileComponent {

  data = [
    {
      name: 'Lily'
    },
    {
      name: 'Lily'
    }
  ];

  visible = false;

  open(): void {
    this.visible = true;
  }

  close(): void {
    this.visible = false;
  }
}

5.多层抽屉
在抽屉内打开新的抽屉，用以解决多分支任务的复杂状况。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-drawer-multi-level-drawer',
  template: `
    <button nz-button nzType="primary" (click)="open()">New Cookbook</button>
    <nz-drawer [nzClosable]="false" [nzOffsetX]="childrenVisible ? 180 : 0" [nzWidth]="320" [nzVisible]="visible" nzTitle="Cookbook" (nzOnClose)="close()">
      <form nz-form>
        <div nz-row>
          <div nz-col nzSpan="24">
            <nz-form-item>
              <nz-form-label>Name</nz-form-label>
              <nz-form-control>
                <input nz-input placeholder="please enter cookbook name">
              </nz-form-control>
            </nz-form-item>
          </div>
        </div>
        <div nz-row>
          <div nz-col nzSpan="24">
            <nz-form-item>
              <nz-form-label>Food</nz-form-label>
              <nz-form-control>
                <nz-tag>potato</nz-tag>
                <nz-tag>eggplant</nz-tag>
                <nz-tag (click)="openChildren()">+</nz-tag>
              </nz-form-control>
            </nz-form-item>
          </div>
        </div>
      </form>
      <div class="footer">
        <button type="button" (click)="close()" class="ant-btn" style="margin-right: 8px;"><span>Cancel</span></button>
        <button type="button" (click)="close()" class="ant-btn ant-btn-primary"><span>Submit</span></button>
      </div>
      <nz-drawer [nzClosable]="false" [nzVisible]="childrenVisible" nzTitle="Food" (nzOnClose)="closeChildren()">
        <nz-list [nzDataSource]="vegetables" [nzRenderItem]="item">
          <ng-template #item let-item>
            <nz-list-item [nzContent]="item"></nz-list-item>
          </ng-template>
        </nz-list>
      </nz-drawer>
    </nz-drawer>
  `,
  styles: [`
    .footer {
      position: absolute;
      bottom: 0px;
      width: 100%;
      border-top: 1px solid rgb(232, 232, 232);
      padding: 10px 16px;
      text-align: right;
      left: 0px;
      background: #fff;
    }
  `]
})

export class NzDemoDrawerMultiLevelDrawerComponent {
  visible = false;
  childrenVisible = false;

  vegetables = ['asparagus', 'bamboo', 'potato', 'carrot', 'cilantro', 'potato', 'eggplant'];

  open(): void {
    this.visible = true;
  }

  close(): void {
    this.visible = false;
  }

  openChildren(): void {
    this.childrenVisible = true;
  }

  closeChildren(): void {
    this.childrenVisible = false;
  }
}


7.服务方式创建
Drawer 的 service 用法，示例中演示了用户自定义模板、自定义component。
注意 如果使用Component模式，则需要在NgModule中的 declarations 和 entryComponents 加入自定义的Component

import { Component, Input, ViewChild } from '@angular/core';
import { NzDrawerRef, NzDrawerService } from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-drawer-service',
  template: `
    <ng-template #drawerTemplate let-data let-drawerRef="drawerRef">
      value: {{data?.value}}
      <br>
      <button nz-button nzType="primary" (click)="drawerRef.close()">close</button>
    </ng-template>
    <div nz-form>
      <nz-form-item>
        <input nz-input [(ngModel)]="value">
      </nz-form-item>
    </div>
    <button nz-button nzType="primary" (click)="openTemplate()">Use Template</button>&nbsp;
    <button nz-button nzType="primary" (click)="openComponent()">Use Component</button>
  `
})

export class NzDemoDrawerServiceComponent {

  @ViewChild('drawerTemplate') drawerTemplate;
  value = 'ng';

  constructor(
    private drawerService: NzDrawerService
  ) {

  }

  openTemplate(): void {
    const drawerRef = this.drawerService.create({
      nzTitle: 'Template',
      nzContent: this.drawerTemplate,
      nzContentParams: {
        value: this.value
      }
    });

    drawerRef.afterOpen.subscribe(() => {
      console.log('Drawer(Template) open');
    });

    drawerRef.afterClose.subscribe(() => {
      console.log('Drawer(Template) close');
    });
  }

  openComponent(): void {
    const drawerRef = this.drawerService.create<NzDrawerCustomComponent, { value: string }, string>({
      nzTitle: 'Component',
      nzContent: NzDrawerCustomComponent,
      nzContentParams: {
        value: this.value
      }
    });

    drawerRef.afterOpen.subscribe(() => {
      console.log('Drawer(Component) open');
    });

    drawerRef.afterClose.subscribe(data => {
      console.log(data);
      if (typeof data === 'string') {
        this.value = data;
      }
    });
  }

}

@Component({
  selector: 'nz-drawer-custom-component',
  template: `
    <div>
      <input nz-input [(ngModel)]="value">
      <nz-divider></nz-divider>
      <button nzType="primary" (click)="close()" nz-button>Confirm</button>
    </div>
  `
})
export class NzDrawerCustomComponent {

  @Input() value = '';

  constructor(
    private drawerRef: NzDrawerRef<string>
  ) {
  }

  close(): void {
    this.drawerRef.close(this.value);
  }
}

8.API#
nz-drawerCOMPONENT#
参数	说明	类型	默认值
[nzClosable]	是否显示右上角的关闭按钮	boolean	true
[nzMaskClosable]	点击蒙层是否允许关闭	boolean	true
[nzMask]	是否展示遮罩	boolean	true
[nzMaskStyle]	遮罩样式	object	{}
[nzBodyStyle]	Drawer body 样式	object	{}
[nzTitle]	标题	stringTemplateRef<{}>	-
[nzVisible]	Drawer 是否可见	boolean	-
[nzPlacement]	抽屉的方向	'top''right''bottom''left'	'right'
[nzWidth]	宽度, 只在方向为 'right'或'left' 时生效	numberstring	256
[nzHeight]	高度, 只在方向为 'top'或'bottom' 时生效	numberstring	256
[nzOffsetX]	x 坐标移量(px), 只在方向为 'right'或'left' 时生效	number	0
[nzOffsetY]	y 坐标移量(px), 高度, 只在方向为 'top'或'bottom' 时生效	number	0
[nzWrapClassName]	对话框外层容器的类名	string	-
[nzZIndex]	设置 Drawer 的 z-index	number	1000
(nzOnClose)	点击遮罩层或右上角叉或取消按钮的回调	EventEmitter<MouseEvent>	-
NzDrawerServiceSERVICE#
方法名	说明	参数	返回
create	创建并打开一个 Drawer	NzDrawerOptions<T, D, R>	NzDrawerRef<R>
NzDrawerOptions#
参数	说明	类型	默认值
nzContent	Drawer body 的内容	TemplateRef<{ $implicit: D, drawerRef: NzDrawerRef }>, Type<T>	-
nzClosable	是否显示右上角的关闭按钮	boolean	true
nzContentParams	内容组件的输入参数 / Template的 context	D	-
nzMaskClosable	点击蒙层是否允许关闭	boolean	true
nzMask	是否展示遮罩	boolean	true
nzMaskStyle	遮罩样式	object	{}
nzBodyStyle	Modal body 样式	object	{}
nzTitle	标题	stringTemplateRef<{}>	-
nzWidth	宽度	numberstring	256
nzHeight	高度, 只在方向为 'top'或'bottom' 时生效	numberstring	256
nzWrapClassName	对话框外层容器的类名	string	-
nzZIndex	设置 Drawer 的 z-index	number	1000
nzPlacement	抽屉的方向	'top''right''bottom''left'	'right'
nzOffsetX	x 坐标移量(px)	number	0
nzOffsetY	y 坐标移量(px), 高度, 只在方向为 'top'或'bottom' 时生效	number	0
NzDrawerRef#
参数	说明	类型
afterOpen	打开之后的回调	Observable<void>
afterClose	关闭之后的回调	Observable<R>
close	关闭 Drawer	(result?: R) => void
open	打开 Drawer	() => void

三.Message全局提示
Message全局提示
全局展示操作反馈信息。

何时使用#
可提供成功、警告和错误等反馈信息。
顶部居中显示并自动消失，是一种不打断用户操作的轻量级提示方式。

如何使用#
如果要修改全局默认配置，你可以设置提供商 NZ_MESSAGE_CONFIG 的值来修改。 （如：在你的模块的providers中加入 { provide: NZ_MESSAGE_CONFIG, useValue: { nzDuration: 3000 }}，NZ_MESSAGE_CONFIG 可以从 ng-zorro-antd 中导入）

默认全局配置为：

{
  nzDuration: 3000,
  nzMaxStack: 7,
  nzPauseOnHover: true,
  nzAnimate: true
}

1.普通提示
信息提醒反馈。
import { Component } from '@angular/core';
import { NzMessageService } from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-message-info',
  template: `
    <button nz-button [nzType]="'primary'" (click)="createBasicMessage()">Display normal message</button>
  `,
  styles  : []
})
export class NzDemoMessageInfoComponent {

  constructor(private message: NzMessageService) {
  }

  createBasicMessage(): void {
    this.message.info('This is a normal message');
  }
}

2.其他提示类型
包括成功、失败、警告。
import { Component } from '@angular/core';
import { NzMessageService } from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-message-other',
  template: `
    <button nz-button (click)="createMessage('success')">Success</button>
    <button nz-button (click)="createMessage('error')">Error</button>
    <button nz-button (click)="createMessage('warning')">Warning</button>
  `,
  styles  : [
      `
      [nz-button] {
        margin-right: 8px;
      }
    `
  ]
})
export class NzDemoMessageOtherComponent {
  createMessage(type: string): void {
    this.message.create(type, `This is a message of ${type}`);
  }

  constructor(private message: NzMessageService) {
  }
}

3.修改延时
自定义时长 10s，默认时长为 3s
import { Component } from '@angular/core';
import { NzMessageService } from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-message-duration',
  template: `
    <button nz-button [nzType]="'default'" (click)="createBasicMessage()">Customized display duration</button>
  `,
  styles  : []
})
export class NzDemoMessageDurationComponent {
  createBasicMessage(): void {
    this.message.success('This is a prompt message for success, and it will disappear in 10 seconds', { nzDuration: 10000 });
  }

  constructor(private message: NzMessageService) {
  }
}

4.加载中
进行全局 loading，异步自行移除。
import { Component } from '@angular/core';
import { NzMessageService } from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-message-loading',
  template: `
    <button nz-button [nzType]="'default'" (click)="createBasicMessage()">Display a loading indicator</button>
  `,
  styles  : []
})
export class NzDemoMessageLoadingComponent {

  constructor(private message: NzMessageService) {
  }

  createBasicMessage(): void {
    const id = this.message.loading('Action in progress..', { nzDuration: 0 }).messageId;
    setTimeout(_ => {
      this.message.remove(id);
    }, 2500);
  }
}

6.API#
NzMessageServiceSERVICE#
组件提供了一些服务方法，使用方式和参数如下：

NzMessageService.success(content, [options])
NzMessageService.error(content, [options])
NzMessageService.info(content, [options])
NzMessageService.warning(content, [options])
NzMessageService.loading(content, [options])
参数	说明	类型	默认值
content	提示内容	string	-
options	支持设置针对当前提示框的参数，见下方表格	object	-
options 支持设置的参数如下：

参数	说明	类型
nzDuration	持续时间(毫秒)，当设置为0时不消失	number
nzPauseOnHover	鼠标移上时禁止自动移除	boolean
nzAnimate	开关动画效果	boolean
还提供了全局销毁方法：

NzMessageService.remove(id) // 移除特定id的消息，当id为空时，移除所有消息（该消息id通过上述方法返回值中得到）
全局配置（NZ_MESSAGE_CONFIG）#
参数	说明	类型	默认值
nzDuration	持续时间(毫秒)，当设置为0时不消失	number	3000
nzMaxStack	同一时间可展示的最大提示数量	number	8
nzPauseOnHover	鼠标移上时禁止自动移除	boolean	true
nzAnimate	开关动画效果	boolean	true

四.Modal对话框
何时使用#
需要用户处理事务，又不希望跳转页面以致打断工作流程时，可以使用 Modal 在当前页面正中打开一个浮层，承载相应的操作。
另外当需要一个简洁的确认框询问用户时，可以使用精心封装好的 NzModalService.confirm() 等方法。
推荐使用加载Component的方式弹出Modal，这样弹出层的Component逻辑可以与外层Component完全隔离，并且做到可以随时复用，
在弹出层Component中可以通过依赖注入NzModalRef方式直接获取模态框的组件实例，用于控制在弹出层组件中控制模态框行为。
如何使用#
如果要修改全局默认配置，你可以设置提供商 NZ_MODAL_CONFIG 的值来修改。 （如：在你的模块的providers中加入 { provide: NZ_MODAL_CONFIG, useValue: { autoBodyPadding: false }}，NZ_MODAL_CONFIG 可以从 ng-zorro-antd 中导入）
默认全局配置为：
{
  autoBodyPadding: true, // 是否自动给body加上padding及overflow来隐藏滚动条
}

1.基本
第一个对话框。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-modal-basic',
  template: `
    <button nz-button [nzType]="'primary'" (click)="showModal()"><span>Show Modal</span></button>
    <nz-modal [(nzVisible)]="isVisible" nzTitle="The first Modal" (nzOnCancel)="handleCancel()" (nzOnOk)="handleOk()">
      <p>Content one</p>
      <p>Content two</p>
      <p>Content three</p>
    </nz-modal>
  `,
  styles: []
})
export class NzDemoModalBasicComponent {
  isVisible = false;

  constructor() {}

  showModal(): void {
    this.isVisible = true;
  }

  handleOk(): void {
    console.log('Button ok clicked!');
    this.isVisible = false;
  }

  handleCancel(): void {
    console.log('Button cancel clicked!');
    this.isVisible = false;
  }
}

2.异步关闭
点击确定后异步关闭对话框，例如提交表单。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-modal-async',
  template: `
    <button nz-button nzType="primary" (click)="showModal()">
      <span>Show Modal</span>
    </button>
    <nz-modal [(nzVisible)]="isVisible" nzTitle="Modal Title" (nzOnCancel)="handleCancel()" (nzOnOk)="handleOk()" [nzOkLoading]="isOkLoading">
      <p>Modal Content</p>
    </nz-modal>
  `,
  styles: []
})
export class NzDemoModalAsyncComponent {
  isVisible = false;
  isOkLoading = false;

  showModal(): void {
    this.isVisible = true;
  }

  handleOk(): void {
    this.isOkLoading = true;
    window.setTimeout(() => {
      this.isVisible = false;
      this.isOkLoading = false;
    }, 3000);
  }

  handleCancel(): void {
    this.isVisible = false;
  }
}

3.自定义页脚
更复杂的例子，自定义了页脚的按钮，点击提交后进入 loading 状态，完成后关闭。
不需要默认确定取消按钮时，你可以把 nzFooter 设为 null。
import { Component } from '@angular/core';


@Component({
  selector: 'nz-demo-modal-footer',
  template: `
    <button nz-button nzType="primary" (click)="showModal()">
      <span>Show Modal</span>
    </button>
    <nz-modal [(nzVisible)]="isVisible" [nzTitle]="modalTitle" [nzContent]="modalContent" [nzFooter]="modalFooter" (nzOnCancel)="handleCancel()">
      <ng-template #modalTitle>
        Custom Modal Title
      </ng-template>

      <ng-template #modalContent>
        <p>Modal Content</p>
        <p>Modal Content</p>
        <p>Modal Content</p>
        <p>Modal Content</p>
        <p>Modal Content</p>
      </ng-template>

      <ng-template #modalFooter>
        <span>Modal Footer: </span>
        <button nz-button nzType="default" (click)="handleCancel()">Custom Callback</button>
        <button nz-button nzType="primary" (click)="handleOk()" [nzLoading]="isConfirmLoading">Custom Submit</button>
      </ng-template>
    </nz-modal>
  `,
  styles: []
})
export class NzDemoModalFooterComponent {
  isVisible = false;
  isConfirmLoading = false;

  constructor() { }

  showModal(): void {
    this.isVisible = true;
  }

  handleOk(): void {
    this.isConfirmLoading = true;
    setTimeout(() => {
      this.isVisible = false;
      this.isConfirmLoading = false;
    }, 3000);
  }

  handleCancel(): void {
    this.isVisible = false;
  }
}

4.确认对话框
使用 NzModalService.confirm() 可以快捷地弹出确认框。
import { Component } from '@angular/core';
import { NzModalService } from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-modal-confirm',
  template: `
    <button nz-button nzType="info" (click)="showConfirm()">Confirm</button>
    <button nz-button nzType="dashed" (click)="showDeleteConfirm()">Delete</button>
  `,
  styles  : [
      `button {
      margin-right: 8px;
    }`
  ]
})
export class NzDemoModalConfirmComponent {
  constructor(private modalService: NzModalService) {
  }

  showConfirm(): void {
    this.modalService.confirm({
      nzTitle  : '<i>Do you Want to delete these items?</i>',
      nzContent: '<b>Some descriptions</b>',
      nzOnOk   : () => console.log('OK')
    });
  }

  showDeleteConfirm(): void {
    this.modalService.confirm({
      nzTitle     : 'Are you sure delete this task?',
      nzContent   : '<b style="color: red;">Some descriptions</b>',
      nzOkText    : 'Yes',
      nzOkType    : 'danger',
      nzOnOk      : () => console.log('OK'),
      nzCancelText: 'No',
      nzOnCancel  : () => console.log('Cancel')
    });
  }
}

5.确认对话框
使用 NzModalService.confirm() 可以快捷地弹出确认框。NzOnCancel/NzOnOk 返回 promise 可以延迟关闭
import { Component } from '@angular/core';
import { NzModalRef, NzModalService } from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-modal-confirm-promise',
  template: `
    <button nz-button nzType="info" (click)="showConfirm()">Confirm</button>
  `,
  styles  : []
})
export class NzDemoModalConfirmPromiseComponent {
  confirmModal: NzModalRef; // For testing by now

  constructor(private modal: NzModalService) { }

  showConfirm(): void {
    this.confirmModal = this.modal.confirm({
      nzTitle: 'Do you Want to delete these items?',
      nzContent: 'When clicked the OK button, this dialog will be closed after 1 second',
      nzOnOk: () => new Promise((resolve, reject) => {
        setTimeout(Math.random() > 0.5 ? resolve : reject, 1000);
      }).catch(() => console.log('Oops errors!'))
    });
  }
}

6.信息提示
各种类型的信息提示，只提供一个按钮用于关闭。
import { Component } from '@angular/core';
import { NzModalService } from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-modal-info',
  template: `
    <button nz-button (click)="info()">Info</button>
    <button nz-button (click)="success()">Success</button>
    <button nz-button (click)="error()">Error</button>
    <button nz-button (click)="warning()">Warning</button>
  `,
  styles  : [
    `button {
      margin-right: 8px;
    }`
  ]
})
export class NzDemoModalInfoComponent {
  constructor(private modalService: NzModalService) { }

  info(): void {
    this.modalService.info({
      nzTitle: 'This is a notification message',
      nzContent: '<p>some messages...some messages...</p><p>some messages...some messages...</p>',
      nzOnOk: () => console.log('Info OK')
    });
  }

  success(): void {
    this.modalService.success({
      nzTitle: 'This is a success message',
      nzContent: 'some messages...some messages...'
    });
  }

  error(): void {
    this.modalService.error({
      nzTitle: 'This is an error message',
      nzContent: 'some messages...some messages...'
    });
  }

  warning(): void {
    this.modalService.warning({
      nzTitle: 'This is an warning message',
      nzContent: 'some messages...some messages...'
    });
  }
}


7.国际化
设置 nzOkText 与 nzCancelText 以自定义按钮文字。
import { Component } from '@angular/core';
import { NzModalService } from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-modal-locale',
  template: `
    <div>
      <button nz-button nzType="primary" (click)="showModal()">Modal</button>
      <nz-modal
        [(nzVisible)]="isVisible"
        nzTitle="Modal"
        nzOkText="Ok"
        nzCancelText="Cancel"
        (nzOnOk)="handleOk()"
        (nzOnCancel)="handleCancel()"
      >
        <p>Bla bla ...</p>
        <p>Bla bla ...</p>
        <p>Bla bla ...</p>
      </nz-modal>
    </div>
    <br/>
    <button nz-button nzType="info" (click)="showConfirm()">Confirm</button>
  `,
  styles: []
})
export class NzDemoModalLocaleComponent {
  isVisible = false;

  constructor(private modalService: NzModalService) { }

  showModal(): void {
    this.isVisible = true;
  }

  handleOk(): void {
    this.isVisible = false;
  }

  handleCancel(): void {
    this.isVisible = false;
  }

  showConfirm(): void {
    this.modalService.confirm({
      nzTitle: 'Confirm',
      nzContent: 'Bla bla ...',
      nzOkText: 'OK',
      nzCancelText: 'Cancel'
    });
  }
}

8.手动移除
手动关闭modal。
import { Component } from '@angular/core';
import { NzModalService } from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-modal-manual',
  template: `
    <button nz-button (click)="success()">Success</button>
  `,
  styles: []
})
export class NzDemoModalManualComponent {
  constructor(private modalService: NzModalService) { }

  success(): void {
    const modal = this.modalService.success({
      nzTitle: 'This is a notification message',
      nzContent: 'This modal will be destroyed after 1 second'
    });

    window.setTimeout(() => modal.destroy(), 1000);
  }
}

9.自定义位置
您可以直接使用 nzStyle.top 或配合其他样式来设置对话框位置。
注意 由于Angular的样式隔离，若在Component中没有加入encapsulation: ViewEncapsulation.None，则您可能需要在自定义样式内采用::ng-deep来覆盖NgZorro的样式
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-modal-position',
  template: `
    <button nz-button nzType="primary" (click)="showModalTop()">Display a modal dialog at 20px to Top</button>
    <nz-modal [nzStyle]="{ top: '20px' }" [(nzVisible)]="isVisibleTop" nzTitle="20px to Top" (nzOnCancel)="handleCancelTop()" (nzOnOk)="handleOkTop()">
      <p>some contents...</p>
      <p>some contents...</p>
      <p>some contents...</p>
    </nz-modal>

    <br/><br/>

    <button nz-button nzType="primary" (click)="showModalMiddle()">Vertically centered modal dialog</button>
    <nz-modal nzWrapClassName="vertical-center-modal" [(nzVisible)]="isVisibleMiddle" nzTitle="Vertically centered modal dialog" (nzOnCancel)="handleCancelMiddle()" (nzOnOk)="handleOkMiddle()">
      <p>some contents...</p>
      <p>some contents...</p>
      <p>some contents...</p>
    </nz-modal>
  `,
  styles: [ `
    ::ng-deep .vertical-center-modal {
      display: flex;
      align-items: center;
      justify-content: center;
    }

    ::ng-deep .vertical-center-modal .ant-modal {
      top: 0;
    }
  ` ]
})
export class NzDemoModalPositionComponent {
  isVisibleTop = false;
  isVisibleMiddle = false;

  showModalTop(): void {
    this.isVisibleTop = true;
  }

  showModalMiddle(): void {
    this.isVisibleMiddle = true;
  }

  handleOkTop(): void {
    console.log('点击了确定');
    this.isVisibleTop = false;
  }

  handleCancelTop(): void {
    this.isVisibleTop = false;
  }

  handleOkMiddle(): void {
    console.log('click ok');
    this.isVisibleMiddle = false;
  }

  handleCancelMiddle(): void {
    this.isVisibleMiddle = false;
  }
}

10.服务方式创建
Modal的service用法，示例中演示了用户自定义模板、自定义component、以及注入模态框实例的方法。
注意 如果使用Component模式，则需要在NgModule中的 declarations 和 entryComponents 加入自定义的Component

/* entryComponents: NzModalCustomComponent */

import { Component, Input, TemplateRef, ViewChild } from '@angular/core';
import { NzModalRef, NzModalService } from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-modal-service',
  template: `
    <button nz-button nzType="primary" (click)="createModal()">
      <span>String</span>
    </button>

    <button nz-button nzType="primary" (click)="createTplModal(tplTitle, tplContent, tplFooter)">
      <span>Template</span>
    </button>
    <ng-template #tplTitle>
      <span>Title Template</span>
    </ng-template>
    <ng-template #tplContent>
      <p>some contents...</p>
      <p>some contents...</p>
      <p>some contents...</p>
      <p>some contents...</p>
      <p>some contents...</p>
    </ng-template>
    <ng-template #tplFooter>
      <button nz-button nzType="primary" (click)="destroyTplModal()" [nzLoading]="tplModalButtonLoading">Close after submit</button>
    </ng-template>

    <br /><br />

    <button nz-button nzType="primary" (click)="createComponentModal()">
      <span>Use Component</span>
    </button>

    <button nz-button nzType="primary" (click)="createCustomButtonModal()">Custom Button</button>

    <br /><br />

    <button nz-button nzType="primary" (click)="openAndCloseAll()">Open more modals then close all after 2s</button>
    <nz-modal [(nzVisible)]="htmlModalVisible" nzMask="false" nzZIndex="1001" nzTitle="Non-service html modal">This is a non-service html modal</nz-modal>
  `,
  styles  : [
    `button {
      margin-right: 8px;
    }`
  ]
})
export class NzDemoModalServiceComponent {
  tplModal: NzModalRef;
  tplModalButtonLoading = false;
  htmlModalVisible = false;

  constructor(private modalService: NzModalService) { }

  createModal(): void {
    this.modalService.create({
      nzTitle: 'Modal Title',
      nzContent: 'string, will close after 1 sec',
      nzClosable: false,
      nzOnOk: () => new Promise((resolve) => window.setTimeout(resolve, 1000))
    });
  }

  createTplModal(tplTitle: TemplateRef<{}>, tplContent: TemplateRef<{}>, tplFooter: TemplateRef<{}>): void {
    this.tplModal = this.modalService.create({
      nzTitle: tplTitle,
      nzContent: tplContent,
      nzFooter: tplFooter,
      nzMaskClosable: false,
      nzClosable: false,
      nzOnOk: () => console.log('Click ok')
    });
  }

  destroyTplModal(): void {
    this.tplModalButtonLoading = true;
    window.setTimeout(() => {
      this.tplModalButtonLoading = false;
      this.tplModal.destroy();
    }, 1000);
  }

  createComponentModal(): void {
    const modal = this.modalService.create({
      nzTitle: 'Modal Title',
      nzContent: NzModalCustomComponent,
      nzComponentParams: {
        title: 'title in component',
        subtitle: 'component sub title，will be changed after 2 sec'
      },
      nzFooter: [{
        label: 'change component tilte from outside',
        onClick: (componentInstance) => {
          componentInstance.title = 'title in inner component is changed';
        }
      }]
    });

    modal.afterOpen.subscribe(() => console.log('[afterOpen] emitted!'));

    // Return a result when closed
    modal.afterClose.subscribe((result) => console.log('[afterClose] The result is:', result));

    // delay until modal instance created
    window.setTimeout(() => {
      const instance = modal.getContentComponent();
      instance.subtitle = 'sub title is changed';
    }, 2000);
  }

  createCustomButtonModal(): void {
    const modal = this.modalService.create({
      nzTitle: 'custom button demo',
      nzContent: 'pass array of button config to nzFooter to create multiple buttons',
      nzFooter: [
        {
          label: 'Close',
          shape: 'default',
          onClick: () => modal.destroy()
        },
        {
          label: 'Confirm',
          type: 'primary',
          onClick: () => this.modalService.confirm({ nzTitle: 'Confirm Modal Title', nzContent: 'Confirm Modal Content' })
        },
        {
          label: 'Change Button Status',
          type: 'danger',
          loading: false,
          onClick(): void {
            this.loading = true;
            window.setTimeout(() => this.loading = false, 1000);
            window.setTimeout(() => {
              this.loading = false;
              this.disabled = true;
              this.label = 'can not be clicked！';
            }, 2000);
          }
        },
        {
          label: 'async load',
          type: 'dashed',
          onClick: () => new Promise(resolve => window.setTimeout(resolve, 2000))
        }
      ]
    });
  }

  openAndCloseAll(): void {
    let pos = 0;

    [ 'create', 'info', 'success', 'error' ].forEach((method) => this.modalService[method]({
      nzMask: false,
      nzTitle: `Test ${method} title`,
      nzContent: `Test content: <b>${method}</b>`,
      nzStyle: { position: 'absolute', top: `${pos * 70}px`, left: `${(pos++) * 300}px` }
    }));

    this.htmlModalVisible = true;

    this.modalService.afterAllClose.subscribe(() => console.log('afterAllClose emitted!'));

    window.setTimeout(() => this.modalService.closeAll(), 2000);
  }
}

@Component({
  selector: 'nz-modal-custom-component',
  template: `
    <div>
      <h2>{{ title }}</h2>
      <h4>{{ subtitle }}</h4>
      <p>
        <span>Get Modal instance in component</span>
        <button nz-button [nzType]="'primary'" (click)="destroyModal()">destroy modal in the component</button>
      </p>
    </div>
  `
})
export class NzModalCustomComponent {
  @Input() title: string;
  @Input() subtitle: string;

  constructor(private modal: NzModalRef) { }

  destroyModal(): void {
    this.modal.destroy({ data: 'this the result data' });
  }
}

API#
NzModalServiceSERVICE#
对话框当前分为2种模式，普通模式 和 确认框模式（即Confirm对话框，通过调用confirm/info/success/error/warning弹出），两种模式对API的支持程度稍有不同。

参数	说明	类型	默认值
nzAfterOpen	Modal 打开后的回调	EventEmitter	无
nzAfterClose	Modal 完全关闭后的回调，可监听close/destroy方法传入的参数	EventEmitter	无
nzBodyStyle	Modal body 样式	object	无
nzCancelText	取消按钮文字。设为 null 表示不显示取消按钮（若在普通模式下使用了 nzFooter 参数，则该值无效）	string	取消
nzClosable	是否显示右上角的关闭按钮。确认框模式下该值无效（默认会被隐藏）	boolean	true
nzOkLoading	确定按钮 loading	boolean	false
nzCancelLoading	取消按钮 loading	boolean	false
nzFooter	底部内容。1. 仅在普通模式下有效。
2. 可通过传入 ModalButtonOptions 来最大程度自定义按钮（详见案例或下方说明）。
3. 当不需要底部时，可以设为 null	string
TemplateRef
ModalButtonOptions	默认的确定取消按钮
nzGetContainer	指定 Modal 挂载的 HTML 节点	HTMLElement
() => HTMLElement	默认容器
nzMask	是否展示遮罩	boolean	true
nzMaskClosable	点击蒙层是否允许关闭	boolean	true
nzMaskStyle	遮罩样式	object	无
nzOkText	确认按钮文字。设为 null 表示不显示取消按钮（若在普通模式下使用了 nzFooter 参数，则该值无效）	string	确定
nzOkType	确认按钮类型。与button的type类型值一致	string	primary
nzStyle	可用于设置浮层的样式，调整浮层位置等	object	无
nzTitle	标题。留空表示不展示标题。TemplateRef的使用方法可参考案例	string
TemplateRef	无
nzVisible	对话框是否可见。当以 <nz-modal> 标签使用时，请务必使用双向绑定，例如：[(nzVisible)]="visible"	boolean	false
nzWidth	宽度。使用数字时，默认单位为px	string
number	520
nzWrapClassName	对话框外层容器的类名	string	无
nzZIndex	设置 Modal 的 z-index	number	1000
nzOnCancel	点击遮罩层或右上角叉或取消按钮的回调（若nzContent为Component，则将会以该Component实例作为参数）。注：当以NzModalService.create创建时，此参数应传入function（回调函数）。该函数可返回promise，待执行完毕或promise结束时，将自动关闭对话框（返回false可阻止关闭）	EventEmitter	无
nzOnOk	点击确定回调（若nzContent为Component，则将会以该Component实例作为参数）。注：当以NzModalService.create创建时，此参数应传入function（回调函数）。该函数可返回promise，待执行完毕或promise结束时，将自动关闭对话框（返回false可阻止关闭）	EventEmitter	无
nzContent	内容	string
TemplateRef
Component
ng-content	无
nzComponentParams	当nzContent为组件类(Component)时，该参数中的属性将传入nzContent实例中	object	无
nzIconType	图标 Icon 类型。仅 确认框模式 下有效	string	question-circle
注意#
<nz-modal> 默认关闭后状态不会自动清空, 如果希望每次打开都是新内容，请采用 NzModalService 服务方式创建对话框（当以服务方式创建时，默认会监听 nzAfterClose 并销毁对话框）。

通过 NzModalService 服务方式创建的对话框需要自行管理其生命周期。比如你在页面路由切换时，服务方式创建的对话框并不会被销毁，你需要使用对话框引用来手动销毁（NzModalRef.close() 或 NzModalRef.destroy()）。

采用服务方式创建普通模式对话框#
您可调用 NzModalService.create(options) 来动态创建普通模式对话框，这里的 options 是一个对象，支持上方API中给出的支持 普通模式 的参数

确认框模式 - NzModalService.method()#
包括：

NzModalService.info
NzModalService.success
NzModalService.error
NzModalService.warning
NzModalService.confirm
以上均为一个函数，参数为 object，与上方API一致。部分属性类型或初始值有所不同，已列在下方：

参数	说明	类型	默认值
nzOnOk	点击确定按钮时将执行的回调函数（若nzContent为Component，则将会以该Component实例作为参数）。该函数可返回promise，待执行完毕或promise结束时，将自动关闭对话框（返回false可阻止关闭）	function	无
nzOnCancel	点击遮罩层或右上角叉或取消按钮的回调（若nzContent为Component，则将会以该Component实例作为参数）。该函数可返回promise，待执行完毕或promise结束时，将自动关闭对话框（返回false可阻止关闭）	function	无
nzWidth	宽度	string
number	416
nzMaskClosable	点击蒙层是否允许关闭	boolean	false
以上函数调用后，会返回一个引用，可以通过该引用关闭弹窗。

constructor(modal: NzModalService) {
  const ref: NzModalRef = modal.info();
  ref.close(); // 或 ref.destroy(); 将直接销毁对话框
}
相关类型定义#
NzModalService的其他方法/属性SERVICE#
方法/属性	说明	类型
openModals	当前打开的所有Modal引用列表	NzModalRef[]
afterAllClose	所有Modal完全关闭后的回调	Observable<void>
closeAll()	关闭所有模态框	function
NzModalRef#
NzModalRef 对象用于控制对话框以及进行内容间的通信

通过服务方式 NzModalService.xxx() 创建的对话框，都会返回一个 NzModalRef 对象，用于操控该对话框（若使用nzContent为Component时，也可通过依赖注入 NzModalRef 方式获得此对象），该对象具有以下方法：

方法/属性	说明
afterOpen	同nzAfterOpen，但类型为Observable<void>
afterClose	同nzAfterClose，但类型为Observable<result:any>
open()	打开(显示)对话框。若对话框已销毁，则调用此函数将失效
close(result: any)	关闭(隐藏)对话框。注：当用于以服务方式创建的对话框，此方法将直接 销毁 对话框（同destroy方法）
destroy(result: any)	销毁对话框。注：仅用于服务方式创建的对话框（非服务方式创建的对话框，此方法只会隐藏对话框）
getContentComponent()	获取对话框内容中nzContent的Component实例instance。注：当对话框还未初始化完毕（ngOnInit未执行）时，此函数将返回undefined
triggerOk()	手动触发nzOnOk
triggerCancel()	手动触发nzOnCancel
ModalButtonOptions（用于自定义底部按钮）#
可将此类型数组传入 nzFooter，用于自定义底部按钮。

按钮配置项如下（与button组件保持一致）：

nzFooter: [{
  label: string; // 按钮文本
  type?: string; // 类型
  shape?: string; // 形状
  ghost?: boolean; // 是否ghost
  size?: string; // 大小
  autoLoading?: boolean; // 默认为true，若为true时，当onClick返回promise时此按钮将自动置为loading状态

  // 提示：下方方法的this指向该配置对象自身。当nzContent为组件类时，下方方法传入的contentComponentInstance参数为该组件类的实例
  // 是否显示该按钮
  show?: boolean | ((this: ModalButtonOptions, contentComponentInstance?: object) => boolean);
  // 是否显示为loading
  loading?: boolean | ((this: ModalButtonOptions, contentComponentInstance?: object) => boolean);
  // 是否禁用
  disabled?: boolean | ((this: ModalButtonOptions, contentComponentInstance?: object) => boolean);
  // 按钮点击回调
  onClick?(this: ModalButtonOptions, contentComponentInstance?: object): void | Promise&lt;void&gt; | any;
}]
以上配置项也可在运行态实时改变，来触发按钮行为改变。


五.Notification通知提醒框
全局展示通知提醒信息。

何时使用#
在系统四个角显示通知提醒信息。经常用于以下情况：

较为复杂的通知内容。
带有交互的通知，给出用户下一步的行动点。
系统主动推送。
如何使用#
与NzMessage类似，如果要修改全局默认配置，你可以设置提供商 NZ_NOTIFICATION_CONFIG 的值来修改。 （如：在你的模块的providers中加入 { provide: NZ_NOTIFICATION_CONFIG, useValue: { nzDuration: 3000 }}，NZ_NOTIFICATION_CONFIG 可以从 ng-zorro-antd 中导入）

默认全局配置为：

{
  nzTop         : '24px',
  nzBottom      : '24px',
  nzPlacement   : 'topRight',
  nzDuration    : 4500,
  nzMaxStack    : 7,
  nzPauseOnHover: true,
  nzAnimate     : true
 }

1.基本
最简单的用法，4.5 秒后自动关闭
import { Component } from '@angular/core';
import { NzNotificationService } from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-notification-basic',
  template: `
    <button nz-button [nzType]="'primary'" (click)="createBasicNotification()">Open the notification box</button>
  `,
  styles  : []
})
export class NzDemoNotificationBasicComponent {

  constructor(private notification: NzNotificationService) {
  }

  createBasicNotification(): void {
    this.notification.blank( 'Notification Title', 'This is the content of the notification. This is the content of the notification. This is the content of the notification.');
  }
}

2.自动关闭的延时
自定义通知框自动关闭的延时，默认4.5s，取消自动关闭只要将该值设为 0 即可。
import { Component } from '@angular/core';
import { NzNotificationService } from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-notification-duration',
  template: `
    <button nz-button [nzType]="'primary'" (click)="createBasicNotification()">Open the notification box</button>
  `,
  styles  : []
})
export class NzDemoNotificationDurationComponent {
  createBasicNotification(): void {
    this.notification.blank('Notification Title', 'I will never close automatically. I will be close automatically. I will never close automatically.', { nzDuration: 0 });
  }

  constructor(private notification: NzNotificationService) {
  }
}

3.带有图标的通知提醒框
通知提醒框左侧有图标。
import { Component } from '@angular/core';
import { NzNotificationService } from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-notification-with-icon',
  template: `
    <button nz-button (click)="createNotification('success')">Success</button>
    <button nz-button (click)="createNotification('info')">Info</button>
    <button nz-button (click)="createNotification('warning')">Warning</button>
    <button nz-button (click)="createNotification('error')">Error</button>
  `,
  styles  : [
    `
      :host ::ng-deep .ant-btn {
        margin-right: 1em;
      }
    `
  ]
})
export class NzDemoNotificationWithIconComponent {
  createNotification(type: string): void {
    this.notification.create(type, 'Notification Title',
      'This is the content of the notification. This is the content of the notification. This is the content of the notification.');
  }

  constructor(private notification: NzNotificationService) {
  }
}

4.自定义按钮
自定义关闭按钮的样式和文字。
import { Component, TemplateRef } from '@angular/core';
import { NzNotificationService } from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-notification-with-btn',
  template: `
    <ng-template #template let-notification>
      <div class="ant-notification-notice-content">
        <div>
          <div class="ant-notification-notice-message">Notification Title</div>
          <div class="ant-notification-notice-description">
            A function will be be called after the notification is closed (automatically after the "duration" time of manually).
          </div>
          <span class="ant-notification-notice-btn">
            <button nz-button nzType="primary" nzSize="small" (click)="notification.close()"><span>Confirm</span></button>
          </span>
        </div>
      </div>
    </ng-template>
    <button nz-button [nzType]="'primary'" (click)="createBasicNotification(template)">Open the notification box</button>
  `,
  styles  : []
})
export class NzDemoNotificationWithBtnComponent {

  constructor(private notification: NzNotificationService) {
  }

  createBasicNotification(template: TemplateRef<{}>): void {
    this.notification.template(template);
  }
}

5.自定义图标
图标可以被自定义。
import { Component, TemplateRef } from '@angular/core';
import { NzNotificationService } from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-notification-custom-icon',
  template: `
    <ng-template #template>
      <div class="ant-notification-notice-content">
        <div class="ant-notification-notice-with-icon">
          <span class="ant-notification-notice-icon"><i nz-icon type="smile" style="color: rgb(16, 142, 233);"></i></span>
          <div class="ant-notification-notice-message">Notification Title</div>
          <div class="ant-notification-notice-description">
            This is the content of the notification. This is the content of the notification. This is the content of the notification.
          </div>
        </div>
      </div>
    </ng-template>
    <button nz-button [nzType]="'primary'" (click)="createBasicNotification(template)">Open the notification box</button>
  `,
  styles  : []
})
export class NzDemoNotificationCustomIconComponent {

  constructor(private notification: NzNotificationService) {
  }

  createBasicNotification(template: TemplateRef<{}>): void {
    this.notification.template(template);
  }
}

6.位置
可以设置通知从右上角、右下角、左下角、左上角弹出。
import { Component } from '@angular/core';
import { NzNotificationService } from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-notification-placement',
  template: `
    <nz-select [(ngModel)]="placement" style="width: 120px; margin-right: 10px;" (ngModelChange)="clearBeforeNotifications()">
      <nz-option nzValue="topLeft" nzLabel="topLeft"></nz-option>
      <nz-option nzValue="topRight" nzLabel="topRight"></nz-option>
      <nz-option nzValue="bottomLeft" nzLabel="bottomLeft"></nz-option>
      <nz-option nzValue="bottomRight" nzLabel="bottomRight"></nz-option>
    </nz-select>
    <button nz-button [nzType]="'primary'" (click)="createBasicNotification()">Open the notification box</button>
  `,
  styles  : []
})
export class NzDemoNotificationPlacementComponent {
  placement = 'topRight';

  clearBeforeNotifications(): void {
    this.notification.remove();
  }

  createBasicNotification(): void {
    this.notification.config({
      nzPlacement: this.placement
    });
    this.notification.blank('Notification Title', 'This is the content of the notification. This is the content of the notification. This is the content of the notification.');
  }

  constructor(private notification: NzNotificationService) {
  }
}

7.自定义样式
使用 nzStyle 和 nzClass 来定义样式。
import { Component } from '@angular/core';
import { NzNotificationService } from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-notification-custom-style',
  template: `
    <button nz-button [nzType]="'primary'" (click)="createBasicNotification()">Open the notification box</button>
  `,
  styles  : []
})
export class NzDemoNotificationCustomStyleComponent {

  constructor(private notification: NzNotificationService) {
  }

  createBasicNotification(): void {
    this.notification.blank('Notification Title', 'This is the content of the notification. This is the content of the notification. This is the content of the notification.', {
      nzStyle: {
        width     : '600px',
        marginLeft: '-265px'
      },
      nzClass: 'test-class'
    });
  }
}

8.API#
NzNotificationServiceSERVICE#
组件提供了一些服务方法，使用方式和参数如下：

NzNotificationService.blank(title, content, [options]) // 不带图标的提示
NzNotificationService.success(title, content, [options])
NzNotificationService.error(title, content, [options])
NzNotificationService.info(title, content, [options])
NzNotificationService.warning(title, content, [options])
参数	说明	类型	默认值
title	标题	string	-
content	提示内容	string	-
options	支持设置针对当前提示框的参数，见下方表格	object	-
options 支持设置的参数如下：

参数	说明	类型
nzDuration	持续时间(毫秒)，当设置为0时不消失	number
nzPauseOnHover	鼠标移上时禁止自动移除	boolean
nzAnimate	开关动画效果	boolean
nzStyle	自定义内联样式	object
nzClass	自定义 CSS class	object
还提供了全局销毁方法：

NzNotificationService.remove(id) // 移除特定id的消息，当id为空时，移除所有消息（该消息id通过上述方法返回值中得到）
全局配置（NZ_MESSAGE_CONFIG）#
参数	说明	类型	默认值
nzDuration	持续时间(毫秒)，当设置为0时不消失	number	4500
nzMaxStack	同一时间可展示的最大提示数量	number	8
nzPauseOnHover	鼠标移上时禁止自动移除	boolean	true
nzAnimate	开关动画效果	boolean	true
nzTop	消息从顶部弹出时，距离顶部的位置。	string	24px
nzBottom	消息从底部弹出时，距离底部的位置。	string	24px
nzPlacement	弹出位置，可选 topLefttopRightbottomLeftbottomRight	string	topRight

六.Popconfirm气泡确认框
点击元素，弹出气泡式的确认框。

何时使用#
目标元素的操作需要用户进一步的确认时，在目标元素附近弹出浮层提示，询问用户。
和 confirm 弹出的全屏居中模态对话框相比，交互形式更轻量。

1.基本
最简单的用法。
import { Component } from '@angular/core';
import { NzMessageService } from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-popconfirm-basic',
  template: `
    <a nz-popconfirm nzTitle="Are you sure delete this task?" (nzOnConfirm)="confirm()" (nzOnCancel)="cancel()">Delete</a>
  `
})
export class NzDemoPopconfirmBasicComponent {

  cancel(): void {
    this.nzMessageService.info('click cancel');
  }

  confirm(): void {
    this.nzMessageService.info('click confirm');
  }

  constructor(private nzMessageService: NzMessageService) {

  }

}

2.国际化
使用 okText 和 cancelText 自定义按钮文字。
import { Component } from '@angular/core';
import { NzMessageService } from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-popconfirm-locale',
  template: `
    <a nz-popconfirm nzTitle="Are you sure?" nzOkText="ok" nzCancelText="cancel" (nzOnConfirm)="confirm()" (nzOnCancel)="cancel()">delete</a>
  `
})

export class NzDemoPopconfirmLocaleComponent {

  cancel(): void {
    this.nzMessageService.info('click cancel');
  }

  confirm(): void {
    this.nzMessageService.info('click confirm');
  }

  constructor(private nzMessageService: NzMessageService) {

  }
}

3.位置
位置有十二个方向。如需箭头指向目标元素中心，可以设置 arrowPointAtCenter。
import { Component } from '@angular/core';
import { NzMessageService } from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-popconfirm-placement',
  template: `
    <div style="margin-left: 60px">
      <button nz-popconfirm nzTitle="Are you sure delete this task?" (nzOnConfirm)="confirm()" (nzOnCancel)="cancel()" nzPlacement="topLeft" nz-button>TL</button>
      <button nz-popconfirm nzTitle="Are you sure delete this task?" (nzOnConfirm)="confirm()" (nzOnCancel)="cancel()" nzPlacement="top" nz-button>Top</button>
      <button nz-popconfirm nzTitle="Are you sure delete this task?" (nzOnConfirm)="confirm()" (nzOnCancel)="cancel()" nzPlacement="topRight" nz-button>TR</button>
    </div>
    <div style="width: 60px; float: left;">
      <button nz-popconfirm nzTitle="Are you sure delete this task?" (nzOnConfirm)="confirm()" (nzOnCancel)="cancel()" nzPlacement="leftTop" nz-button>LT</button>
      <button nz-popconfirm nzTitle="Are you sure delete this task?" (nzOnConfirm)="confirm()" (nzOnCancel)="cancel()" nzPlacement="left" nz-button>Left</button>
      <button nz-popconfirm nzTitle="Are you sure delete this task?" (nzOnConfirm)="confirm()" (nzOnCancel)="cancel()" nzPlacement="leftBottom" nz-button>LB</button>
    </div>
    <div style="width: 60px; margin-left: 252px;">
      <button nz-popconfirm nzTitle="Are you sure delete this task?" (nzOnConfirm)="confirm()" (nzOnCancel)="cancel()" nzPlacement="rightTop" nz-button>RT</button>
      <button nz-popconfirm nzTitle="Are you sure delete this task?" (nzOnConfirm)="confirm()" (nzOnCancel)="cancel()" nzPlacement="right" nz-button>Right</button>
      <button nz-popconfirm nzTitle="Are you sure delete this task?" (nzOnConfirm)="confirm()" (nzOnCancel)="cancel()" nzPlacement="rightBottom" nz-button>RB</button>
    </div>
    <div style="margin-left: 60px; clear: both;">
      <button nz-popconfirm nzTitle="Are you sure delete this task?" (nzOnConfirm)="confirm()" (nzOnCancel)="cancel()" nzPlacement="bottomLeft" nz-button>BL</button>
      <button nz-popconfirm nzTitle="Are you sure delete this task?" (nzOnConfirm)="confirm()" (nzOnCancel)="cancel()" nzPlacement="bottom" nz-button>Bottom</button>
      <button nz-popconfirm nzTitle="Are you sure delete this task?" (nzOnConfirm)="confirm()" (nzOnCancel)="cancel()" nzPlacement="bottomRight" nz-button>BR</button>
    </div>
  `,
  styles  : [ `
    :host ::ng-deep .demo {
      overflow: auto;
    }

    :host ::ng-deep .ant-popover-wrap > a {
      margin-right: 8px;
    }

    button {
      margin-right: 8px;
      margin-bottom: 8px;
      width: 70px;
      text-align: center;
      padding: 0;
    }
  ` ]
})

export class NzDemoPopconfirmPlacementComponent {
  cancel(): void {
    this.nzMessageService.info('click cancel');
  }

  confirm(): void {
    this.nzMessageService.info('click confirm');
  }

  constructor(private nzMessageService: NzMessageService) {

  }
}

4.条件触发
可以判断是否需要弹出。
import { Component } from '@angular/core';
import { NzMessageService } from 'ng-zorro-antd';

@Component({
  selector: 'nz-demo-popconfirm-dynamic-trigger',
  template: `
    <a nz-popconfirm nzTitle="Are you sure delete this task?" [nzCondition]="switchValue" (nzOnConfirm)="confirm()" (nzOnCancel)="cancel()">Delete a task</a>
    <br>
    <br>
    Whether directly execute:
    <nz-switch [(ngModel)]="switchValue"></nz-switch>
  `
})

export class NzDemoPopconfirmDynamicTriggerComponent {
  switchValue = false;

  cancel(): void {
    this.nzMessageService.info('click cancel');
  }

  confirm(): void {
    this.nzMessageService.info('click confirm');
  }

  constructor(private nzMessageService: NzMessageService) {

  }

}

5.API#
[nz-popconfirm]DIRECTIVE#
参数	说明	类型	默认值
[nzCancelText]	取消按钮文字	string	取消
[nzOkText]	确认按钮文字	string	确定
[nzOkType]	确认按钮类型	string	primary
[nzTitle]	确认框的描述	string 丨TemplateRef<void>	无
[nzCondition]	是否直接触发 nzOnConfirm 而不弹出框	boolean	false
(nzOnCancel)	点击取消的回调	EventEmitter<void>	无
(nzOnConfirm)	点击确认的回调	EventEmitter<void>	无
更多属性请参考 Tooltip。

注意#
请确保 nz-popconfirm 的子元素能接受 onMouseEnter、onMouseLeave、onFocus、onClick 事件。

七.Progress进度条
何时使用#
在操作需要较长时间才能完成时，为用户显示该操作的当前进度和状态。

当一个操作会打断当前界面，或者需要在后台运行，且耗时可能超过2秒时；
当需要显示一个操作完成的百分比时。

1.进度条
标准的进度条。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-progress-line',
  template: `
    <nz-progress [nzPercent]="30"></nz-progress>
    <nz-progress [nzPercent]="50" nzStatus="active"></nz-progress>
    <nz-progress [nzPercent]="70" nzStatus="exception"></nz-progress>
    <nz-progress [nzPercent]="100"></nz-progress>
    <nz-progress [nzPercent]="50" [nzShowInfo]="false"></nz-progress>
  `
})
export class NzDemoProgressLineComponent { }

2.进度圈
圈形的进度。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-progress-circle',
  template: `
    <nz-progress [nzPercent]="75" nzType="circle"></nz-progress>
    <nz-progress [nzPercent]="70" nzType="circle" nzStatus="exception"></nz-progress>
    <nz-progress [nzPercent]="100" nzType="circle"></nz-progress>
  `,
  styles  : [
      `
      nz-progress {
        margin-right: 8px;
        margin-bottom: 8px;
        display: inline-block;
      }
    `
  ]
})
export class NzDemoProgressCircleComponent {
}

3.小型进度条
适合放在较狭窄的区域内。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-progress-line-mini',
  template: `
    <div style="width: 170px;">
      <nz-progress [nzPercent]="30" nzSize="small"></nz-progress>
      <nz-progress [nzPercent]="50" nzSize="small" nzStatus="active"></nz-progress>
      <nz-progress [nzPercent]="70" nzSize="small" nzStatus="exception"></nz-progress>
      <nz-progress [nzPercent]="100" nzSize="small"></nz-progress>
      <nz-progress [nzPercent]="50" nzSize="small" [nzShowInfo]="false"></nz-progress>
    </div>
  `
})
export class NzDemoProgressLineMiniComponent {
}

4.小型进度圈
小一号的圈形进度。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-progress-circle-mini',
  template: `
    <nz-progress [nzPercent]="75" nzType="circle" [nzWidth]="80"></nz-progress>
    <nz-progress [nzPercent]="70" nzType="circle" [nzWidth]="80" nzStatus="exception"></nz-progress>
    <nz-progress [nzPercent]="100" nzType="circle" [nzWidth]="80"></nz-progress>
  `,
  styles  : [
    `
      nz-progress {
        margin-right: 8px;
        margin-bottom: 8px;
        display: inline-block;
      }
    `
  ]
})
export class NzDemoProgressCircleMiniComponent { }

5.进度圈动态展示
会动的进度条才是好进度条。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-progress-circle-dynamic',
  template: `
    <nz-progress [nzPercent]="percent" nzType="circle"></nz-progress>
    <nz-button-group>
      <button nz-button (click)="decline()"><i nz-icon type="minus"></i></button>
      <button nz-button (click)="increase()"><i nz-icon type="plus"></i></button>
    </nz-button-group>
  `
})
export class NzDemoProgressCircleDynamicComponent {
  percent = 0;

  increase(): void {
    this.percent = this.percent + 10;
    if (this.percent > 100) {
      this.percent = 100;
    }
  }

  decline(): void {
    this.percent = this.percent - 10;
    if (this.percent < 0) {
      this.percent = 0;
    }
  }
}

6.动态展示
会动的进度条才是好进度条。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-progress-dynamic',
  template: `
    <nz-progress [nzPercent]="percent"></nz-progress>
    <nz-button-group>
      <button nz-button (click)="decline()"><i nz-icon type="minus"></i></button>
      <button nz-button (click)="increase()"><i nz-icon type="plus"></i></button>
    </nz-button-group>
  `
})
export class NzDemoProgressDynamicComponent {
  percent = 0;

  increase(): void {
    this.percent = this.percent + 10;
    if (this.percent > 100) {
      this.percent = 100;
    }
  }

  decline(): void {
    this.percent = this.percent - 10;
    if (this.percent < 0) {
      this.percent = 0;
    }
  }
}

7.自定义文字格式
nzFormat 属性指定格式
import {Component} from '@angular/core';

@Component({
  selector: 'nz-demo-progress-format',
  template: `
    <nz-progress [nzPercent]="75" nzType="circle" [nzFormat]="formatOne"></nz-progress>
    <nz-progress [nzPercent]="100" nzType="circle" [nzFormat]="formatTwo"></nz-progress>
  `,
  styles  : [
    `
      nz-progress {
        margin-right: 8px;
        margin-bottom: 8px;
        display: inline-block;
      }
    `
  ]
})
export class NzDemoProgressFormatComponent {
  formatOne = percent => `${percent} Days`;
  formatTwo = () => `Done`;
}

8.仪表盘
通过设置 nzType="dashboard"，可以很方便地实现仪表盘样式的进度条。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-progress-dashboard',
  template: `
    <nz-progress [nzPercent]="75" nzType="dashboard"></nz-progress>
  `
})
export class NzDemoProgressDashboardComponent { }

9.分段进度条
标准的进度条。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-progress-segment',
  template: `
    <nz-tooltip nzTitle="3 done / 3 in progress / 4 to do">
      <nz-progress nz-tooltip [nzPercent]="60" [nzSuccessPercent]="30"></nz-progress>
    </nz-tooltip>
  `
})
export class NzDemoProgressSegmentComponent { }

10.API#
nz-progressCOMPONENT#
属性	说明	类型	默认值
[nzFormat]	内容的模板函数	function(percent)	percent => percent + '%'
[nzGapDegree](nzType=circle)	圆形进度条缺口角度，可取值 0 ~ 360	number	0
[nzGapPosition](nzType=circle)	圆形进度条缺口位置	Enum{ 'top', 'bottom', 'left', 'right' }	top
[nzPercent]	百分比	number	0
[nzShowInfo]	是否显示进度数值或状态图标	boolean	true
[nzStatus]	状态，可选：successexceptionactive	string	-
[nzStrokeWidth](nzType=line)	进度条线的宽度，单位 px	number	8
[nzStrokeWidth](nzType=circle)	圆形进度条线的宽度，单位是进度条画布宽度的百分比	number	6
[nzType]	类型，可选 linecircledashboard	string	line
[nzWidth](nzType=circle)	圆形进度条画布宽度，单位 px	number	132

八.Skeleton加载占位图
Skeleton加载占位图
在需要等待加载内容的位置提供一个占位图。

何时使用#
网络较慢，需要长时间等待加载处理的情况下。
图文信息内容较多的列表/卡片中。

1.基本
最简单的用法。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-skeleton-basic',
  template: `
    <nz-skeleton></nz-skeleton>
  `
})
export class NzDemoSkeletonBasicComponent { }

2.复杂的组合
更复杂的组合。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-skeleton-complex',
  template: `
    <nz-skeleton [nzAvatar]="true" [nzParagraph]="{ rows: 4 }"></nz-skeleton>
  `
})
export class NzDemoSkeletonComplexComponent { }

3.动画效果
显示动画效果。

import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-skeleton-active',
  template: `
    <nz-skeleton [nzActive]="true"></nz-skeleton>
  `
})
export class NzDemoSkeletonActiveComponent { }

4.包含子组件
加载占位图包含子组件。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-skeleton-children',
  template: `
    <div class="article">
      <nz-skeleton [nzLoading]="loading">
        <h4>Ant Design, a design language</h4>
        <p>We supply a series of design principles, practical patterns and high quality design resources (Sketch and Axure), to help people create their product prototypes beautifully and efficiently.</p>
      </nz-skeleton>
      <button nz-button (click)="showSkeleton()" [disabled]="loading">
        Show Skeleton
      </button>
    </div>
  `,
  styles  : [
    `
      .article h4 {
        margin-bottom: 16px;
      }
      .article button {
        margin-top: 16px;
      }
    `
  ]
})
export class NzDemoSkeletonChildrenComponent {
  loading = false;

  showSkeleton(): void {
    this.loading = true;
    setTimeout(() => {
      this.loading = false;
    }, 3000);
  }
}

5.列表样例
在列表组件中使用加载占位符。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-skeleton-list',
  template: `
    <nz-switch [(ngModel)]="loading"></nz-switch>
    <nz-list [nzDataSource]="listData" [nzRenderItem]="item" [nzItemLayout]="'vertical'">
      <ng-template #item let-item>
        <nz-list-item [nzContent]="loading?' ':item.content" [nzActions]="loading?[]:[starAction,likeAction,msgAction]" [nzExtra]="loading?'':extra">
          <nz-skeleton [nzLoading]="loading" [nzActive]="true" [nzAvatar]="true">
            <ng-template #starAction><i nz-icon type="star-o" style="margin-right: 8px;"></i> 156</ng-template>
            <ng-template #likeAction><i nz-icon type="like-o" style="margin-right: 8px;"></i> 156</ng-template>
            <ng-template #msgAction><i nz-icon type="message" style="margin-right: 8px;"></i> 2</ng-template>
            <nz-list-item-meta
              [nzAvatar]="item.avatar"
              [nzTitle]="nzTitle"
              [nzDescription]="item.description">
              <ng-template #nzTitle><a href="{{item.href}}">{{item.title}}</a></ng-template>
            </nz-list-item-meta>
            <ng-template #extra>
              <img width="272" alt="logo" src="https://gw.alipayobjects.com/zos/rmsportal/mqaQswcyDLcXyDKnZfES.png">
            </ng-template>
          </nz-skeleton>
        </nz-list-item>
      </ng-template>
    </nz-list>
  `
})
export class NzDemoSkeletonListComponent {
  loading = true;
  listData = new Array(3).fill({}).map((i, index) => {
    return {
      href: 'http://ng.ant.design',
      title: `ant design part ${index}`,
      avatar: 'https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png',
      description: 'Ant Design, a design language for background applications, is refined by Ant UED Team.',
      content: 'We supply a series of design principles, practical patterns and high quality design resources (Sketch and Axure), to help people create their product prototypes beautifully and efficiently.'
    };
  });
}

6.API#
nz-skeletonCOMPONENT#
属性	说明	类型	默认值
[nzActive]	是否展示动画效果	boolean	false
[nzAvatar]	是否显示头像占位图	boolean ｜ NzSkeletonAvatar	false
[nzLoading]	为 true 时，显示占位图。反之则直接展示子组件	boolean	-
[nzParagraph]	是否显示段落占位图	boolean ｜ NzSkeletonParagraph	true
[nzTitle]	是否显示标题占位图	boolean ｜ NzSkeletonTitle	true
NzSkeletonAvatar#
属性	说明	类型	默认值
size	设置头像占位图的大小	Enum{ 'large', 'small', 'default' }	-
shape	指定头像的形状	Enum{ 'circle', 'square' }	-
NzSkeletonTitle#
属性	说明	类型	默认值
width	设置标题占位图的宽度	number ｜ string	-
NzSkeletonParagraph#
属性	说明	类型	默认值
rows	设置段落占位图的行数	number	-
width	设置标题占位图的宽度，若为数组时则为对应的每行宽度，反之则是最后一行的宽度	number ｜ string ｜ Array<number｜string>	-

九.Spin加载中
用于页面和区块的加载中状态。
何时使用#
页面局部处于等待异步数据或正在渲染过程时，合适的加载动效会有效缓解用户的焦虑。

1.基本用法
一个简单的 loading 状态。

import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-spin-basic',
  template: `
    <nz-spin></nz-spin>`
})
export class NzDemoSpinBasicComponent {
}

2.各种大小
小的用于文本加载，默认用于卡片容器级加载，大的用于页面级加载。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-spin-size',
  template: `
    <nz-spin [nzSize]="'small'"></nz-spin>
    <nz-spin></nz-spin>
    <nz-spin [nzSize]="'large'"></nz-spin>`,
  styles  : [
      `
      nz-spin {
        display: inline-block;
        margin-right: 16px;
      }
    `
  ]
})
export class NzDemoSpinSizeComponent {
}

3.容器
放入一个容器中。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-spin-inside',
  template: `
    <div class="example">
      <nz-spin></nz-spin>
    </div>
  `,
  styles  : [
    `
      .example {
        text-align: center;
        background: rgba(0,0,0,0.05);
        border-radius: 4px;
        margin-bottom: 20px;
        padding: 30px 50px;
        margin: 20px 0;
      }
    `
  ]
})
export class NzDemoSpinInsideComponent { }

4.卡片加载中
可以直接把内容内嵌到 Spin 中，将现有容器变为加载状态。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-spin-nested',
  template: `
    <nz-spin [nzSpinning]="isSpinning">
      <nz-alert [nzType]="'info'" [nzMessage]="'Alert message title'" [nzDescription]="'Further details about the context of this alert.'">
      </nz-alert>
    </nz-spin>
    <div style="margin-top:8px;">
      Loading state：
      <nz-switch [(ngModel)]="isSpinning"></nz-switch>
    </div>
  `
})
export class NzDemoSpinNestedComponent {
  isSpinning = false;
}

5.自定义描述文案
自定义描述文案。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-spin-tip',
  template: `
    <nz-spin nzTip='Loading...'>
      <nz-alert
        nzType="info"
        nzMessage="Alert message title"
        nzDescription="Further details about the context of this alert.">
      </nz-alert>
    </nz-spin>`
})
export class NzDemoSpinTipComponent {
}

6.延迟
延迟显示 loading 效果。当 spinning 状态在 delay 时间内结束，则不显示 loading 状态。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-spin-delayAndDebounce',
  template: `
    <nz-spin [nzSpinning]="isSpinning" [nzDelay]="500">
      <nz-alert [nzType]="'info'" [nzMessage]="'Alert message title'" [nzDescription]="'Further details about the context of this alert.'">
      </nz-alert>
    </nz-spin>
    <div style="margin-top:8px;">
      Loading state：
      <nz-switch [(ngModel)]="isSpinning"></nz-switch>
    </div>
  `
})
export class NzDemoSpinDelayAndDebounceComponent {
  isSpinning = false;
}

7.自定义指示符
使用自定义指示符。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-spin-custom-indicator',
  template: `
    <ng-template #indicatorTemplate><i nz-icon type="loading" style="font-size: 24px;"></i>
    </ng-template>
    <nz-spin [nzIndicator]="indicatorTemplate">
    </nz-spin>`
})
export class NzDemoSpinCustomIndicatorComponent {
}


======================================================Other(其他)======================================================
一.Anchor锚点
用于跳转到页面指定位置。
何时使用#
需要展现当前页面上可供跳转的锚点链接，以及快速在锚点之间跳转。

1.基本
最简单的用法。

import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-anchor-basic',
  template: `
    <nz-anchor>
      <nz-link nzHref="#components-anchor-demo-basic" nzTitle="Basic demo"></nz-link>
      <nz-link nzHref="#components-anchor-demo-static" nzTitle="Static demo"></nz-link>
      <nz-link nzHref="#API" nzTitle="API">
        <nz-link nzHref="#anchor-props" nzTitle="nz-anchor"></nz-link>
        <nz-link nzHref="#link-props" nzTitle="nz-link"></nz-link>
      </nz-link>
    </nz-anchor>
  `
})
export class NzDemoAnchorBasicComponent { }

2.静态位置
不浮动，状态不随页面滚动变化。
import { Component, ViewEncapsulation } from '@angular/core';

@Component({
  selector     : 'nz-demo-anchor-static',
  encapsulation: ViewEncapsulation.None,
  template     : `
    <nz-anchor [nzAffix]="false">
      <nz-link nzHref="#components-anchor-demo-basic" nzTitle="Basic demo"></nz-link>
      <nz-link nzHref="#components-anchor-demo-static" nzTitle="Static demo"></nz-link>
      <nz-link nzHref="#API" nzTitle="API">
        <nz-link nzHref="#anchor-props" nzTitle="nz-anchor"></nz-link>
        <nz-link nzHref="#link-props" nzTitle="nz-link"></nz-link>
      </nz-link>
    </nz-anchor>
  `
})
export class NzDemoAnchorStaticComponent {
}

3.API
nz-anchorCOMPONENT#
成员	说明	类型	默认值
[nzAffix]	固定模式	boolean	true
[nzBounds]	锚点区域边界	number	5(px)
[nzOffsetBottom]	距离窗口底部达到指定偏移量后触发	number	
[nzOffsetTop]	距离窗口顶部达到指定偏移量后触发	number	
[nzShowInkInFixed]	固定模式是否显示小圆点	boolean	false
(nzClick)	点击项触发	EventEmitter<string>	-
(nzScroll)	滚动至某锚点时触发	EventEmitter<NzAnchorLinkComponent>	-
nz-linkCOMPONENT#
成员	说明	类型	默认值
[nzHref]	锚点链接	string	
[nzTitle]	文字内容	string丨TemplateRef<void>	

二.BackTop回到顶部
返回页面顶部的操作按钮。

何时使用#
当页面内容区域比较长时；
当用户需要频繁返回顶部查看相关内容时。

1.基本
最简单的用法。

import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-back-top-basic',
  template: `
    <nz-back-top></nz-back-top>
    Scroll down to see the bottom-right
    <strong> gray </strong>
    button.
  `,
  styles  : [ `
    :host ::ng-deep strong {
      color: rgba(64, 64, 64, 0.6);
    }
  ` ]
})
export class NzDemoBackTopBasicComponent {
}


2.自定义样式
可以自定义回到顶部按钮的样式，限制宽高：40px * 40px。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-back-top-custom',
  template: `
    <nz-back-top [nzTemplate]="tpl" [nzVisibilityHeight]="100" (nzOnClick)="notify()">
      <ng-template #tpl>
        <div class="ant-back-top-inner">UP</div>
      </ng-template>
    </nz-back-top>
    Scroll down to see the bottom-right
    <strong> blue </strong>
    button.
  `,
  styles  : [ `
    :host ::ng-deep .ant-back-top {
      bottom: 100px;
    }

    :host ::ng-deep .ant-back-top-inner {
      height: 40px;
      width: 40px;
      line-height: 40px;
      border-radius: 4px;
      background-color: #1088e9;
      color: #fff;
      text-align: center;
      font-size: 20px;
    }

    :host ::ng-deep strong {
      color: #1088e9;
    }
  ` ]
})
export class NzDemoBackTopCustomComponent {
  notify(): void {
    console.log('notify');
  }
}

3.滚动容器
设置 nzTarget 参数，允许对某个容器返回顶部。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-back-top-target',
  template: `
    Scroll down to see the bottom-right
    <strong> gray </strong>
    button.
    <div class="long-div" #divTarget>
      <div class="long-div-inner"></div>
      <nz-back-top [nzTarget]="divTarget"></nz-back-top>
    </div>
  `,
  styles  : [ `
    :host ::ng-deep .long-div {
      height: 300px;
      overflow-y: scroll;
      background-image: url(//zos.alipayobjects.com/rmsportal/RmjwQiJorKyobvI.jpg);
    }

    :host ::ng-deep .long-div-inner {
      height: 1500px;
    }

    :host ::ng-deep .long-div .ant-back-top {
      right: 150px;
    }

    :host ::ng-deep strong {
      color: rgba(64, 64, 64, 0.6);
    }
  ` ]
})
export class NzDemoBackTopTargetComponent {
}

4.API
nz-back-topCOMPONENT#
有默认样式，距离底部 50px，可覆盖。 自定义样式宽高不大于 40px * 40px。
成员	说明	类型	默认值
[nzTemplate]	自定义内容，见示例	TemplateRef<void>	-
[nzVisibilityHeight]	滚动高度达到此参数值才出现 nz-back-top	number	400
[nzTarget]	设置需要监听其滚动事件的元素，值为一个返回对应 DOM 元素的函数	Element	window
(nzClick)	点击按钮的回调函数	EventEmitter<boolean>	-


三.Divider分割线
区隔内容的分割线。

何时使用#
对不同章节的文本段落进行分割。
对行内文字/链接进行分割，例如表格的操作列。

1.水平分割线
默认为水平分割线，可在中间加入文字。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-divider-horizontal',
  template: `
    <div>
      <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista probare, quae sunt a te dicta? Refert tamen, quo modo.</p>
      <nz-divider></nz-divider>
      <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista probare, quae sunt a te dicta? Refert tamen, quo modo.</p>
      <nz-divider nzText="With Text"></nz-divider>
      <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista probare, quae sunt a te dicta? Refert tamen, quo modo.</p>
      <nz-divider nzDashed [nzText]="text">
        <ng-template #text><i nz-icon type="plus"></i> Add</ng-template>
      </nz-divider>
      <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista probare, quae sunt a te dicta? Refert tamen, quo modo.</p>
      <nz-divider nzText="With Text" nzOrientation="left"></nz-divider>
      <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista probare, quae sunt a te dicta? Refert tamen, quo modo.</p>
      <nz-divider nzText="With Text" nzOrientation="right"></nz-divider>
      <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista probare, quae sunt a te dicta? Refert tamen, quo modo.</p>
    </div>
  `
})

export class NzDemoDividerHorizontalComponent {

}

2.垂直分割线
使用 nzType="vertical" 设置为行内的垂直分割线。
import { Component } from '@angular/core';

@Component({
  selector: 'nz-demo-divider-vertical',
  template: `
    <div>Text
      <nz-divider nzType="vertical"></nz-divider>
      <a href="#">Link</a>
      <nz-divider nzType="vertical"></nz-divider>
      <a href="#">Link</a>
    </div>
  `
})

export class NzDemoDividerVerticalComponent {

}

3.API#
nz-dividerCOMPONENT#
参数	说明	类型	默认值
[nzDashed]	是否虚线	Boolean	false
[nzType]	水平还是垂直类型	enum: horizontalvertical	horizontal
[nzText]	中间文字	string丨TemplateRef<void>	-
[nzOrientation]	中间文字方向	enum: leftright	-




知识点补充：
1.连续两个箭头的TS代码(相当于返回了一共函数)

let userNameAsyncValidator = (control) => a => {
    // 自定义异步校验器
    setTimeout(() => {
        console.log('1')
    }, 1000);
};

编译成js

var userNameAsyncValidator = function (control) { return function (a) {
    // 自定义异步校验器
    setTimeout(function () {
        console.log('1');
    }, 1000);
}; };

单词

design 设计
ant 蚂蚁
segment 分段 环节
fault 过错 缺陷 故障
general 一般
layout 布局
grid 网格
gutter 沟槽
monospaced 等宽的
arrangement 安排
directive 指令
pull 拉
push 推
occasionally 偶尔的
collapse 坍塌
reverse 方向 颠倒
trigger 触发
breakpoint 断点
breadcrumb 面包屑
navigation 航行 导航
affix 附上
generate 生成
separator 分离器
placement 安置
divider 除法器 分隔者
drop 落下
horizontal 水平
fold 折叠
vertical 垂直的
quick 快的
jumper 跳跃者
dot 点
popover 空壳面包
encapsulation 包封
detection 侦查 检测
novalidate 未验证
builder 建设者
indeterminate 不确定的
avatar 化身 阿凡达
badge 徽章
calendar 日历
skeleton 骨骼
collapse 崩溃 坍塌
divider 除法器 分隔者
indeterminate 不确定的 
indent 缩进
sticky 粘性的
block 块 街道
nested 嵌套的
deselect 取消选择
propagation 传播
tooltip 工具提示
leaf 叶子
feedback 反馈
drawer 抽屉
stack 栈
pause 停
modal 模式的 形式的
notification 通知 
blank 空白的 
condition 条件 
progress 进步
exception 例外
decline 衰落 下降 
increase 增长
dashboard 仪表盘
gap 差距 缺口
stroke 划动
skeleton 骨骼
spin 纺纱 旋转
indicator 指示灯
anchor 锚
affix 附上
bound 跳跃 界限 限制
orientation 方向
explain 解释
remember 记得
captcha 验证码
instance 实例
inconsistent 不一致的
holder 持有人
redundant 多余的
duplicated 复制出的
gender 性别
compact 紧凑 紧压 契约
suffix 后缀
digital 数字的
mention 提到
suggestion 建议
rate 速度 速率
transfer 转移
frown 皱眉 不同意

