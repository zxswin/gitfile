一.起步
1.按照selenium运行环境
npm install selenium-webdriver --save

2.安装各浏览器驱动
出现安装驱动后运行脚本提示驱动不正常之类的问题时可自行下载驱动放到与脚本相同的目录下试试。驱动下载地址：http://www.seleniumhq.org/download/

-安装Chrome驱动
npm install chromedriver --save

-安装Firefox驱动
npm install geckodriver --save

-安装IE驱动
npm install iedriver --save

3.一个简单的例子

require('chromedriver'); //导入chrome浏览器 driver 不导入会报错

var webdriver = require('selenium-webdriver'); //导入selenium 库

var driver = new webdriver.Builder().forBrowser('chrome').build(); //创建一个chrome 浏览器实例

driver.get("https://www.baidu.com/") //打开https://www.baidu.com/

driver.sleep(20 * 1000).then(function () { //等待20秒
  driver.quit(); //关闭浏览器
})


4.设置元素的值
driver.findElement(By.id('ID')).sendKeys('value');//类似于jquery的$(".id").val("value");

5.清空元素的值
driver.findElement(By.id('id')).clear();

6.单击按钮
driver.findElement(By.id('id')).click();  

7.元素等待
driver.wait(until.elementLocated(By.id('id'), 10000));

8.程序睡眠
driver.sleep(500);//毫秒

9.执行JavaScript
driver.executeScript('location.href="/xx.html" ');
driver.executeScript('document.getElementById("id").value="value"');//$("#id").val("value");

10.执行JavaScript并获取返回值
driver.executeScript('return $("#id").val()').then(function(obj){
    //obj即为返回值
    if(obj>100){
        //操作
    }else{
       //其他操作
    }
})

11.切换作用域（switchTo） - 切换到iframe 貌似不行
driver.switchTo().frame(driver.findElement(By.id("iframe-id")));  //iframe-id为iframe元素的id

12.切换作用域（switchTo） - 切换到弹出框
driver.switchTo().alert().then(function(alert) {
     //检测到弹出框时执行
     //关闭alert
     return alert.dismiss();
},function(){
    //没有检测到弹出框时执行
});

13.切换回主页面
driver.switchTo().defaultContent();

14.网页最大化（全屏）
driver.manage().window().maximize(); 

15.网页截图(定位)
driver.takeScreenshot()；
driver.takeScreenshot().then(function(d){
    //此处d即为截图结果base64字符串，可在此自行处理
});

16.截取某部分的图片
driver.findElement(By.className('yanzheng')).then(function(obj){
        obj.getSize().then(function(size){          
            obj.getLocation().then(function(loc){
                driver.takeScreenshot().then(function(d){
                      var data={
                            d:d,
                            width:size.width,
                            height:size.height,
                            x:loc.x,
                            y:loc.y
                      };
                    //此处省略以下两步
                    //1.提交data信息到服务器处理图片
                    //2.先根据d获取整张图片信息，再根据需要截取的元素的其实位置x,y以及长宽width,height截取相应的图片
                })
           }
        }
})

17.退出程序（关闭网页）
driver.quit();

========================================Selenium-webdriver常用总结========================================

一.基础使用(获取网页标题)
require('chromedriver'); //导入chrome浏览器 driver 不导入会报错
const {Builder, By, Key, until, Button} = require("selenium-webdriver");
let driver = new Builder().forBrowser('chrome').build();

(async ()=>{
  await driver.get('http://www.baidu.com').then(()=>{
    driver.getTitle().then(v=>{
      console.log(v);
    });
  });
  
  await driver.sleep(20 * 1000).then(function () { 
    //等待20秒 不等待而直接关闭会报错退出程序
    driver.quit(); //关闭浏览器
    //drive.close()表示关闭当前窗口
  });
})();

二.选择器
1.自动打开百度并输入搜索关键词进行搜索
require('chromedriver'); //导入chrome浏览器 driver 不导入会报错

const {Builder, By, Key, until, Button} = require("selenium-webdriver");
let driver = new Builder().forBrowser('chrome').build();

(async ()=>{
  await driver.get('http://www.baidu.com').then(()=>{
    let searchForm = driver.findElement(By.tagName('form'));
    let searchBox = searchForm.findElement(By.name('wd'));
    searchBox.sendKeys('webdriver'); // 向输入框中输入文字
  });
  
  await driver.sleep(20 * 1000).then(function () { 
    //等待20秒 不等待而直接关闭会报错退出程序
    driver.quit(); //关闭浏览器
    //drive.close()表示关闭当前窗口
  });
})();

2.findElement/findElements
findElement()方法定位元素时，会查询整个DOM，然后返回第一个匹配的元素
findElements()方法，可以得到指定规则的集合，适用于需要在一组相似的元素上进行操作的情况。
findElement()和findElements()方法找不到相应的元素时，会抛出该异常。

使用
var e1 = driver.findElement(By.id('foo'));
var links = element.findElements(By.tagName('a'));

没有找到元素捕获错误
let searchForm = driver.findElement(By.id('aaa')).then(e => {
  console.log('searchForm', e);
}).catch(e => {
  console.log('没有找到元素')
});

3.By定位元素
-通过id属性定位元素
driver.findElement(By.id())

-通过name属性定位元素
driver.findElement(By.name())

-通过class属性定位元素
driver.findElement(By.className())

-通过HTML标签名定位元素
driver.findElement(By.tagName())

-通过链接内容定位元素
driver.findElement(By.linkText())

-通过部分链接内容定位元素
driver.findElement(By.partialLinkText())

-通过css选择器定位元素
driver.findElement(By.css())
driver.findElements(By.css('.lb')) // 里面放的是选择器

-通过xpath定位元素
driver.findElement(By.Xpath())

三.如何对页面元素进行操作
1.在输入框中输入内容：
element.sendKeys(“test”);

2.将输入框清空：
element.clear();

3.获取输入框的文本内容：
element.getText(); // 返回的是一个Promise对象
element.getText().then(val=>{
  console.log('文字内容', val);
});

4.操作下拉选择框
let select = driver.findElement(By.tagName("select"));
select.sendKeys('opel'); // 设置下拉选择框的值

5.操作单选按钮
driver.findElements(By.name("Sex")).then(e => {
  e.forEach(v => {
    v.click(); // 点击单选按钮
    // v.clear(); // 清空选中 有问题会报错
    v.isSelected().then(v => {
      console.log('是否被选中', v);
    });
  });
});

6.操作复选框
driver.findElements(By.tagName("input")).then(e => {
  e.forEach(v => {
    v.click();
    v.isSelected().then(v => {
      console.log('是否被选中', v);
    });
    v.isEnabled().then(v => {
      console.log('是否可用', v);
    });
  });
});

7.Alert弹出框操作
driver.switchTo().alert().then(function(alert) {
     return alert.dismiss();//点击弹窗上的取消
     //  return alert.accept();点击弹窗上的确定按钮
},function(){
    //没有检测到弹出框时执行
});
处理弹窗第二种方式：
driver.switchTo().alert().accept()
driver.switchTo().alert().dismiss()

关闭弹出窗口例子
require('chromedriver'); //导入chrome浏览器 driver 不导入会报错

const { Builder, By, Key, until, Button, Alert } = require("selenium-webdriver");
let driver = new Builder().forBrowser('chrome').build();

(async () => {
  await driver.get('http://www.w3school.com.cn/tiy/loadtext.asp?f=hdom_alert').then(() => {
    driver.findElement(By.tagName('input')).then(e => {
      e.click().then(()=>{
        driver.switchTo().alert().dismiss();
      });
    });
  });

  await driver.sleep(20 * 1000).then(function () {
    //等待20秒 不等待而直接关闭会报错退出程序
    driver.quit(); //关闭浏览器
    //drive.close()表示关闭当前窗口
  });

})();

8.Windows 和 Frames之间的切换
require('chromedriver'); //导入chrome浏览器 driver 不导入会报错

const { Builder, By, Key, until, Button, Alert } = require("selenium-webdriver");
let driver = new Builder().forBrowser('chrome').build();

(async () => {
  await driver.get('http://www.runoob.com/try/try.php?filename=tryjs_alert').then(() => {
  });

  await driver.switchTo().frame("iframeResult").then(() => {
    // 切换到iframe框架
    driver.findElement(By.tagName('input')).then(e => {
      //e.click();
    });
  });

  await driver.switchTo().window('').then(() => {
    //切换到window页面
    driver.findElements(By.tagName('h1')).then(e => {
      console.log('获取的元素数量', e.length);
      e.forEach(v => {
        v.getText().then(val => {
          console.log('获取的元素内容', val);
        });
      });
    });
  });

  await driver.sleep(20 * 1000).then(function () {
    //等待20秒 不等待而直接关闭会报错退出程序
    driver.quit(); //关闭浏览器
    //drive.close()表示关闭当前窗口
  });

})();


9.导航 (Navigationand History)
链接跳转
driver.navigate().to("https://www.baidu.com");
通过历史导航返回原页面：
driver.navigate().forward();
driver.navigate().back();


四.WebDriver 对象
1.this.actions( options ) → Actions  //执行动作
2.this.close() → Promise<undefined>  // 关闭
3.this.execute( command ) → Promise<(T|null)>
4.this.executeAsyncScript( script, ...args ) → IThenable<(T|null)>
5.this.executeScript( script, ...args ) → IThenable<(T|null)>  // 执行JS 脚本
6.this.findElement( locator ) → WebElementPromise  // 查找元素
7.this.findElements( locator ) → Promise<Array<WebElement>> // 查找元素
8.this.get( url ) → Promise<undefined> // 访问url

9.this.getAllWindowHandles() → Promise<Array<string>>
await driver.getAllWindowHandles().then((v)=>{
  console.log('vvvv',v);  // [ 'CDwindow-7FD3B2D187106B11C751364B3CE76A5E' ]
});

10.this.getCapabilities() → Promise<Capabilities>  // 获取浏览器的配置项
await driver.getCapabilities().then((v)=>{
  console.log('vvvv',v);
});
配置项如下
Capabilities {
map_:
  Map {
    'acceptInsecureCerts' => false,
    'acceptSslCerts' => false,
    'applicationCacheEnabled' => false,
    'browserConnectionEnabled' => false,
    'browserName' => 'chrome',
    'chrome' => { chromedriverVersion: '2.40.565498 (ea082db3280dd6843ebfb08a625e3eb905c4f5ab)',
    userDataDir: 'C:\\Users\\admin\\AppData\\Local\\Temp\\scoped_dir14808_14194' },
    'cssSelectorsEnabled' => true,
    'databaseEnabled' => false,
    'handlesAlerts' => true,
    'hasTouchScreen' => false,
    'javascriptEnabled' => true,
    'locationContextEnabled' => true,
    'mobileEmulationEnabled' => false,
    'nativeEvents' => true,
    'networkConnectionEnabled' => false,
    'pageLoadStrategy' => 'normal',
    'platform' => 'Windows NT',
    'rotatable' => false,
    'setWindowRect' => true,
    'takesHeapSnapshot' => true,
    'takesScreenshot' => true,
    'unexpectedAlertBehaviour' => '',
    'version' => '67.0.3396.99',
    'webStorageEnabled' => true } }

11.this.getCurrentUrl() → Promise<string>  获取当前url：
browser.getCurrentUrl().then(b=>{console.log(b)});

12.this.getExecutor() → Executor  

13.this.getPageSource() → Promise<string>  获取网页代码
await driver.getPageSource('http://www.w3school.com.cn/tiy/loadtext.asp?f=html5_draganddrop').then((souce)=>{
  console.log('获取代码',souce);
});

14.this.getSession() → Promise<Session>
await driver.getSession().then((v)=>{
  console.log('vvvv',v); 
});

Session {
  id_: '4bed2f5d4a53a447165ad12ad1d0b72a',
  caps_:
   Capabilities {
     map_:
      Map {
        'acceptInsecureCerts' => false,
        'acceptSslCerts' => false,
        'applicationCacheEnabled' => false,
        'browserConnectionEnabled' => false,
        'browserName' => 'chrome',
        'chrome' => [Object],
        'cssSelectorsEnabled' => true,
        'databaseEnabled' => false,
        'handlesAlerts' => true,
        'hasTouchScreen' => false,
        'javascriptEnabled' => true,
        'locationContextEnabled' => true,
        'mobileEmulationEnabled' => false,
        'nativeEvents' => true,
        'networkConnectionEnabled' => false,
        'pageLoadStrategy' => 'normal',
        'platform' => 'Windows NT',
        'rotatable' => false,
        'setWindowRect' => true,
        'takesHeapSnapshot' => true,
        'takesScreenshot' => true,
        'unexpectedAlertBehaviour' => '',
        'version' => '67.0.3396.99',
        'webStorageEnabled' => true } } }

15.this.getTitle() → Promise<string>  获取网页标题:
browser.getTitle().then(b=>{console.log(b)});

16.this.getWindowHandle() → Promise<string>
await driver.getWindowHandle().then((v)=>{
  console.log('vvvv',v); // CDwindow-1EB2E02BC86686E3DA08E07CD0898060
});

17.this.manage() → Options
console.log(driver.manage())
Options {
  driver_:
   thenableWebDriverProxy {
     session_: Promise { [Object] },
     executor_: Executor { w3c: false, customCommands_: [Object], log_: [Object] },
     fileDetector_: null,
     onQuit_: undefined,
     then: [Function: bound then],
     catch: [Function: bound catch] } }

通过let options = broswer.manage() 获得

options.addCookie({name: 'foo', value: 'bar'})
options.deleteAllCookies() //删除所有cookies
options.deleteCookie(name) //按照name删除
options.getCookie(name) //拿到name字段的cookie值，为promise对象
options.getCookies() //返回所有cookies，为promise对象

18.this.navigate() → Navigation  // 导航 调转链接
链接跳转
driver.navigate().to("https://www.baidu.com");
通过历史导航返回原页面：
driver.navigate().forward();
driver.navigate().back();

通过let nav = broswer.navigate()获得
nav有四个方法分别为：
nav.back();
nav.forward();
nav.refresh();
nav.to(url);

19.this.quit() → Promise<undefined> // 退出浏览器

20.this.setFileDetector( detector ) → void // 设置文件探测器

21.this.sleep( ms ) → Promise<undefined>  // 设置睡眠时间
await driver.sleep(20 * 1000).then(function () {
  //等待20秒 不等待而直接关闭会报错退出程序
  driver.quit(); //关闭浏览器
  //drive.close()表示关闭当前窗口
});

22.this.switchTo() → TargetLocator 切换作用域
切换回主页面
driver.switchTo().defaultContent();

23.this.takeScreenshot() → Promise<string> // 快照截图
driver.takeScreenshot().then(function(d){
    //此处d即为截图结果base64字符串，可在此自行处理
});

保存截图
await driver.takeScreenshot().then(function (d) {
  //此处d即为截图结果base64字符串，可在此自行处理
  console.log('base64编码=========================');
  console.log(d);
  console.log('=========================base64编码');
  let dataBuffer = new Buffer(d, 'base64');
  fs.writeFile('image.png', dataBuffer).then((e) => {
    if (!e) {
      console.log('图片保存成功了');
    }
  });
});

24.this.wait( condition, timeout, message ) → (IThenable<T>|WebElementPromise) // 元素等待
let button = await driver.wait(until.elementLocated(By.id('foo')), 10000);
await button.click();

五.WebElement 元素
1.this.clear() → Promise<undefined> // 清空
2.this.click() → Promise<undefined> // 点击元素
3.this.findElement( locator ) → WebElementPromise // 查找元素
4.this.findElements( locator ) → Promise<Array<WebElement>> // 查找元素
5.this.getAttribute( attributeName ) → Promise<(string|null)> // 获取属性值
6.this.getCssValue( cssStyleProperty ) → Promise<string> // 获取CSS样式值
7.this.getDriver() → WebDriver // 获取WebDriver
8.this.getId() → Promise<string> // 获取ID
9.this.getRect() → Promise<{height: number, width: number, x: number, y: number}>
10.this.getTagName() → Promise<string> // 获取标签名
11.this.getText() → Promise<string> // 获取文字
12.this.isDisplayed() → Promise<boolean> // 是否禁用
13.this.isEnabled() → Promise<boolean>  // 是否可用
14.this.isSelected() → Promise<boolean> // 是否被选中
15.this.sendKeys( ...args ) → Promise<undefined> // 设置值
16.this.submit() → Promise<undefined> // 表单提交
17.this.takeScreenshot( scroll ) → Promise<string>  // 快照截图
scroll 可选参数，该参数指示在拍摄截图之前是否应将元素滚动到视图中。默认为false。

六.Actions 动作

需要设置桥接模式 要不然其他浏览器不支持 目前仅有火狐浏览器支持
const actions = driver.actions({bridge: true});
const actions = driver.actions({async: true});  // 动作分别执行 中间一个错误也会往后执行

1.简单的Actions动作示例

require('chromedriver'); //导入chrome浏览器 driver 不导入会报错
const { Builder, By, Key, until, Button,Actions } = require("selenium-webdriver");
let driver = new Builder().forBrowser('chrome').build();
const actions = driver.actions({bridge: true});

(async () => {
  
  await driver.get('http://www.w3school.com.cn/tiy/loadtext.asp?f=jquery_event_click').then(() => {
    let element = driver.findElement(By.tagName('button'));
    actions.click(element).perform();
  });

  await driver.sleep(20 * 1000).then(function () {
    //等待20秒 不等待而直接关闭会报错退出程序
    driver.quit(); //关闭浏览器
    //drive.close()表示关闭当前窗口
  });

})();

this.clear()  // 清空  
this.click( element ) // 点击
this.contextClick( element ) // 对element右键单击一次
this.doubleClick( element ) // 双击
this.dragAndDrop( from, to ) // 拖拽
this.insert( device, ...actions ) // 插入
this.keyDown( key ) // 按键
this.keyUp( key ) // 按键弹起
this.keyboard() // 键盘
this.mouse() // 鼠标

this.move( options ) // 移动
移动参数如下：  
//options ({duration: (number|undefined), origin: (Origin|WebElement|undefined), x: (number|undefined), y: (number|undefined)}|undefined) 
　　//origin是起始位置，默认为鼠标当前位置，可以设置元素为起始位置。x,y为偏移量。duration为持续时间默认（100ms）

this.pause( duration, ...devices ) // 暂停
this.perform() → Promise<undefined> // 动作结束
this.press( button ) // 按压
this.release( button ) // 释放
this.sendKeys( ...keys ) // 设置值
this.synchronize( ...devices ) // 同步执行


七.until
使用范例
driver.get('http://www.google.com/ncr');
var query = driver.wait(until.elementLocated(By.name('q')));  // 等待元素加载完毕
query.sendKeys('webdriver\n');
driver.wait(until.titleIs('webdriver - Google Search'));

ableToSwitchToFrame( frame ) → ?
alertIsPresent() → ?
elementIsDisabled( element ) → ?
elementIsEnabled( element ) → ?
elementIsNotSelected( element ) → ?
elementIsNotVisible( element ) → ?
elementIsSelected( element ) → ?
elementIsVisible( element ) → ?
elementLocated( locator ) → ?
elementTextContains( element, substr ) → ?
elementTextIs( element, text ) → ?
elementTextMatches( element, regex ) → ?
elementsLocated( locator ) → ?
stalenessOf( element ) → ?
titleContains( substr ) → ?
titleIs( title ) → ?
titleMatches( regex ) → ?
urlContains( substrUrl ) → ?
urlIs( url ) → ?
urlMatches( regex ) → ?


问题汇总
1.selenium 自动化测试打开chrome时，chrome地址栏总是出现data:,
下载与Chrome版本匹配的webdriver
正常情况是：地址栏出现data:,后会调转到正常的url页面

2.也可选择chromedriver.exe程序进行驱动
下载完成后：
windows 下，新建一个命名为chromedriver文件夹，将解压的chromedriver.exe放进文件夹，再配置进path环境变量
Linux下，把下载好的文件放在 /usr/bin 目录下就可以了。

资源：
API文档地址:
https://seleniumhq.github.io/selenium/docs/api/javascript/


========================================实战部分========================================

一.引入jquery辅助
1.driver.executeScript 可以用于执行js程序
driver.executeScript('alert('aaabbb');');
或
driver.executeScript(function(){
  alert('aaabbb');
});

2.引入本地jquery
await driver.get('http://www.w3school.com.cn/tiy/loadtext.asp?f=html5_draganddrop').then(() => {
    fs.readFile('jquery.js','utf8').then(v=>{
      let jq = v;
      driver.executeScript(`${jq} $(function(){ $('#div1').hide(); })`);
    });
});

3.让页面滚动到底部
await driver.get('http://www.w3school.com.cn/').then(() => {
  fs.readFile('jquery.js', 'utf8').then(v => {
    let jq = v;
    driver.executeScript(`${jq} 
      $(function(){ 
        var h = $(document).height()-$(window).height();
        $(document).scrollTop(h); 
      });
      `);
  });
});


单词
detector 探测器
capability 能力
accept 接受 同意
dismiss 解雇 解散
perform 表演
execute 执行
remote 远程的
release 释放
chronize 计时
pause 暂停
keyboard 键盘
generating 生成
complex 合成的 复杂的
gestures 手势
directly 直接地
instead 代替
device 装备
sequence 序列
second 第二
synchronized 同步的
simultaneously 同时
individual 个别的
however  无论如何
instaneous 瞬间
specify 指定
implicitly 暗示地
above 在……之上
below 在……之下
additional 额外的
proceeding 进程
attempt 试图
translated 转化
against  在……之前
several 几个
notable 值得注意的
differences 差异
account 账户
entire 全部的
introduces 引入 介绍
latency 潜伏
impact 冲击 影响
emulated 计算机仿真 模仿
locally 在本地 在附近
modifier 调节器
movements 整个活动 动作
relative 相关的 相对的
appropriate 适当的
corner 角落
extra 额外的
command 命令
overall  全部的
issue  问题
outlined 标出
implicit 隐性的
scrapy 刮擦的























