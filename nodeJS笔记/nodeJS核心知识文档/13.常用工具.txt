一.util 模块
util 是一个Node.js 核心模块，提供常用函数的集合，用于弥补核心JavaScript 的功能 过于精简的不足。
1.util.inherits
util.inherits(constructor, superConstructor)是一个实现对象间原型继承 的函数。

简单使用案例
var util = require('util'); 
function Base() { 
    this.name = 'base'; 
    this.base = 1991; 
    this.sayHello = function() { 
    console.log('Hello ' + this.name); 
    }; 
} 
Base.prototype.showName = function() { 
    console.log(this.name);
}; 
function Sub() { 
    this.name = 'sub'; 
} 
util.inherits(Sub, Base); 
var objBase = new Base(); 
objBase.showName(); 
objBase.sayHello(); 
console.log(objBase); 
var objSub = new Sub(); 
objSub.showName(); 
//objSub.sayHello();  会报错
console.log(objSub); 

2.util.inspect
util.inspect(object,[showHidden],[depth],[colors])是一个将任意对象转换 为字符串的方法，通常用于调试和错误输出。
object 即要转换的对象。
showHidden 是一个可选参数，如果值为 true，将会输出更多隐藏信息。
depth 表示最大递归的层数，如果对象很复杂，你可以指定层数以控制输出信息的多 少。如果不指定depth，默认会递归2层，指定为 null 表示将不限递归层数完整遍历对象。 
color 值为 true，输出格式将会以ANSI 颜色编码，通常用于在终端显示更漂亮 的效果

简单使用案例

var util = require('util'); 
function Person() { 
    this.name = 'byvoid'; 
    this.toString = function() { 
    return this.name; 
    }; 
} 
var obj = new Person(); 
console.log(util.inspect(obj)); 
console.log(util.inspect(obj, true)); 

运行结果
Person { name: 'byvoid', toString: [Function] }
Person {
  name: 'byvoid',
  toString:
   { [Function]
     [length]: 0,
     [name]: '',
     [arguments]: null,
     [caller]: null,
     [prototype]: { [constructor]: [Circular] } } }

3.util.isArray(object)
如果给定的参数 "object" 是一个数组返回true，否则返回false。

var util = require('util');
util.isArray([]) // true
util.isArray(new Array) // true
util.isArray({}) // false

4.util.isRegExp(object)
如果给定的参数 "object" 是一个正则表达式返回true，否则返回false。

var util = require('util');
util.isRegExp(/some regexp/) // true
util.isRegExp(new RegExp('another regexp')) // true
util.isRegExp({}) // false

5.util.isDate(object)
如果给定的参数 "object" 是一个日期返回true，否则返回false。

var util = require('util');
util.isDate(new Date()) // true
util.isDate(Date()) // false (without 'new' returns a String)
util.isDate({}) // false

6.util.isError(object)
如果给定的参数 "object" 是一个错误对象返回true，否则返回false。

var util = require('util');
util.isError(new Error()) // true
util.isError(new TypeError()) // true
util.isError({ name: 'Error', message: 'an error occurred' }) // false














单词
inherit 继承
utility 公共事业 效用
depth 深度
trace 追踪
connect 链接
expires 到期
authorization 授权








