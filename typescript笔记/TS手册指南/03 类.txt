** 类的基本使用
class Greeter {
  greeting: string;
  constructor(private message: string) {
    this.greeting = message;
  }
  greet() {
    /* 
    在构造函数中使用 private message: string 定义为私有 公用
    在构造函数外部就可以直接使用this.的方式调用参数了
      */
    console.log(this.message); 
    return "Hello, " + this.greeting;
  }
}

let greeter = new Greeter("world");
console.log(greeter.greet());

** 继承
/**
  * 一个简单的实现类的继承的例子
  * 先定义了一个Animal类
  */
class Animal {
  move(distanceInMeters: number = 0) {
    console.log(`Animal moved ${distanceInMeters}m.`);
  }
}

/**
  * Dog是一个 派生类，它派生自 Animal 基类，通过 extends关键字。 派生类通常被称作 子类，基类通常被称作 超类。
  */

class Dog extends Animal {
  bark() {
    console.log('Woof! Woof!');
  }
}

const dog = new Dog();
dog.bark(); // 可以调用Dog类中的方法
dog.move(10); // 可以调用父类中的方法
dog.bark();


** 一个比较复杂的继承例子
class Animal {
  name: string;
  constructor(theName: string) { this.name = theName; }
  move(distanceInMeters: number = 0) {
    console.log(`${this.name} moved ${distanceInMeters}m.`);
  }
}

class Snake extends Animal {
  constructor(name: string) { super(name); } // 调用 super()，它会执行基类的构造函数 在这之前this是undefined
  move(distanceInMeters = 5) {
    console.log("Slithering...");
    super.move(distanceInMeters); // 调用父类中的实例方法
  }
}

class Horse extends Animal {
  constructor(name: string) { super(name); } // 调用 super()，它会执行基类的构造函数 在这之前this是undefined
  move(distanceInMeters = 45) {
    console.log("Galloping...");
    super.move(distanceInMeters); // 调用父类中的实例方法
  }
}

let sam = new Snake("Sammy the Python");
let tom: Animal = new Horse("Tommy the Palomino");

sam.move();
tom.move(34);

** public公共修饰符
/*
* TypeScript里，成员都默认为 public。
* 通过public自由的访问程序里定义的成员
*/
class Animal {
  public name: string;
  public constructor(theName: string) { this.name = theName; }
  public move(distanceInMeters: number) {
    console.log(`${this.name} moved ${distanceInMeters}m.`);
  }
}

** private私有修饰符
/*
* 当成员被标记成 private时，它就不能在声明它的类的外部访问
*/
class Animal {
    private name: string;
    constructor(theName: string) { this.name = theName; }
}

new Animal("Cat").name; // 错误: 'name' 是私有的.


** 类之间的兼容
class Animal {
  private name: string;
  constructor(theName: string) { this.name = theName; }
}

class Rhino extends Animal {
  constructor() { super("Rhino"); }
}

class Employee {
  private name: string;
  constructor(theName: string) { this.name = theName; }
}

let animal = new Animal("Goat");
let rhino = new Rhino();
let employee = new Employee("Bob");

animal = rhino; // 因为 Animal和 Rhino共享了来自 Animal里的私有成员定义 private name: string，因此它们是兼容的。 
animal = employee; // 错误: Animal 与 Employee 不兼容. 尽管 Employee里也有一个私有成员 name，但它明显不是 Animal里面定义的那个。

** protected受保护修饰符
/**
  * protected成员在派生类中仍然可以访问
  */

class Person {
  protected name: string;
  constructor(name: string) { this.name = name; }
}

class Employee extends Person {
  private department: string;

  constructor(name: string, department: string) {
    super(name)
    this.department = department;
  }

  public getElevatorPitch() {
    return `Hello, my name is ${this.name} and I work in ${this.department}.`; // this.name 可以访问 protected name
  }
}

let howard = new Employee("Howard", "Sales");
console.log(howard.getElevatorPitch());
console.log(howard.name); // 错误 只能在子类中被访问 不能在外部被访问


** 构造函数也可以被标记成 protected
/**
  * 构造函数也可以被标记成 protected。 这意味着这个类不能在包含它的类外被实例化，但是能被继承。
  */

class Person {
  protected name: string;
  protected constructor(theName: string) { this.name = theName; } // 构造函数也可以被标记成 protected
}

// Employee 能够继承 Person
class Employee extends Person {
  private department: string;

  constructor(name: string, department: string) {
    super(name);
    this.department = department;
  }

  public getElevatorPitch() {
    return `Hello, my name is ${this.name} and I work in ${this.department}.`;
  }
}

let howard = new Employee("Howard", "Sales");
let john = new Person("John"); // 错误: 'Person' 的构造函数是被保护的.

** readonly修饰符
/**
  * readonly关键字将属性设置为只读的。 只读属性必须在声明时或构造函数里被初始化
  */

class Octopus {
  readonly name: string;  // 设置为只读属性
  readonly numberOfLegs: number = 8; // 设置为只读属性
  constructor(theName: string) {
    this.name = theName;
  }
}
let dad = new Octopus("Man with the 8 strong legs");
dad.name = "Man with the 3-piece suit"; // 错误! name 是只读的.

** 参数属性
/**
  * 参数属性通过给构造函数参数前面添加一个访问限定符来声明。 
  * 使用 private限定一个参数属性会声明并初始化一个私有成员；
  * 对于 public和 protected来说也是一样。
  */

class Octopus {
  numberOfLegs: number = 8;
  constructor(private name: string) { // private限定一个参数属性会声明并初始化一个私有成员
  }

  getName() {
    console.log(this.name); // 可以直接用this访问name属性
  }
}

** 存取器
/**
  * TypeScript支持通过getters/setters来截取对对象成员的访问。
  * 只带有 get不带有 set的存取器自动被推断为 readonly
  */

class Employee {
  private _fullName: string;

  get fullName(): string {  // 使用get关键字 取值操作
    return this._fullName;
  }

  set fullName(newName: string) { // 使用set关键字 设置值操作
    this._fullName = newName;
  }
}

let employee = new Employee();
employee.fullName = "Bob Smith"; // 设置
console.log(employee.fullName); // 获取

** 静态属性
/**
  * 实例成员：仅当类被实例化的时候才会被初始化的属性
  * 创建类的静态成员：存在于类本身上面而不是类的实例  类的构造函数也是静态成员
  * 每个实例想要访问这个属性的时候，都要在 静态属性前面加上类名。
  */

class Grid {
  static origin = { x: 0, y: 0 }; // 设置类的静态方法
  calculateDistanceFromOrigin(point: { x: number; y: number; }) {
    let xDist = (point.x - Grid.origin.x); // 通过 类名来访问静态属性 Grid.origin.x
    let yDist = (point.y - Grid.origin.y); // 通过 类名来访问静态属性 Grid.origin.y
    return Math.sqrt(xDist * xDist + yDist * yDist) / this.scale;
  }
  constructor(public scale: number) { }
}

let grid1 = new Grid(1.0);  // 1x scale
let grid2 = new Grid(5.0);  // 5x scale

console.log(grid1.calculateDistanceFromOrigin({ x: 10, y: 10 }));
console.log(grid2.calculateDistanceFromOrigin({ x: 10, y: 10 }));

** 抽象类
/**
  * 抽象类做为其它派生类的基类使用。 它们一般不会直接被实例化。 不同于接口，抽象类可以包含成员的实现细节。
  * abstract关键字是用于定义抽象类和在抽象类内部定义抽象方法。
  * 抽象类中的抽象方法不包含具体实现并且必须在派生类中实现
  */

abstract class Department {  // 定义一个抽象类

  constructor(public name: string) {
  }

  printName(): void {
    console.log('Department name: ' + this.name);
  }

  abstract printMeeting(): void; // 必须在派生类中实现
}

class AccountingDepartment extends Department {  // 继承一个抽象类

  constructor() {
    super('Accounting and Auditing'); // 在派生类的构造函数中必须调用 super()
  }

  printMeeting(): void {  // 在子类中实现了抽象类中定义的方法
    console.log('The Accounting Department meets each Monday at 10am.');
  }

  generateReports(): void {
    console.log('Generating accounting reports...');
  }
}

let department: Department; // 允许创建一个对抽象类型的引用
department = new Department(); // 错误: 不能创建一个抽象类的实例
department = new AccountingDepartment(); // 允许对一个抽象子类进行实例化和赋值
department.printName();
department.printMeeting();
department.generateReports(); // 错误: 方法在声明的抽象类中不存在

** 实例的类型
/**
  * 当你在TypeScript里声明了一个类的时候，实际上同时声明了很多东西。 首先就是类的 实例的类型。
  * 创建了一个叫做 构造函数的值。 这个函数会在我们使用 new创建类实例的时候被调用
  */

class Greeter {
  greeting: string;
  constructor(private message: string) {
  }
  greet() {
    return "Hello, " + this.message;
  }
}

let greeter: Greeter; // 意思是 Greeter类的实例的类型是 Greeter
greeter = new Greeter("world");
console.log(greeter.greet());

/**
  * typeof Greeter 构造函数的类型
  * 这个类型包含了类的所有静态成员和构造函数。 
  */

class Greeter {
  static standardGreeting = "Hello, there";
  greeting: string;
  greet() {
    if (this.greeting) {
      return "Hello, " + this.greeting;
    }
    else {
      return Greeter.standardGreeting;
    }
  }
}

let greeter1: Greeter;
greeter1 = new Greeter();
console.log(greeter1.greet());  // 'Hello, there'

let greeterMaker: typeof Greeter = Greeter; // typeof Greeter，意思是取Greeter类的类型，而不是实例的类型。 "告诉我 Greeter标识符的类型"，也就是构造函数的类型。
greeterMaker.standardGreeting = "Hey there!"; // 修改 greeterMaker类的静态属性

let greeter2: Greeter = new greeterMaker();
console.log(greeter2.greet());


** 把类当做接口使用
class Point {
  x: number;
  y: number;
}

interface Point3d extends Point {
  z: number;
}

let point3d: Point3d = { x: 1, y: 2, z: 3 };




单词
snake 蛇
horse 马
abstract 摘要 抽象的





























