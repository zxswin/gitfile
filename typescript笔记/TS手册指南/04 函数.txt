** 为函数定义类型
function add(x: number, y: number): number {
  return x + y;
}

** 可选参数
function buildName(firstName: string, lastName?: string) {
  if (lastName)
    return firstName + " " + lastName;
  else
    return firstName;
}

let result1 = buildName("Bob");  // 正常使用
let result2 = buildName("Bob", "Adams", "Sr.");  // 报错 太多参数
let result3 = buildName("Bob", "Adams");  // 正常 参数刚刚好

** 默认参数
function buildName(firstName: string, lastName = "Smith") {
  return firstName + " " + lastName;
}

let result1 = buildName("Bob");                  // 能正确工作
let result2 = buildName("Bob", undefined);       // 仍然能正确工作 返回 "Bob Smith"
let result3 = buildName("Bob", "Adams", "Sr.");  // 报错 参数太多
let result4 = buildName("Bob", "Adams");         // 刚刚好

** 剩余参数
function buildName(firstName: string, ...restOfName: string[]) {
  return firstName + " " + restOfName.join(" ");
}

let employeeName = buildName("Joseph", "Samuel", "Lucas", "MacKinzie");
console.log(employeeName);


** this和箭头函数
箭头函数能保存函数创建时的 this值，而不是调用时的值： this是固定的

** 重载
let suits = ["hearts", "spades", "clubs", "diamonds"];

function pickCard(x: { suit: string; card: number; }[]): number; // 重载列表
function pickCard(x: number): { suit: string; card: number; }; // 重载列表
function pickCard(x): any {
  // Check to see if we're working with an object/array
  // if so, they gave us the deck and we'll pick the card
  if (typeof x == "object") {
    let pickedCard = Math.floor(Math.random() * x.length);
    return pickedCard;
  }
  // Otherwise just let them pick the card
  else if (typeof x == "number") {
    let pickedSuit = Math.floor(x / 13);
    return { suit: suits[pickedSuit], card: x % 13 };
  }
}

let myDeck = [{ suit: "diamonds", card: 2 }, { suit: "spades", card: 10 }, { suit: "hearts", card: 4 }];
let pickedCard1 = myDeck[pickCard(myDeck)];
console.log("card: " + pickedCard1.card + " of " + pickedCard1.suit);

let pickedCard2 = pickCard(15);
console.log("card: " + pickedCard2.card + " of " + pickedCard2.suit);

let pickedCard3 = pickCard('');  //报错 参数类型错误

** 编译器设置了--noImplicitThis标记。 
它会指出 this.suits[pickedSuit]里的this的类型为any。


annotate  注释
expect 期望 期待
crash 撞坏
deck 甲板
correctly 正确地






























