** 布尔值
let isDone: boolean = false;

** 数字
let decLiteral: number = 6;

** 字符串
let name: string = "bob";

** 数组
let list: number[] = [1, 2, 3];
let list: Array<number> = [1, 2, 3];

** 元组 Tuple
元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。
let x: [string, number];
x = ['hello', 10]; // OK
x = [10, 'hello']; // Error

** 枚举
使用枚举类型可以为一组数值赋予友好的名字。
enum Color {Red, Green, Blue} // 默认从 0 开始
let c: Color = Color.Green;  // 1

可以手动赋值
enum Color {Red = 1, Green = 2, Blue = 4}
let c: Color = Color.Green;

由枚举的值得到它的名字
enum Color {Red = 1, Green, Blue}
let colorName: string = Color[2];
console.log(colorName);  // 显示'Green'因为上面代码里它的值是2

** Any
可以表示任意类型
let notSure: any = 4;
notSure = "maybe a string instead";
notSure = false; // okay, definitely a boolean

** Void
表示没有任何类型
声明一个void类型的变量没有什么大用，因为你只能为它赋予undefined和null：
let unusable: void = undefined;

** Null 和 Undefined
默认情况下null和undefined是所有类型的子类型。
指定了--strictNullChecks标记，null和undefined只能赋值给void和它们各自。

** Never
never类型表示的是那些永不存在的值的类型
never类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型；
never类型是任何类型的子类型，也可以赋值给任何类型；
没有类型是never的子类型或可以赋值给never类型（除了never本身之外）。 即使 any也不可以赋值给never。
// 返回never的函数必须存在无法达到的终点
function error(message: string): never {
  throw new Error(message);
}

// 推断的返回值类型为never
function fail() {
  return error("Something failed");
}

// 返回never的函数必须存在无法达到的终点
function infiniteLoop(): never {
  while (true) {
  }
}

** Object
declare function create(o: object | null): void;
create({ prop: 0 }); // OK
create(null); // OK
create(42); // Error

** 类型断言
TypeScript会假设你，程序员，已经进行了必须的检查 编译阶段不进行检测

尖括号”语法：
let someValue: any = "this is a string";
let strLength: number = (<string>someValue).length;

as语法：
let someValue: any = "this is a string";
let strLength: number = (someValue as string).length;
