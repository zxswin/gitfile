一、元字符
[a-z]   匹配任何包含小写字母a-z的字符串
[A-Z]   匹配任何包含大写字母A-Z的字符串
[0-9]   匹配任何包含数字0-9的字符串
[abc]   匹配任何包含小写字母a,b,c的字符串
[^abc]  匹配任何不包含小写字母a,b,c的字符串
[a-zA-Z0-9_]  匹配任何包含a-zA-Z0-9和下划线的字符串。
\w  匹配任何包含a-zA-Z0-9和下划线的字符串(同上)
\W  匹配任何没有下划线和字母数字的字符串
\d  匹配任何数字字符，和[0-9]相同
\D  匹配任何非数字字符，和[^0-9]相同
\s  匹配任何空白字符
\S  匹配任何非空字符串
\b  匹配是否到达了单词边界
\B  匹配是否没有到达单词边界
\   匹配正则中的特殊字符。

//中括号是匹配任意一个
$mode='[a-z]';//模式匹配
$string='a';//字符串

//\b表示到达了单词的边界
$mode='/php\b/';
$string='phpp';//字符串，不匹配
$string='php is good';//字符串，匹配，它认为有空格已经到了边界了。

二、修饰符
i  完成不区分大小写的搜索
m  在匹配首内容或者尾内容的时候采用多行识别匹配
x  忽略正则中的空白
A  强制从头开始匹配
U  禁止贪婪匹配，只跟踪到最近的一个匹配符并结束。

//m表示匹配首尾的时候，如果遇到换行，也应该承认是结尾。
$mode='/php$/m';//规则模式
$string="This is php\n,is good";//字符串

//x表示忽略掉规则模式中的空白字符
$mode='/ph p/x'//规则模式
$string='php';//字符串   匹配的

//A表示必须从头开始匹配
$mode='/php/A';
$string='phpsdfsdfphp';

if(preg_match($mode,$string)){
   echo '匹配';
}else{
   echo '不匹配';
};





















































































































































