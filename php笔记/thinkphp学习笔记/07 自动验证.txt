一.验证规则
1.ThinkPHP模型提供了一种数据验证的方法,可以使用create创建的数据对象的时候进行自动验证。
2.静态定义:$_validate属性
3.动态 验证：validate()方法
//验证规则
array(
   array(验证字段1,验证规则,错误提示,[验证条件,附加规则,验证时间]),
   array(验证字段2,验证规则,错误提示,[验证条件,附加规则,验证时间]),
),

二.验证字段：
1.一般来说是表单的字段名,不一定必须和数据表匹配.因为有一些比如密码确认等辅助字段的存在。
三.系统内置的常规规则
1.require(字段必填)
2.email(邮箱格式)
3.url(url格式)
4.currency(货币)
5.number(正整数)
6.integer(整数)
7.double(浮点数)
8.zip(邮政编码)
9.english(英文)
注意：这些规则默认采用的是附加规则regex正则表达式验证,只不过是设定好的

四.验证条件:共三种
1.self::EXISTS_VALIDATE或0,表示存在字段就验证(默认);
2.self::MUST_VALIDATE或1,表示必须验证
3.self::VALUE_VALIDATE或2,表示值不为空的时候验证


  public function create(){
    	$user=D('User');
    	$data['user']='';
    	if($user->create($data)){
    		echo '所有字段验证成功';
    	}else{
    		var_dump($user->getError());
    	};
    }



五.静态定义
1.在模型类里预先定义好该模型的自动验证规则,就是静态定义。
//模型类定义验证规则
class UserModel extends Model{
   protected $_validate=array(
      //默认情况下用系统内置
      array('user','require','用户名不得为空'),
      //验证数据唯一性
      array('user','','用户名称已存在',2,'unique',1),
      //验证密码不得为空
       array('pass','require','密码不得为空'),
       //密码不得小于六位不得大于20位
        array('pass','6,20','密码不得小于六位不得大于20位',3,'length'),
        //内置验证email,合法的邮箱格式
        array('user','email','邮箱格式不合法!'),
        //内置验证url,验证网站是否合法
        array('user','url','URL路径不合法'),
        //内置验证currency,验证是否为货币
        array('user','currency','货币格式不正确!'),
        //内置验证zip,验证是否为六位整数邮政编码
        array('user','zip','邮政编码格式不正确!'),
        //内置验证number,验证是否为正整数
        array('user','number','正整数格式不正确'),
        //内置验证integer,验证是否为整数,正负数均可
        array('user','integer','整数格式不正确!'),
        //内置验证doouble,验证是否为浮点数,正负数均可
         array('user','double','整数格式不正确!'),
         //内置验证english,验证是否为纯英文
          array('user','english','不是纯英文!'),
   );
}

六.ThinkPHP还提供了附加规则,来提升自动验证的扩展性：
//附加规则regex,验证3-6位纯数字
array('user',/^\d{3,6$}/,'不是3-6位纯正数字',0,'regex'),
//附加规则equal,验证是否和指定值 相等
array('user','李羿慧','值不对等',0,'equal'),
//附加规则notequal,验证是否与指定的值不相等
array('user','李羿慧','值不对等',0,'notequal'),
//附加规则confirm,验证两条字段是否相同
array('user','name','两个用户名对比不同!',0,'confirm'),

//附加规则in,某个范围,可以是数组或逗号分割的字符串
array('user',array(1,2,3),'不在指定范围',0 'in'),
array('user','张三,李四,王五','不在指定范围',0,'in'),

//附加规则notin,某个范围,可以是数组或逗号分割的字符串
array('user',array(1,2,3),'不在指定范围',0 'notin'),
array('user','张三,李四,王五','不在指定范围',0,'notin'),

//附加规则length,验证长度或数字范围
array('user','3','不得小于3位',0,'lenght'),
array('user','3,5','不得小于3位,不得大于5位',0,'length'),

//附加规则between,验证某个范围,数字或逗号字符串
array('user',array(3,5),'必须是3-5之间的数字',0,'between'),
array('user','3,5','必须是3-5之间的数字',0,'between')

//附加规则expire,设置有效期范围,b必须是表单提交有效,可以是时间戳
array('user','2014-1-10,2015-10-10','时间已过期',0,'expire');

//附加规则ip_deny ,IP禁止列表
array('user','127.0.0.1','当前IP被禁止',0,'ip_deny'),
//附加规则ip_allow,IP允许列表
array('user','127.0.0.1','当前IP没有被允许',0,'ip_allow'),


七.回调方法
    protected $_validate=array(
    //附加规则function,函数验证
		array('user','checkLength','用户名必须在3-5位之间',0,'callback',3,array(3,5)),
	);
	
	protected function checkLength($str,$min,$max){
		preg_match_all('/./u', $str,$matches);
		$len=count($matches[0]);
		if($len<$min||$len>$max){
			return false;
		}else{
		    return true;
		};
	}
	
自动寻找原则函数

	  protected $_validate=array(
    //附加规则function,函数验证
		array('user','checkLength','用户名必须在3-5位之间',0,'function',3,array(3,5)),
	);
	//在Common文件夹下的Common文件夹建立function.php,会自动加载
	protected function checkLength($str,$min,$max){
		preg_match_all('/./u', $str,$matches);
		$len=count($matches[0]);
		if($len<$min||$len>$max){
			return false;
		}else{
		    return true;
		};
	}

八.多个提示
如果有多个字段包含错误.默认只显示一个错误.如果想显示全部错误,可以设置属性：
//批量验证
protected $patchValidate=true;

如果是直接POST过来的,直接使用create()方法即可。
//控制器create()方法自动调用验证
        $user=D('User');
    	$data['user']='123';
    	if($user->create($data)){
    		echo '所有字段验证成功';
    	}else{
    		var_dump($user->getError());
    	};


//返回json错误信息
$user=D('User');
$data['user']='l';
$data['email']='bbbb';
if($user->create($data)){
   echo '所有字段验证成功!';
}else{
   var_dump($user->getError());
   $this->ajaxReturn($user->getError());
}


//在M()模式下
        $rules=array(
    		array('user','require','用户名不得为空!'),
    	);
    	$user=M('User');
    	$data['user']='1';
    	if($user->validate($rules)->create($data)){
    		echo '所有字段验证成功!';
    	}else{
    		var_dump($user->getError());
    	}
























































