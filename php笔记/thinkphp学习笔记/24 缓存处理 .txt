一.数据缓存
数据缓存,快速缓存,查询缓存,静态缓存
1.一个专门处理缓存的类：Cache.class.php
  直接使用大S()方法即可.
  
2.系统目前支持的缓存类型包括:Apachenote,Apc,Db,Eacelerator,File,Memcache,Redis,Shmop,Sqlite,Wincache和Xcache
如果不初始化,默认使用File文件缓存。

3.初始化方法
S(array(
  'type'=>'memcache',
  'host'=>'127.0.0.1',
  'port'=>'11211',
  'prefix'=>'think',
  'expire'=>60
));

PS：如果不初始化,将使用默认配置使用
type的默认设置是C('DATA_CACHE_TYPE');//File;
prefix的默认设置为：C('DATA_CACHE_PREFIX');//无
expire的默认设置为:C('DATA_CACHE_TIME');//0
其他参数,如果没有设置将没有值。

//设置缓存
S('list',$list,30);
//读取缓存是否存在,不存在则设置
if(!$list=S('list')){
  $('list',$list,30);
}

二.快速缓存
如果不想设置有效存储,可以使用大F()方法的快速缓存
//使用F()方法的快速缓存
public function index(){
   if(!$list=F('list')){
      $user=D('User');
      $list=$user->select();
      F('list',$list,TEMP_PATH);
   }
   $this->assign('list',$list);
   $this->display();
}
//删除缓存
F('list',null);

三.查询缓存

1.对于及时性查询不高的数据查询,我们可以使用查询缓存功能来提高性能。
//查询SQL后缓存
$list=$user->cache(true)->select();
//指定缓存的Key会更加高效
$list=$user->cache('cache_user')->select();

//可以设置过期时间和其他缓存方式
$list=$user->cache('cache_user',10,'xcache')->select();
PS:如果没有安装xcache缓存,则会报错,而过期时间,必须关闭调试模式方可有效。
//获取缓存
var_dump(S('cache_user'));
//删除缓存
S('cache_user',null);


//SQL解析缓存
'DB_SQL_BUILD_CACHE'=>true;

四.静态缓存
1.第一次访问PHP时生成一个纯静态文件。第二次访问时,就直接访问这个静态文件,适合类似于CMS系统这种页面变化比较少的程序
//开启静态缓存
'HTML_CACHE_ON'=>true,
//全局缓存时间60秒
'HTML_CACHE_TIME'=>60,
//缓存的后缀
'HTML_FILE_SUFFIX'=>'.html',
//缓存规则
'HTML_CACHE_RULES'=>array(
   //控制器：方法  //模块_控制器_方法_ID,局部60秒
   'User:index'=>array('{:module}_{:controller}_{:action}_{id}',60),
);

3.除了上面的缓存规则,还有其他的缓存规格选择:
//方法名
'index'=>array('{id}',60),
//控制器    //User目录下的方法_ID
'User:'=>array('User/{:action}_{id}',60),
//控制器名:方法名
'User:index'=>array('{id}',60).

//将当前地址加密作为文件名
'*'=>array('{$_SERVER.REQUEST_URI|md5}'),



















