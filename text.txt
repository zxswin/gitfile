一.安装
1.在Windows上安装Git
“Git”->“Git Bash”，命令行窗口的东西，就说明Git安装成功！
二.输入用户名和邮箱
1.每台机器都必须自报家门
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"
2.注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置

三.git bash下操作文件及文件夹命令
1.切换目录：cd e:\fff
2.cd .. 回退到上一个目录

三.创建和使用git仓库
1.创建
$ git init
Initialized empty Git repository in /Users/michael/learngit/.git/
2.把文件放入git仓库
$ git add readme.txt  //告诉git把文件添加进仓库,没有消息就是最好的消息,可反复多次使用，添加多个文件
git commit告诉Git，把文件提交到仓库
$ git commit -m "wrote a readme file"

3.git log 查看历史修改记录
git log命令显示从最近到最远的提交日志
$ git log --pretty=oneline 日志在一行显示

4.回退到指定版本
$ git reset --hard HEAD^ //上一个版本就是HEAD^，上上一个版本就是HEAD^^，上100个版本写成HEAD~100。
$ git reset --hard 3628164  //commit id commit id是3628164  无需写全
$ git reflog  //记录你每一次的命令

四.工作区和暂存区
1.工作区：你电脑里能看到的目录
2.版本库：.git文件夹就是Git的版本库,包含stage(暂存区),自动创建的第一个分支master,指向master的一个指针HEAD
3.缓冲区：stage
4.把文件往git版本库里添加,可分为两步
git add 把文件修改添加到暂存区
git commit 提交更改,把暂存区的所有内容提交到当前分支
git add命令把要提交的修改放在暂存区(Stage),git commit可以把一次性暂存区的所有修改提交到分支
5.git status 查看文件状态

五.管理修改
1.Git跟踪并管理的是修改,而并非文件,创建一个新的文件也算是修改
2.如果不add到暂存区,那么就不会加入到commit
3.第一次修改->git add ->第二次修改 ->git add ->git commit

六.撤销修改
git checkout -- file 直接丢弃工作区的修改,原理是用版本库里的版本替换工作区的版本,可以一键还原,无论是修改还是删除
git reset HEAD file 丢弃暂存区里的内容

七.删除文件
1.删除文件,可直接删除 或 rm test.txt
2.git rm 从版本库中删除文件
3.git commit -m 'remove test.txt' 提交到版本库
4.删错的情况可以使用git checkout -- test.txt恢复

八.远程仓库
1.本地Git仓库和GitHub仓库之间传输是通过SSH加密的
2.本地创建SSH Key
cd ~/.ssh 用于查看电脑里有没有SSH Key  
$ ssh-keygen -t rsa -C "youremail@example.com" 创建SSH Key 一路回车无需设置密码 在用户主目录下生成 包含
id_rsa 是私钥
id_rsa.pub是公钥 可以放心告诉任何人
3.登录GitHub 添加Add SSH Key 在key文本框中粘贴id_ras.pub公钥 title可以任意填写
4.可以添加不同电脑的Key到Github

九.添加到远程库
1.登录Github创建一个新的仓库 Create a new repo  
2.运行：$ git remote add origin git@github.com:zxswin/learngit.git
3.$ git push -u origin master 把本地库的所有内容推送到远程库上
第一次推送要加上-u参数 把本地master分支内容推送到远程的master分支 关联本地和远程分支 以后推送和拉取就可以简化命令
4.本地提交试用命令 $ git push origin master
5.第一次试用Git或push命令连接GitHub的时候会得到一个警告,需要你确认GitHub的key指纹信息 输入yes即可

十.从远程库克隆
1.$ git clone git@github.com:michaelliao/gitskills.git


要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
2.Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。

十一.创建与合并分支
1.git用master指向最新的提交,再用HEAD 指向master 确定当前分支和当前分支的提交点
2.每次提交master分支都会向前移动一步
3.创建新分支dev时候,Git创建dev指针,指向master相同提交,再把HEAD指向dev,就表示当前分支在dev上
4.git创建分支很快,增加dev指针,修改HEAD指向,工作区的文件没有任何变化
5.新提交一次后,dev指针往前移动一步,而master指针不变
6.合并分支：直接把master指向dev的当前提交就完成了合并
7.删除分支就是把dev指针给删掉

8.git checkout -b dev  创建并切换到dev分支
相当于执行下面两条命令
$ git branch dev
$ git checkout dev
9.$ git branch 查看当前分支,当前分支前面会标一个*号
10.$ git checkout master 切换回master分支
11.$ git merge dev 合并分支
12.Fast-forward 快速合并 直接把master指向dev的当前提交
13.$ git branch -d dev 删除分支

十二.解决冲突
1.Git无法自动合并分支时,先解决冲突后提交,合并成功
2.git log --graph 查看分支合并图
3.$ git log --graph --pretty=oneline --abbrev-commit

十三.分支管理策略
1.分支合并加上--on-ff参数使用普通模式合并,合并后的历史有分支,能看出曾经做过的合并
2.fast forward 合并就看不出曾经做过的合并
3.$ git merge --no-ff -m "merge with no-ff" dev 合并分支并填写信息

十四.Bug分支
1.修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
2.当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
3.$ git stash 把当前工作现场储存起来
4.$ git stash list 查看工作现场存在哪里
5.git stash apply恢复，但是恢复后，stash内容并不删除
6.it stash drop来删除
7.git stash pop，恢复的同时把stash内容也删了

十五.Feature分支
1.开发一个新的功能,最好新建一个分支
2.若要丢弃一个没有合并过的分支,可以通过git branch -D <name> 强行删除

十六.多人协作
1.git remote：查看远程库的信息
2.查看远程库信息，使用git remote -v；如果没有推送权限就看不到push地址
3.本地新建的分支如果不推送到远程，对其他人就是不可见的；
4.从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
5.在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
6.建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
7.从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

8.git push origin master 推送到master分支
9.git push origin dev 推送红到dev分支
10.当第一次clone远程库的时候 默认情况下只能看到master分支

十七.标签管理

注意:
1.试用window新建的txt文件提交到远程会有乱码现象


单词
repository 仓库
pretty 漂亮的 聪明的
hard 硬的
stage 阶段 舞台
tracked 跟踪
remote 远程的
graph 图表
conflict 冲突
stash 藏匿
upstream 上游




网站：
git好的学习网站：
https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000
git国内镜像下载：
https://pan.baidu.com/s/1kU5OCOB#list/path=%2Fpub&parentPath=%2F



