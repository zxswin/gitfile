一.MySQL基础
1.MySQL由瑞典MySQL AB公司开发,目前属于Oracle公司。
2.MySQL是一个开源的关系型数据库管理系统
3.MySQL分为社区版和企业版。

二.安装MySQL
1.MySQL目录结构
    bin目录,存储可执行文件
    data目录,存储数据文件
    docs,文档
    include目录,存储包含的头文件
    lib目录,存储库文件
    share,错误消息和字符集文件
2.修改编码方式
    [mysql]
    default-character-set=utf8;
    [mysqld]
    character-set-server=utf8;
通过在安装目录下的my.ini文件来修改
3.启动和停止MySQL服务
    开启MySQL服务
    net start mysql
    关闭MySQL服务
    net stop mysql
4.MySQL的登录与退出
  mysql -v 查看mysql的版本
  mysql -uroot -p -P3306 -h127.0.0.1  连接指定的数据库 u用户名 p密码 P端口号 h主机名
  exit 退出
  quit 退出
  \q退出
  可以按上下箭头来搬运命令
  cls 清屏
5.修改MySQL提示符
  连接客户端时通过参数指定
  shell>mysql -uroot -proot --prompt  提示符
  连接上客户端后，通过prompt命令修改
  mysql>prompt 提示符
  \D 完整的日期
  \d 当前数据库
  \h 服务器名称
  \u 当前用户
6.MySQL常用命令以及语法规范
  SELECT VERSION();显示当前服务器的版本
  SELECT NOW();显示当前日期时间
  SELECT USER();显示当前用户

  MySQL语句规范
    关键字与函数名称全部大写
    数据库名称,表名称,字段名称全部小写
    SQL语句必须以分号结尾
7.操作数据库
  CREATE DATABASE t1; 创建简单的数据库
  SHOW DATABASES  显示所有的数据库
  CREATE DATABASE IF NOT EXISTS t1; 如果创建的数据库已经存在则产生警告
  SHOW WARNINGS;显示警告信息
  SHOW CREATE DATABASE t1;显示数据库编码方式
  CREATE DATABASE IF NOT EXISTS t2 CHARACTER SET utf8;创建并指定数据库的编码方式;
  ALTER DATABASE t2 CHARACTER SET = utf8;修改数据库的编码方式;
  DROP DATABASE t1;删除数据库
  DROP DATABASE IF EXISTS t1;如果数据库不存在则提出警告
  SHOW WARNINGS;显示警告信息;

8.内容回顾
MySQL默认的端口号是多少  3306
MySQL中的超级用户叫什么  root
创建数据库  CREATE DATABASE
修改数据库  ALTER DATABASE
删除数据库  DROP DATABASE

三.数据类型与操作数据表
1.MySQL数据类型之整型
数据类型值指列,存储过程参数，表达式和局部变量的数据特征，它决定数据的存储格式，代表不同的信息类型。
数据类型         存储范围                             字节
TINYINT          有符号值：-128到127                    1
                 无符号值：0到255

SMALLINT         有符号值：-32768到32768                2
                 无符号值：0到65535

MEDIUMINT        有符号值：-8388608到8388607            3
                 无符号值：0到16777215

INT              有符号值：-2147483646到2147483647      4
                 无符号值：0到4294967295

BIGINT            有符号值：-9223372036854775808 到     8
                            9223372036854775807
                   无符号值：0到18446744073709551615

2.MySQL数据库之浮点型
FLOAT[(M,D)]  -3.402823466E+38到-1.17549435iE-38、0和1.175494351E到3.402823466E+38
M是数字总位数,D是小数点后面的位数。如果M和D被省略，根据硬件的允许的限制来保存值。单精度浮点数精度到大约7位小数为。

DOUBLE[(M,D)]  -1.7976931348623157E+308 到-2.3350738585072014E-308，0和2.2250738585062014E-308到1.7976931348623157E+308
是浮点数的十倍

3.数据类型之日前时间型
列类型             存储需求
YEAR                  1
TIME                  3
DATA                  3
DATETIME              8
TIMESTAMP             4

4.数据类型之字符型
CHAR(M)               M个字节，0<=M<=255
VARCHAR(M)            L+1个字节,其中L<=M且0<=M<=65535
TINYTEXT              L+1个字节，其中L<2的8次方
TEXT                  L+2个字节,其中L<2的16次方
MEDIUMTEXT            L+3个字节,其中L<2的24次方
LONGTEXT              L+4个字节,其中L<2的32次方
ENUM('value1','value2',....)       1或2个字节,取决于枚举值得个数(最多65,535个值)
SET('value1','value2',.....)       1,2,3,4或者8个字节,取决于set成员的数目(最多64个成员)

5,创建数据表
打开数据库
USE数据库名称;//USE test
确定是否是打开了对应的数据库;//SELECT DATABASE();

CREATE TABLE [IF NOT EXISTS] table_name(
    column_name data_type, //字段名称和字段范围
)

CREATE TABLE tb1(
    -> username VARCHAR(20)//创建数据表字段
    -> );

CREATE TABLE tb2(  //创建第二个表格
    -> username VARCHAR(20),
    -> age TINYINT UNSIGNED,
    -> salary FLOAT(8,2) UNSIGNED
    -> );

6.mysql查看数据表
SHOW TABLES FROM mysql  //查看数据库里所有的表格
SHOW TABLES[FROM db_name]
[LINK 'pattern' | WHERE expr]

7.mysql查看数据表结构
SHOW COLUMNS FROM tb2;

8.MySQL记录的插入与查找
INSERT [INTO] tbl_name [(col_name,……)] VALUES(val,...);//[]表示可以省略的意思

INSERT tb2 VALUES('Tom',25,7863.25); //插入第一条记录
INSERT tb2 (username,salary) VALUES ('John',4500.69);  //插入第二条记录
SELECT * FORM tb2;//查看数据表，字段的过滤

9.MySQL的空值与非空
NULL,字段值可以为空
NOT NULL ,字段值禁止为空

CREATE TABLE tb2(  //创建一个数据表
   usernane VARCHAR(20) NOT NULL,
   age TINYINT UNSIGNED NULL
   );
SHOW COLUMNS FORM tb2;  //查询这个数据表字段

10.MySQL自动编号
自动编号,且必须与主键结合使用
默认情况下，起始值为1，每次的增量为1

CREATE TABLE tb4( //创建主键这自增
    -> id SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    -> username VARCHAR(30) NOT NULL
    -> );
SHOW COLUMNS FROM tb4; //查看表的字段
INSERT tb4(username) VALUES('Tom'); //插入表格数据
 SELECT * FROM tb4; //显示表格内容

主键约束
每张数据表只能存在一个主键
主键保证记录的唯一性
主键盘自动为NOT NULL

11.unique
唯一约束
唯一约束可以保证记录的唯一性
唯一约束的字段可以为空值(NULL)
每张数据表可以存在多个唯一约束

CREATE TABLE tb5( //创建数据表
    -> id SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    -> username VARCHAR(20) NOT NULL UNIQUE KEY,
    -> age TINYINT UNSIGNED
    -> );

SHOW COLUMNS FORM tb5;//显示数据表字段
INSERT tb5(username ,age)VALUES('Tom',22);//插入数据
SELECT * FROM tb5;//查询数据

12.默认约束
当插入记录时候，如果没有明确为字段赋值，则自动赋予默认值。
create table tb6(
    -> id smallint unsigned auto_increment primary key,
    -> username varchar(20) not null unique key,
    -> sex enum('1','2','3') default '3');

13.知识点总结
数据类型
  字符型
  整形
  浮点型
  日期时间型
数据表操作
  插入记录
  查找记录
记录操作
  创建数据表
  primary key 主键约束
  unique key 唯一约束
  default  默认约束
  not null 非空约束
  约束的使用

13.mysql 外键约束的要求解析
约束
   约束保证数据的完整性和一致性。
   约束分为表级约束和列级约束
   约束类型包括：
      NOT NULL 非空约束
      PRIMARY KEY 主键约束
      UNIQUE KEY 唯一约束
      DEFAULT 默认约束
      FOREIGN KEY 外键约束
FOREIGN KEY
  保持数据一致性，完整性。
  实现一对一或一对多关系。
外键约束的要求
  父表和子表必须使用相同的存储引擎，而且禁止使用临时表。
  数据表的存储引擎只能为InnoDB.
  外键列和参照列必须具备相似的数据类型。其中数字长度或是否有符号必须相同。
  而字符的长度则可以不同。
  外键列和参照列必须创建索引。如果外键列不存在索引的话（mysql不会自动创建索引），Mysql将自动创建索引(参照列)。

  create table provinces( //创建数据库表
      -> id smallint unsigned auto_increment primary key,
      -> pname varchar(20) not null
      -> );
  show create table provinces; //查看创建数据表所使用的引擎。

  //创建外键约束
  create table provinces(  //创建参照列
      -> id smallint unsigned auto_increment primary key,
      -> pname varchar(20) not null
      -> );
  create table users( //创建外键列,具备两个索引
      -> id smallint unsigned auto_increment primary key,
      -> username varchar(20),
      -> keyid smallint unsigned,
      -> foreign key(keyid) references provinces(id)
      -> );
show indexes from provinces;//显示索引
show indexes from provinces \G; //列表显示索引

14.外键约束的参照操作(表级约束与列级约束)
    1.CASCADE:从父表删除或更新且自动删除或更新子表中匹配的行
    2.SET NULL:从父表删除或更新行,并且设置子表中的外键列为NULL，如果使用该选项,必须保证字表列没有指定NOT NULL
    3.RESTRICT:拒绝对父表的删除或更新操作。
    4.NO ACTION:标准SQL的关键字，在MySQL中RESTRICT相同
//on delete cascade
create table user1 (
    -> id smallint unsigned primary key auto_increment,
    -> username varchar(10) not null,
    -> pid smallint unsigned,
    -> foreign key(pid) references  provinces(id) on delete cascade
    -> );
15.表级约束与列级约束
   对一个数据列建立的约束，称为列级约束
   对多个数据列建立的约束，称为表级约束
   列级约束既可以在列定义时声明，也可以在列定义后声明
   表级约束只能在列定义后声明
16.MySQL修改数据表-添加/删除列
   alter table user1 add age int not null;
   alter table user1 add lastname varchar(20) not null first;
   alter table user1 add truename varchar(10) not null default '111' after id;
   alter table user1 drop truename,drop lastname;
17.修改数据表 添加约束
create table user2(  //创建user2的数据表
    -> username varchar(10) not null,
    -> pid smallint unsigned);
show create table user2; //显示数据表user2的创建语句
alter table user2 add id smallint unsigned; //新增一个id字段
show columns from user2; //显示user2表的数据结构
alter table user2 add constraint PK_user2_id primary key(id); //把id设置为主键
alter table user2 add unique(username); //设置唯一约束
alter table user2 add foreign key(pid) references provinces(id); //设置外键约束
alter table user2 add age tinyint unsigned not null; //增加字段
alter table user2 alter age set default 15; //设置默认值
alter table user2 alter age drop default; //删除默认值
18.删除约束
alter table user2 drop primary key;  //删除主键,一个表有且只有一个主键
show columns from user2; //显示数据表结构

show indexes from user2 \G;  //列表形式显示数据结构
alter table user2 drop index username; //删除唯一索引
alter table user2 drop foreign key user2_ibfk_1; //删除外键约束
alter table user2 drop index pid; //删除唯一索引

19.修改数据表--修改列定义和更名数据表
本节知识点
    按功能划为：NOT NULL,PRIMARY KEY ,UNIQUE KEY,DEFAULT,FOREIGN KEY
    按照数据列的数目划分为：表级约束，列级约束
修改数据表
    针对字段的操作：添加/删除字段、修改列定义,修改列名称等
    针对约束的操作：添加/删除各种约束
    针对数据表的操作;数据表更名(两种方式)
alter table user2 modify id smallint unsigned not null first; //把ID字段移动到第一位
alter table user2 modify id tinyint unsigned not null; //修改字段类型
alter table user2 change pid p_id tinyint unsigned not null; //修改字段名称
alter table user2  rename users2; //修改表名称
rename table users2 to user2; //修改表名称

20.总结
约束
  功能
     NOT NULL 非空约束
     PRIMARY KEY 组件约束
     UNIQUE KEY 唯一约束
     DEFAULT 默认约束
     FOREIGN KEY 外键约束
  数据列的数目
     表级约束
     列级约束
  修改数据表
      针对字段的操作：添加、删除字段，修改列定义，修改列名称等
      针对约束的操作：添加、删除各种约束
      针对数据表的操作：数据表更名(两种方式)
21.回顾和概述

22.MySQL插入记录INSERT
 create table users3( //创建一个数据表
    -> id smallint unsigned primary key auto_increment,
    -> username varchar(20) not null,
    -> password varchar(32) not null,
    -> age tinyint unsigned not null default 10,
    -> sex boolean
    -> );
  insert users3 values(null,'tom','123',25,1); //数据表中插入数据
  insert users3 values(default,'tom','123',25,1); //null 和 default都可以实现主键的递增
  insert users3 values(default,'tom','123',3*7-5,1);  //可以用数学表达式
  insert users3 values(default,'tom','123',5,1),(null,'rose',md5('123'),default,0); //同时插入多条记录

23.插入记录insert set/select
insert users3 set username='Ben',password='456'; //第二种插入记录的语句
24.单表更新记录UPDATE
update users3 set age = age +5;  //表格中的所有数据在原有基础上加上5
update users3 set age =age -id, sex =0; //更改两个字段的数据
update users3 set age = age +10 where id %2 =0; //修改id为偶数的数据
25.单表删除记录delete
update users3 set age = age +10 where id %2 =0;  //删除表格中的数据
insert users3 values(null,'111','2222',33,null); //在表格中插入数据
26.查询表达式解析
每一个表示表示想要的一列,必须有至少一个。
多个列之间以英文逗号分隔。
星号(*)表示所有列。tbl_name.*可以表示命名表的所有列。
查询表达式可以使用[AS]alias_name为其赋予别名。
别名可用于GROUP BY，ORDER BY 或HAVING子句

select id from users3; //查询字段id列表
select username,id from users3; //查询多个字段列表
select users3.id,users3.username from users3; //指定表格字段查询
select id as userid,username as name from users3;  //指定别名查询

select id username from users3;//没有用逗号分隔字段会被认为是别名
27.where 语句进行条件查询
条件表达式
对记录进行过滤，如果没有指定where子句,则显示所有记录。
在where表达式中，可以使用mysql支持的函数或运算符。
28.group by 查询分组结果
select sex from users3 group by sex;
29.having分组条件
select sex from users3 group by sex having age >35; //错误的写法
select sex,age from users3 group by sex having age>35; //正确的书写方式
select sex from users3 group by sex having count(id)>=2; //使用聚合函数分组

30.order by 语句对查询结果排序
select * from users3 order by age,id desc; //排序语句
31.limit 语句限制查询数量(限制查询结果返回的数量)
select * from users3 limit 3,2; //从第四条记录开始查询，一共查两条
select * from users3 order by id desc limit 2,2; //排序返回结果集后再进行查询
create table users4( //创建一个test的表格
    -> id tinyint unsigned primary key auto_increment,
    -> username varchar(20)
    -> );
insert users4 (username) select username from users3 where id >2; //复制数据
31.小结
insert , update, delete , select;

二.子查询与链接
1.数据准备
set names gbk; //设置数据显示的编码格式，仅影响客户端，并不印象数据库;
2.MySQL 子查询简介
子查询(Subquery)是指出现在其他SQL语句内的SELECT子句
子查询指嵌套在查询内部,且必须始终出现在圆括号内。
子查询可以包含多个关键字或条件
   如distinct , group by , order by ,limit函数等。
   子查询的外部查询可以是：select , insert , update , set , do;
子查询返回值
    子查询可以返回标量,一行,一列或子查询
3.由比较运算符引发的子查询
使用比较运算符的子查询
=,>,<,>=,<=,<>,!=,<=>
select avg(goods_price) from tdb_goods;  //聚合函数平均值
select round(avg(goods_price),2) from tdb_goods; //平均值四舍五入
select goods_id,goods_name,goods_price from tdb_goods where goods_price =
(select round(avg(goods_price),2) from tdb_goods);  //通过查询进行查询

用any,some,all修饰的比较运算符
select goods_id,goods_name,goods_price from tdb_goods where good_price>all(
select goods_price from tdb_goods where goods_cate ='超极本');
4.由[NOT] IN/EXISTS引发的子查询
any 运算符与in等效
!=all或<>all运符与not in等效
使用[not]exists的子查询：如果子查询返回任何行,exists将返回true;否则为false.
6.使用insert……select 插入记录
create table if not exists tdb_goods_cates( //创建一个分类的数据表
    -> cate_id smallint unsigned primary key auto_increment,
    -> cate_name varchar(40) not null
    -> );
select goods_cate from tdb_goods group by goods_cate; //查看商品表的分类
insert tdb_goods_cates(cate_name) select gooods_cate from tdb_goods group by goods_cate;//复制其他表的信息

7.多表更新
update tdb_goods inner join tdb_goods_cates on goods_cate = cate_name
set goods_cate = cate_id;
8.多表更新之一步到位
创建数据表同时将查询结果写入到数据表
select brand_name from tdb_goods group by brand_name;//查看分组
create table tdb_goods_brands(  //创建数据表并插入记录
brand_id smallint unsigned primary key auto_increment,
brand_name varchar(40) not null)
select brand_name from tdb_goods group by brand_name;

update tdb_goods as g inner join tdb_goods_brands as b on g.brand_name = b.brand_name
set g.brand_name = b.brand_id;  //修改记录
//修改字段类型
alter table tdb_goods
change goods_cate cate_id smallint unsigned not null,
change brand_name brand_id smallint unsigned not null;
9.连接语法结构
MySQL在SELECT语句,多表更新，多表删除语句中支持join操作
10.内连接inner join
inner join 内连接：在mysql中join ccross join 和 inner join是等价的。
left [outer] join ,左外连接
right[outer] join ,右外连接
使用on关键字来设定连接条件,也可以使用where来代替。
通常使用on关键字来设定连接条件，使用where关键字进行结果集记录的过滤。
11.外连接outer join
左外连接：显示左表的全部记录及右表符号链接条件的记录
left join :左外连接
right join :右外连接
12.多表连接
select goods_id,goods_name,cate_name,brand_name,goods_price from tdb_goods as g
inner join tdb_goods_cates as c on g.cate_id = c.cate.id,
inner join tdb_goods_brands as b on g.brand_id = b.brand_id
13.关于连接的几点说明
a left join b join_condition
数据表b的结果集依赖数据表a
数据表a的结果集根据左连接条件依赖所有数据表(B表除外)。
左外连接条件决定如何检索数据表b(在没有指定where条件的情况下)。
如果数据表a的某条记录符号where条件,但是在数据表b不存在
符号链接条件的记录,将生成一个所有列为空的额外的b行。

如果使用内连接查找的记录在数据表中不存在,并且在where子句中尝试以下操作：col_namd is null时
如果col_name被定义为not null，MySQL在将找到符号链接执行的条件的记录后停止搜索更多行。

14.无限级分类表设计
alter database test character set = utf8; //修改数据库的编码方式
show character set; //查看不同的编码格式设置选项
alter database test character set utf8 collate utf8_general_ci;//修改数据库的编码方式
alter table tbtest character set utf8 COLLATE utf8_general_ci;//修改数据表的编码方式
ALTER TABLE `tdb_goods_types` CHANGE `type_name` `type_name` VARCHAR(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL;//修改字段的编码方式

 create table tdb_goods_types( //创建分类表
    -> type_id smallint unsigned primary key auto_increment,
    -> type_name varchar(20) not null,
    -> parent_id smallint unsigned not null default 0
    -> );
 drop table tdb_goods_types;//删除数据表格

自身连接：同一个数据表对其自身进行连接。
select s.type_id,s.type_name,p.type_name from tdb_goods_types as s
join tdb_goods_type as p
on s.parent_id = p.type_id;(左父右子)

（左子右父）
select p.type_id,p.type_name,s.type_name from tdbs_goods_types as p left join
tdb_goods_types as s on s.parent_id = p.type_id group by p.type_name;

select p.type_id,p.type_name,count(s.type_name) as type_num from tdb_goods_types as p left join
-> tdb_goods_types as s on s.parent_id = p.type_id group by p.type_name order by p.type_id;

15.多表删除
select goods_id,good_name from tdb_goods group by goods_id having count(goods_name)>2;
delete t1 from tdb_goods as t1 left join (
select goods_id,good_name from tdb_goods group by goods_id having count(goods_name)>2;) as t2
on t1.goods_name = t2.goods_name where t1.goods_id > t2.goods_id;

16.回顾和概述
mysql中的函数
字符函数
数值运算符与函数
比较运算符与函数
日期时间函数
信息函数
聚合函数
加密函数

17.mysql字符函数
concat() 字符连接
select concat(first_name,last_name) as fullname from tb1;
concat_ws() 使用指定的分隔符进行字符连接
select concat_ws('_','imooc','mysql','functions');
format()数字格式化
select format(12345.689,2);
lower() 转换成大写字母
upper() 转换为小写字母
left() 获取左侧字符
right() 获取右侧字符
select lower(left('MySQL',2));
length()   获取字符串长度
ltrim() 删除前导空格
rtrim() 删除后续空格
trim()  删除前导和后续空格
select trim(leading '?' from '??mysql???'); //删除前导字符
select trim(trailing '?' from '??MySQL???');//删除后面字符
select trim(both '?' from '??MySQL???');// 删除前后字符

substring() 字符串截取
select substring('mysql',1,2);//字符串截取,mysql中字符串是从1开始
[not] like 模式匹配
select * from test where first_name like '%1%%' escape '1';//匹配tom%;'1' 后面的%不是通配符
replace() 字符串替换
select replace('??My??sql???','?','');

%(百分号):代表任意个字符
_(下划线):代表任意一个字符

18.数值运算符与函数
ceil  进一取整
div   整数除法
floor  舍一取整
mod     取余数(取模)
power() 幂运算
round() 四舍五入
truncate() 数字截取

19.mysql 比较运算符和函数
[not] between...and... [不]在范围之内
[not] in()  [不]在列出值范围内
is[not] null  [不]为空

20：mysql 日期时间函数
now() 当前日期和时间
curdate() 当前日期
curtime()  当前时间
date_add() 日期变化
select date_add('2014-3-12',interval 365 day);
select date_add('2014-3-12',interval 1 year);
select date_add('2014-3-12',interval 1 week);
datediff()  日期差值
select datediff('2013-3-12','2014-2-12');
date_format() 日期格式化
select date_format('2014-3-2','%m%d%Y');

21.mysql 信息函数
connection_id()  连接id
datebase()  当前数据库
last_insert_id()  最后插入记录的id号
user()    当前用户
version() 版本信息
select version();

22.mysql 聚合函数(一个典型的特点是只有一个返回值)
avg() 平均值
count() 计数
max()  最大值
min() 最小值
sun() 求和
select sum(goods_price) as counts from tdb_goods;
23.mysql 加密函数
md5()  信息摘要算法
password() 密码算法
set password=password('123456'); //修改数据库密码用的

23.自定义函数
用户自定义函数(user-defined function ,UDF)是一种对MySQL扩展的途径,其用法与内置函数相同。
函数体由合法的sql语句构成
函数体可以是简单的select或insert语句
函数体如果为复合结构使用begin...end语句
复合结构可以包含声明,循环,控制结构;

24.mysql创建不带参数的自定义函数
select date_format(now(),'%Y年%m月%d日 %H点：%i分：%s秒');//2014年07月30日 01点：05分：08秒
create function f1() returns varchar(30)
 -> return date_format(now(),'%Y年%m月%d日 %H点:%i分:%s秒');//创建自定义日期格式化函数
25.mysql创建带有参数的自定义函数
drop function f2;//删除自定义f2函数

create function f2(num1 smallint unsigned,num2 smallint unsigned)
-> returns float(10,2) unsigned
-> return (num1 + num2)/2;  //创建带参数的自定义函数
select f2(3,4);//调用自定义函数

26.mysql创建具有复合结构函数体的自定义函数
delimiter // ;//mysql 命令结束符修改

create function adduser(username varchar(20))
returns int unsigned
begin
insert test(username) values (username);
return last_insert_id();
end
//    ---结束并执行(插入记录并返回id号)
函数体由合法的sql语句构成;
函数体可以是简单的select或insert语句
函数体如果为复合结构则使用begin……end语句
复合结构可以包含声明，循环，控制结构;

27.mysql存储过程简介
//mysql执行流程
sql命令   -  mysql引擎  - 语法正确 -编译为可识别命令 - 执行-执行结构返回给客户端

存储过程是sql语句和控制语句的编译集合,以2一个名称存储作为一个单元处理(比单条语句的执行效率要高)
存储过程的优点
增强sql语句的功能和灵活性
实现较快的执行数度
减少网络流量

28.mysql存储过程语法结构解析
函数体
    in,表示该参数的值必须在调用存储过程时指定
    out,表示该参数的值可以被存储过程改变,并且可以返回
    inout,表示该参数的调用时指定,并且可以被改变和返回
过程体
过程体由合法的sql语句构成;
过程体可以是任意sql语句
过程体如果为复合结构则使用begin...end语句;
复合结构可以包含声明,循环,控制结构;

29.mysql创建不带参数的存储过程
create procedure spl() select version();  //创建一个简单的存储过程
call spl();//调用存储过程
30.mysql创建带有in类型的参数的存储过程
//创建一个可以删除id信息的存储过程
delimiter //  //修改定界符
create procedure removeUserById(in id int unsigned)
    -> begin
    -> delete from users where id = id; //数据库会认为这是两个字段
    -> end
    -> //
delimiter ; //还原定界符
alter table users change username username varchar(20) character set utf8 collate utf8_general_ci;//修改字符编码
call  removeUserById(3);//执行存储过程函数
select * from users;//发现数据被清空了
drop procedure removeUserById;//删除存储过程

 //重新创建存储过程
 create procedure removeUserById(in p_id int unsigned)
    -> begin
    -> delete from users where id = p_id;
    -> end
    -> //
 call removeUserById(7); //执行存储过程并成功删除数据

31.mysql创建带有in和out类型参数的存储过程
delimiter //
//删除并返回结果
 create procedure removeUserAndRetrunUserNums(in p_id int unsigned,
    -> out userNums int unsigned)
    -> begin
    -> delete from users where id=p_id;
    -> select count(id) from users  into userNums;
    -> end
    -> //
delimiter ;//设置定界符
call removeUserAndRetrunUserNums(9,@nums); //调用存储过程
select @nums; //执行存储语句，nums为局部变量
set @i =7; //用户变量

32.MySQL创建带有多个out类型参数的存储过程
select row_count();//插入,修改,删除等影响的记录总数,没有返回-1;
update test set username = concat(username,'--imooc') where id<=2;
select row_count();

delimiter //
create procedure removeUserByAgeReturnInfos(in p_age smallint unsigned,
out deleteUser smallint unsigned,out usercounts smallint unsigned)
begin
delete from users where age = p_age;
select row_count() into deleteUsers;
select count(id) from users into userCounts;
end
//
delimiter ;
创建多个返回变量存储过程创建完毕
call removeUserByAgeAndReturnInfos(23,@a,@b);//执行存储过程
select @a,@b;//获取变量

33.mysql存储过程与自定义函数的区别
存储过程实现的功能要复杂一些;而函数的针对性更强
存储过程可以返回多个值;函数只能有一个返回值
存储过程一般独立的来执行;而函数可以作为其他SQL语句的组成部分类出现

34.mysql存储引擎简介
不同的存储引擎
MyISAM
InnoDB
Memory
CSV
Archive
35.相关知识点之并发处理
并发控制：当多个连接对记录进行修改时保证数据的一致性和完整性。
锁
共享锁(读锁)：
  在同一时间段内，多个用户可以读取同一个资源，读取过程中数据不会发生任何变化。
排他锁(写锁)：
  在任何时候只能有一个用户写入资源,当进行写锁时会阻塞其他的读锁或者写锁操作。
锁颗粒
表锁,是一种开销很小的锁策略。
行锁,是一种开销最大的锁策略。

36.相关知识点只事务处理
事务
    用于包装数据可的完整性
事务的特征
    原子性
    一致性
    隔离性
    持久性

37.mysql相关知识点之外键和索引
外键是保证数据一致性的策略
索引是对数据表中一列或多列的值进行排序的一种结构。

38.mysql各个存储引擎特定
索引;普通索引,唯一索引,全文索引,btree索引,hash索引
BlackHole:黑洞索引,写入的数据都会消失,一般用于做数据复制的中继。

MyISAM:适用于事务的处理并不多的情况
InnoDB;适用于事务处理比较多,需要有外键支持的情况

39.MySQL设置存储引擎
通过修改MySQL配置文件实现
default-storage-engine =engine
alter table tp1 engine = InnoDB;  //修改数据表引擎

MyISAM;存储限制可达256TB,支持索引,表级锁定,数据压缩。
InnoDB:存储限制为64TB,支持事务和索引,锁颗粒为行锁。

40.管理工具
PHPMyAdmin
Navicat
MySQL Workbench

41.mysql图形 管理工具之Navicat for MySQL




四.使用MySQL

不懂的单词：
tiny  微小的
unsigned  无符号
salary  薪水
increment 增量
primary  主要的
extra  额外的,特别的
unique 独特的，唯一的
cascade 级联 串联
constraint 约束
collate 校对 整理
character 性格 角色
general 一般的
trailing 尾随
escape 逃跑
truncate 截取
interval 间隔
delimiter 分隔符 定界符
procedure 程序
