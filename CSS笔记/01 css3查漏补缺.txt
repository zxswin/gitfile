/*CSS3新增知识点部分*/
一.border-image 属性
1.border-image-source	用于指定要用于绘制边框的图像的位置
2.border-image-slice：指定图像的边界向内偏移：
border-image-slice: number|%|fill;  fill保留图像的中间部分(number遵循上右下左)
3.border-image-width：指定图像边界的宽度
border-image-width: number|%|auto; auto如果指定了，宽度是相应的image slice的内在宽度或高度(number遵循上右下左)
4.border-image-outset用于指定在边框外部绘制 border-image-area的量
border-image-outset: length|number;  number代表相应的 border-width 的倍数
6.border-image-repeat 属性用于图像边界是否应重复（repeated）、拉伸（stretched）或铺满（rounded）。
border-image-repeat: stretch|repeat|round|initial|inherit;
    stretch	默认值。拉伸图像来填充区域	
    repeat	平铺（repeated）图像来填充区域。	
    round	类似 repeat 值。如果无法完整平铺所有图像，则对图像进行缩放以适应区域。	
    space	类似 repeat 值。如果无法完整平铺所有图像，扩展空间会分布在图像周围	
    initial	将此属性设置为默认值。
    inherit	从父元素中继承该属性。

示例代码：
    border: 15px solid transparent;
    padding: 20px;   
    border-image: url(border.png);
	border-image-width:15px;
    border-image-slice: 30;
    border-image-repeat: round;
    border-image-outset:8px 2px 8px 2px;

二.CSS3 border-radius 属性
border-top-left-radius: 2em 0.5em;
border-top-right-radius: 1em 3em;
border-bottom-right-radius: 4em 0.5em;
border-bottom-left-radius: 1em 3em;

示例代码：
border-radius:25px;

三.box-shadow 属性
语法：box-shadow: h-shadow v-shadow blur spread color inset;
    h-shadow	必需的。水平阴影的位置。允许负值
    v-shadow	必需的。垂直阴影的位置。允许负值
    blur	可选。模糊距离
    spread	可选。阴影的大小
    color	可选。阴影的颜色。在CSS颜色值寻找颜色值的完整列表
    inset	可选。从外层的阴影（开始时）改变阴影内侧阴影
示例代码：
box-shadow: 10px 10px 10px 5px #888888 inset;

四. background-image属性
示例代码：多个背景
    background-image: url(img_flwr.gif), url(paper.gif);
    background-position: right bottom, left top;
    background-repeat: no-repeat, repeat;
    background-size:80px 60px;|background-size:100% 100%;
    padding: 15px;
    或 background: url(img_flwr.gif) right bottom no-repeat, url(paper.gif) left top repeat;
五.background-Origin属性指定了背景图像的位置区域。
content-box, padding-box,和 border-box区域内可以放置背景图像。
示例代码：
background-origin:border-box;

六.background-clip属性
background-clip背景剪裁属性是从指定位置开始绘制。
示例代码：
background-clip: padding-box;

区别：
background-clip	规定背景的绘制区域。	3
background-origin	规定背景图片的定位区域。

七.线性渐变linear-gradient
background: linear-gradient(direction, color-stop1, color-stop2, ...);
background: linear-gradient(angle, color-stop1, color-stop2); //使用角度(逆时针)
示例代码：
    background: linear-gradient(red, blue);//简单的用法
    background: linear-gradient(to right, red , blue); //标准写法,从左到右渐变
    background: linear-gradient(to bottom right, red , blue);//标准写法,从左上角开始渐变
    background: linear-gradient(90deg, red, blue);  //带有角度的线性渐变
    background: linear-gradient(red 10%, green 85%, blue 90%); //使用多种渐变颜色节点
    background: linear-gradient(to right, red, orange, yellow, green, blue, indigo, violet); 
    background: linear-gradient(to right, rgba(255,0,0,0), rgba(255,0,0,1)); //使用透明
    background: repeating-linear-gradient(red, yellow 10%, green 20%);//重复的线性渐变
八.径向渐变radial-gradient
语法：background: radial-gradient(center, shape size, start-color, ..., last-color);
示例代码：
    background: radial-gradient(red, green, blue);//标准的语法
    background: radial-gradient(red 5%, green 15%, blue 60%); //颜色节点不均匀的线性渐变
    background: radial-gradient(circle, red, yellow, green); //默认是椭圆
    background: radial-gradient(80% 55%, closest-side,blue,green,yellow,black);//closest-side
    background: radial-gradient(60% 55%, farthest-side,blue,green,yellow,black); //farthest-side
    background: radial-gradient(60% 55%, closest-corner,blue,green,yellow,black); //closest-corner
    background: radial-gradient(60% 55%, farthest-corner,blue,green,yellow,black);  //farthest-corner
    background: repeating-radial-gradient(red, yellow 10%, green 15%); //重复渐变
九：文本阴影 text-shadow
示例代码：
    text-shadow: 5px 5px 5px #FF0000;
十.阴影盒子:box-shadow属性
示例代码:
    box-shadow: 10px 10px 5px #888888;
十一.文本溢出属性:Text Overflow属性
示例代码:
    white-space:nowrap; 
	width:12em; 
	overflow:hidden; 
	border:1px solid #000000;
    text-overflow:ellipsis;
    //text-overflow:clip;
十二.自动换行属性允许您强制文本换行 - 即使这意味着分裂它中间的一个字word-wrap(仅针对中文)
示例代码：
word-wrap:break-word;
十二.单词拆分换行word-break
word-break:keep-all;
word-break:break-all;
十三.text-align-last 属性
text-align-last 属性规定如何对齐文本的最后一行。
示例代码：多个背景
text-align-last: right;
auto|left|right|center|justify|start|end|initial|inherit
十四.使用自定义字体@font-face
示例代码：
@font-face{font-family: myFirstFont;src: url(sansation_light.woff);}
div{font-family:myFirstFont;}
十五.translate()方法，根据左(X轴)和顶部(Y轴)位置给定的参数，从当前元素位置移动。
示例代码：
transform:translate(50px,100px);
十六.rotate()方法，在一个给定度数顺时针旋转的元素。负值是允许的，这样是元素逆时针旋转。
示例代码：    
transform: rotate(30deg);
十七.scale()方法，该元素增加或减少的大小，取决于宽度（X轴）和高度（Y轴）的参数：
示例代码：
transform: scale(2,3);//转变宽度为原来的大小的2倍，和其原始大小3倍的高度。
十八.skew()包含两个参数值，分别表示X轴和Y轴倾斜的角度
示例代码：
transform:skew(30deg,20deg);
十九.matrix 方法有六个参数，包含旋转，缩放，移动（平移）和倾斜功能。
示例代码：
transform:matrix(0.866,0.5,-0.5,0.866,0,0);
二十.transform-origin 设置旋转元素的基点位置：
示例代码：
transform: rotate(45deg);
transform-origin:20% 40%;
二十一.transform-style 属性转换的子元素保留3D转换：
transform-style: flat|preserve-3d;
transform-style: preserve-3d;
使用此属性必须先使用 transform 属性.
示例代码：结构
<div id="div2">HELLO
   <div id="div3">YELLOW</div>
</div>
示例代码：css
#div2
{
	padding:50px;
	position: absolute;
	border: 1px solid black;
	background-color: red;
	transform: rotateY(60deg);
	transform-style: preserve-3d;
	-webkit-transform: rotateY(60deg); /* Safari and Chrome */
	-webkit-transform-style: preserve-3d; /* Safari and Chrome */
}

#div3
{
	padding:40px;
	position: absolute;
	border: 1px solid black;
	background-color: yellow;
	transform: rotateY(-60deg);
	-webkit-transform: rotateY(-60deg); /* Safari and Chrome */

}

二十二.perspective设置从何处查看一个元素的角度：
perspective: number|none;(第二个参数默认为0,表示不设置透视)
示例代码：结构
<div id="div1">
  <div id="div2">HELLO</div>
</div>
示例代码:CSS
#div1
{
    position: relative;
    height: 150px;
    width: 150px;
    margin: 50px;
    padding:10px;
    border: 1px solid black;
    perspective:150;
    -webkit-perspective:150; /* Safari and Chrome */
}
​
#div2
{
    padding:50px;
    position: absolute;
    border: 1px solid black;
    background-color: red;
    transform: rotateX(45deg);
    -webkit-transform: rotateX(45deg); /* Safari and Chrome */
}

二十三.perspective-origin设置一个3D元素的基数位置：
perspective-origin: x-axis y-axis;
示例代码：结构
<div id="div1">
  <div id="div2">HELLO</div>
</div>
示例代码：css
#div1
{
	position: relative;
	height: 150px;
	width: 150px;
	margin: 50px;
	padding:10px;
	border: 1px solid black;
	perspective:150;
	perspective-origin: 10% 10%;
	-webkit-perspective:150; /* Safari and Chrome */
	-webkit-perspective-origin: 60% 10%; /* Safari and Chrome */
}

#div2
{
	padding:50px;
	position: absolute;
	border: 1px solid black;
	background-color: red;
	transform: rotateX(45deg);
	-webkit-transform: rotateX(45deg); /* Safari and Chrome */
}

二十四.backface-visibility 属性定义当元素不面向屏幕时是否可见。
backface-visibility: visible|hidden;
示例代码：
#div1
{
	-webkit-backface-visibility:hidden;
	-moz-backface-visibility:hidden;
	-ms-backface-visibility:hidden;
}
#div2
{
	-webkit-backface-visibility:visible;
	-moz-backface-visibility:visible;
	-ms-backface-visibility:visible;
}

二十五.transition过渡是元素从一种样式逐渐改变为另一种的效果
transition: property duration timing-function delay;
示例代码：
div {
    width: 100px;
    height: 100px;
    background: red;
    -webkit-transition: width 2s, height 2s, -webkit-transform 2s; /* For Safari 3.1 to 6.0 */
    transition: width 2s, height 2s, transform 2s;
}

div:hover {
    width: 200px;
    height: 200px;
    -webkit-transform: rotate(180deg); /* Chrome, Safari, Opera */
    transform: rotate(180deg);
}

transition-property:width;
transition-duration:1s;
transition-timing-function:linear;
transition-delay:2s;
/* Safari */
-webkit-transition-property:width;//规定应用过渡的 CSS 属性的名称。
-webkit-transition-duration:1s;//定义过渡效果花费的时间。默认是 0。
-webkit-transition-timing-function:linear;//规定过渡效果的时间曲线。默认是 "ease"。
-webkit-transition-delay:2s;//规定过渡效果何时开始。默认是 0。

/*简写形式*/
transition:width 1s linear 2s;
二十六：@keyframes 动画
示例代码： animation: myfirst 5s linear 2s infinite alternate;
div
{
	width:100px;
	height:100px;
	background:red;
	position:relative;
	animation-name:myfirst;
	animation-duration:5s;
	animation-timing-function:linear;
	animation-delay:2s;
	animation-iteration-count:infinite;
	animation-direction:alternate;
	animation-play-state:running;
	/* Safari and Chrome: */
	-webkit-animation-name:myfirst;
	-webkit-animation-duration:5s;
	-webkit-animation-timing-function:linear;
	-webkit-animation-delay:2s;
	-webkit-animation-iteration-count:infinite;
	-webkit-animation-direction:alternate;
	-webkit-animation-play-state:running;
}

@keyframes myfirst
{
	0%   {background:red; left:0px; top:0px;}
	25%  {background:yellow; left:200px; top:0px;}
	50%  {background:blue; left:200px; top:200px;}
	75%  {background:green; left:0px; top:200px;}
	100% {background:red; left:0px; top:0px;}
}

@-webkit-keyframes myfirst /* Safari and Chrome */
{
	0%   {background:red; left:0px; top:0px;}
	25%  {background:yellow; left:200px; top:0px;}
	50%  {background:blue; left:200px; top:200px;}
	75%  {background:green; left:0px; top:200px;}
	100% {background:red; left:0px; top:0px;}
}

二十七：column可以将文本内容设计成像报纸一样的多列布局
column-count	指定元素应该被分割的列数。
column-fill	指定如何填充列
column-gap	指定列与列之间的间隙
column-rule	所有 column-rule-* 属性的简写
column-rule-color	指定两列间边框的颜色
column-rule-style	指定两列间边框的样式
column-rule-width	指定两列间边框的厚度
column-span	指定元素要跨越多少列
column-width	指定列的宽度
columns	设置 column-width 和 column-count 的简写
示例代码：
    -moz-column-count:3; /* Firefox */
    -webkit-column-count:3; /* Safari and Chrome */
    column-count:3;

    -moz-column-gap:40px; /* Firefox */
    -webkit-column-gap:40px; /* Safari and Chrome */
    column-gap:40px;

    -moz-column-rule:4px outset #ff00ff; /* Firefox */
    -webkit-column-rule:4px outset #ff00ff; /* Safari and Chrome */
    column-rule:4px outset #ff00ff;

二十八.新的用户界面特性
1.appearance
示例代码：
appearance:button;//使元素看起来像一个按钮
normal	正常呈现元素
icon	作为一个小图片的呈现元素
window	作为一个视口呈现元素
button	作为一个按钮，呈现元素
menu	作为一个用户选项设定呈现元素选择
field	作为一个输入字段呈现元素
2.box-sizing 属性允许你以某种方式定义某些元素，以适应指定区域
语法：box-sizing: content-box|border-box|inherit:
示例代码： box-sizing:border-box;
<div class="container">
<div class="box">这个 div 占据了左边的一半。.</div>
<div class="box">这个 div 占据了右边的一半。</div>
</div>
/*样式代码*/
div.container
{
	width:30em;
	border:1em solid;
}
div.box
{
	box-sizing:border-box;
	-moz-box-sizing:border-box; /* Firefox */
	width:50%;
	border:1em solid red;
	float:left;
}
3.outline-offset 设置轮廓框架在 border 边缘外的偏移
示例代码:
    border:2px solid black;
	outline:2px solid red;
	outline-offset:15px;
4.resize属性指定一个元素是否是由用户调整大小的。
none	用户无法调整元素的尺寸。
both	用户可调整元素的高度和宽度。
horizontal	用户可调整元素的宽度。
vertical	用户可调整元素的高度。
示例代码:
    resize:both;
    overflow:auto;

二十九:图片
1.响应式图片：
img {
    max-width: 100%;
    height: auto;
}
2.图片滤镜
.blur {-webkit-filter: blur(4px);filter: blur(4px);}
.brightness {-webkit-filter: brightness(250%);filter: brightness(250%);}
.contrast {-webkit-filter: contrast(180%);filter: contrast(180%);}
.grayscale {-webkit-filter: grayscale(100%);filter: grayscale(100%);}
.huerotate {-webkit-filter: hue-rotate(180deg);filter: hue-rotate(180deg);}
.invert {-webkit-filter: invert(100%);filter: invert(100%);}
.opacity {-webkit-filter: opacity(50%);filter: opacity(50%);}
.saturate {-webkit-filter: saturate(7); filter: saturate(7);}
.sepia {-webkit-filter: sepia(100%);filter: sepia(100%);}
.shadow {-webkit-filter: drop-shadow(8px 8px 10px green);filter: drop-shadow(8px 8px 10px green);}
3.波纹按钮制作
.button:active//按钮点击后
.button {
    position: relative;
    background-color: #4CAF50;
    border: none;
    font-size: 28px;
    color: #FFFFFF;
    padding: 20px;
    width: 200px;
    text-align: center;
    -webkit-transition-duration: 0.4s; /* Safari */
    transition-duration: 0.4s;
    text-decoration: none;
    overflow: hidden;
    cursor: pointer;
}

.button:after {
    content: "";
    background: #90EE90;
    display: block;
    position: absolute;
    padding-top: 300%;
    padding-left: 350%;
    margin-left: -20px!important;
    margin-top: -120%;
    opacity: 0;
    transition: all 0.8s
}

.button:active:after {
    padding: 0;
    margin: 0;
    opacity: 1;
    transition: 0s
}

三十.分页
ul.pagination li a:hover:not(.active) {background-color: #ddd;} //该样式不作用域active类的标签上
.pagination li:first-child a //获取第一个子节点
.pagination li:last-child a  //获取最后一个子节点
1.面包屑导航
ul.breadcrumb li+li:before { //面包屑导航的第一项不加斜线
    padding: 8px;
    color: black;
    content: "/\00a0";
}
三十一.框
1.box-sizing 属性可以设置 width 和 height 属性中包含了 padding(内边距) 和 border(边框)。
* { //可设置全局样式
    box-sizing: border-box;
} 
三十二.弹性盒子(Flex Box)
CSS3 弹性盒（ Flexible Box 或 flexbox），是一种当页面需要适应不同的屏幕大小以及设备类型时确保元素拥有恰当的行为的布局方式。
更加有效的方式来对一个容器中的子元素进行排列、对齐和分配空白空间。
1.弹性容器内包含了一个或多个弹性子元素。
代码示例一：
.flex-container {
    display: -webkit-flex;
    display: flex;   //设置为弹性盒子容器
    width: 400px;
    height: 250px;
    background-color: lightgrey;
}

.flex-item {
    background-color: cornflowerblue;
    width: 100px;
    height: 100px;
    margin: 10px;
}
</style>
</head>
<body>
 
<div class="flex-container">
  <div class="flex-item">flex item 1</div>
  <div class="flex-item">flex item 2</div>
  <div class="flex-item">flex item 3</div> 
</div>

示例代码二：direction: rtl
direction: rtl; //影响下面子元素的排列布局方向

2.flex-direction 顺序指定了弹性子元素在父容器中的位置。
flex-direction: row | row-reverse | column | column-reverse

row：横向从左到右排列（左对齐），默认的排列方式。
row-reverse：反转横向排列（右对齐，从后往前排，最后一项排在最前面。
column：纵向排列。
column-reverse：反转纵向排列，从后往前排，最后一项排在最上面。
示例代码一：
.flex-container { //在父容器中设置
    display: -webkit-flex;
    display: flex;
    -webkit-flex-direction: column-reverse;
    flex-direction: column-reverse;
    width: 400px;
    height: 250px;
    background-color: lightgrey;
}

3.内容对齐（justify-content）属性应用在弹性容器上，把弹性项沿着弹性容器的主轴线（main axis）对齐。
justify-content: flex-start | flex-end | center | space-between | space-around
flex-start：弹性盒子从头部对齐
flex-end：弹性盒子从尾部对齐
center：弹性盒子居中对齐
space-between：弹性盒子之间的间隙均等(除开头和结尾)
space-around：弹性盒子之间的间隙均等(包括开头和结尾)

4.align-items 设置或检索弹性盒子元素在侧轴（纵轴）方向上的对齐方式。
align-items: flex-start | flex-end | center | baseline | stretch
flex-start：起始位置对齐(垂直方向)
flex-end：结束位置对齐(垂直方向)
center：居中对齐(垂直方向)
baseline:基线对齐(垂直方向)
stretch:子元素拉伸
示例代码一：
.flex-container {
    display: -webkit-flex;
    display: flex;
    -webkit-align-items: center;
    align-items: center;
    width: 400px;
    height: 250px;
    background-color: lightgrey;
}

5.flex-wrap 属性用于指定弹性盒子的子元素换行方式。
flex-wrap: nowrap|wrap|wrap-reverse|initial|inherit;
nowrap - 默认， 弹性容器为单行。该情况下弹性子项可能会溢出容器。
wrap - 弹性容器为多行。该情况下弹性子项溢出的部分会被放置到新行，子项内部会发生断行
wrap-reverse -反转 wrap 排列。
示例代码一：
.flex-container {
    display: -webkit-flex;
    display: flex;
    -webkit-flex-wrap: nowrap;
    flex-wrap: nowrap;
    width: 300px;
    height: 250px;
    background-color: lightgrey;
}

6.align-content 属性用于修改 flex-wrap 属性的行为。类似于 align-items, 但它不是设置弹性子元素的对齐，而是设置各个行的对齐。
align-content: flex-start | flex-end | center | space-between | space-around | stretch
.flex-container {  //感觉这个排列在换行的情况下回比align-item好
    display: -webkit-flex;
    display: flex;
    -webkit-flex-wrap: wrap;
    flex-wrap: wrap;
    -webkit-align-content: space-around;
    align-content: space-around;
    width: 300px;
    height: 300px;
    background-color: lightgrey;
}

7.弹性子元素属性
排序 order: 
用整数值来定义排列顺序，数值小的排在前面。可以为负值。
示例代码一：
.flex-item {
    background-color: cornflowerblue;
    width: 100px;
    height: 100px;
    margin: 10px;
}
 
.first {
    -webkit-order: -1;
    order: -1;
}

对齐 margin
设置"margin"值为"auto"值，自动获取弹性容器中剩余的空间。所以设置垂直方向margin值为"auto"，可以使弹性子元素在弹性容器的两上轴方向都完全集中
示例代码一：
.flex-item {
    background-color: cornflowerblue;
    width: 75px;
    height: 75px;
    margin: 10px;
}
 
.flex-item:first-child {
    margin-right: auto;
}

完美居中案例：
.flex-container {
    display: -webkit-flex;
    display: flex;
    width: 400px;
    height: 250px;
    background-color: lightgrey;
}

.flex-item {
    background-color: cornflowerblue;
    width: 75px;
    height: 75px;
    margin: auto;
}
<div class="flex-container">
  <div class="flex-item">Perfect centering!</div>
</div>

8.align-self 属性用于设置弹性元素自身在侧轴（纵轴）方向上的对齐方式。
align-self: auto | flex-start | flex-end | center | baseline | stretch
auto：和拉伸差不多
flex-start：从起始位置开始
flex-end：从结束位置开始。
center：居中。
baseline：从基线位置开始。
stretch：拉伸。
示例代码一：
.item4 {
    -webkit-align-self: baseline;
    align-self: baseline;
}

9.flex 属性用于指定弹性子元素如何分配空间。
flex: auto | initial | none | inherit |  [ flex-grow ] || [ flex-shrink ] || [ flex-basis ]
各个值解析:
auto: 计算值为 1 1 auto
initial: 计算值为 0 1 auto
none：计算值为 0 0 auto
inherit：从父元素继承
[ flex-grow ]：定义弹性盒子元素的扩展比率。
[ flex-shrink ]：定义弹性盒子元素的收缩比率。
[ flex-basis ]：定义弹性盒子元素的默认基准值。

代码示例一：
.flex-container {
    display: -webkit-flex;
    display: flex;
    width: 400px;
    height: 250px;
    background-color: lightgrey;
}

.flex-item {
    background-color: cornflowerblue;
    margin: 10px;
}

.item1 {
    -webkit-flex: 3;
    flex: 3;
}

.item2 {
    -webkit-flex: 1;
    flex: 1;
}

.item3 {
    -webkit-flex: 1;
    flex: 1;
}

<div class="flex-container">
  <div class="flex-item item1">flex item 1</div>
  <div class="flex-item item2">flex item 2</div>
  <div class="flex-item item3">flex item 3</div>  
</div>

总结：
父容器：
display:flex | inline-flex将其定义为弹性容器。
flex-direction: row | row-reverse | column | column-reverse 顺序指定了弹性子元素在父容器中的位置。
justify-content: flex-start | flex-end | center | space-between | space-around 把弹性项沿着弹性容器的主轴线（main axis）对齐。
align-items: flex-start | flex-end | center | baseline | stretch 弹性盒子元素在侧轴（纵轴）方向上的对齐方式。
flex-wrap: nowrap|wrap|wrap-reverse|initial|inherit 用于指定弹性盒子的子元素换行方式。
align-content: flex-start | flex-end | center | space-between | space-around | stretch设置各个行的对齐。

子元素：
order: 用整数值来定义排列顺序，数值小的排在前面。可以为负值。
margin:设置弹性容器中剩余的空间
align-self: auto | flex-start | flex-end | center | baseline | stretch用于设置弹性元素自身在侧轴（纵轴）方向上的对齐方式。
flex: auto | initial | none | inherit |  [ flex-grow ] || [ flex-shrink ] || [ flex-basis ] 属性用于指定弹性子元素如何分配空间。

三十三.CSS3 多媒体查询
代码示例一：
@media screen and (min-width: 480px) { //屏幕可视窗口尺寸大于 480 像素的设备上修改背景颜色
    body {
        background-color: lightgreen;
    }
}  
代码示例二：
@media screen and (max-width: 699px) and (min-width: 520px) {
    ul li a {
        padding-left: 30px;
        background: url(email-icon.png) left center no-repeat;
    }
}

/*CSS参考手册部分*/
一.选择器
div>p  选择所有父级是 <div> 元素的 <p> 元素
div+p  选择所有紧接着<div>元素之后的<p>元素
[target],[target=-blank],[title~=flower],[lang|=en] 属性选择器
a:active 选择活动链接
a:hover	选择鼠标在链接上面时
input:focus	选择具有焦点的输入元素
p:first-letter	选择每一个<P>元素的第一个字母
p:first-line	选择每一个<P>元素的第一行
p:first-child	父级下的第一个p元素的样式
p:before	在每个<p>元素之前插入内容
p:after	在每个<p>元素之后插入内容
p:lang(it)	选择一个lang属性的起始值="it"的所有<p>元素
p~ul 选择p元素之后的每一个ul元素
a[src^="https"]	选择每一个src属性的值以"https"开头的元素
a[src$=".pdf"]	选择每一个src属性的值以".pdf"结尾的元素
a[src*="runoob"]	选择每一个src属性的值包含子字符串"runoob"的元素
p:first-of-type	选择每个p元素是其父级的第一个p元素
p:last-of-type	选择每个p元素是其父级的最后一个p元素
p:only-of-type	选择每个p元素是其父级的唯一p元素
p:only-child	选择每个p元素是其父级的唯一子元素
p:nth-child(2)	选择每个p元素是其父级的第二个子元素
p:nth-last-child(2)	选择每个p元素的是其父级的第二个子元素，从最后一个子项计数
p:nth-of-type(2)	选择每个p元素是其父级的第二个p元素
p:nth-last-of-type(2)	选择每个p元素的是其父级的第二个p元素，从最后一个子项计数
p:last-child	选择每个p元素是其父级的最后一个子级。
:root	选择文档的根元素
p:empty	选择每个没有任何子级的p元素（包括文本节点）
#news:target	选择当前活动的#news元素（包含该锚名称的点击的URL）
input:enabled	选择每一个已启用的输入元素
input:disabled	选择每一个禁用的输入元素
input:checked	选择每个选中的输入元素
:not(p)	选择每个并非p元素的元素
::selection	匹配元素中被用户选中或处于高亮状态的部分
:out-of-range	匹配值在指定区间之外的input元素
in-range	匹配值在指定区间之内的input元素
:read-write	用于匹配可读及可写的元素(针对不具有readonl属性元素)
:read-only	用于匹配设置 "readonly"（只读） 属性的元素
:optional	用于匹配可选的输入元素
:required	用于匹配设置了 "required" 属性的元素
:valid	用于匹配输入值为合法的元素
:invalid	用于匹配输入值为非法的元素
二.单位
1.相对长度
    em	它是描述相对于应用在当前元素的字体尺寸，所以它也是相对长度单位。一般浏览器字体大小默认为16px，则2em == 32px；
    ex	依赖于英文子母小 x 的高度
    ch	数字 0 的宽度
    rem	根元素（html）的 font-size
    vw	viewpoint width，视窗宽度，1vw=视窗宽度的1%
    vh	viewpoint height，视窗高度，1vh=视窗高度的1%
    vmin	vw和vh中较小的那个。
    vmax	vw和vh中较大的那个。
    %
2.相对单位
cm	厘米
mm	毫米
in	英寸 (1in = 96px = 2.54cm)	
px *	像素 (1px = 1/96th of 1in)	
pt	point，大约1/72英寸； (1pt = 1/72in)	
pc	pica，大约6pt，1/6英寸； (1pc = 12 pt)




单词
stretch  伸展
inherit  继承
initial  最初的
slice    划分
round    四舍五入 圆 铺满
spread   展开
origin   原点 起源
attachment 附件
gradient 梯度
linear 线性的
radial 径向的
indigo 靛蓝
violet 紫罗兰
ellipse  椭圆
circle  圆圈
closest 最近的
farthest 最远的
corner 拐角
ellipsis 省略
matrix 矩阵
perspective 透视 观点
preserve 保存
flat 平的
backface 背面
property 属性
timing 定时
transition  多度
alternate  交替
gap 缺口 间隙
appearance 外观
flex 弯曲
container 容器
axis 轴
around 围绕
wrap ：包 缠绕
basis：基础
speech:演讲
hex 十六进制
build 建造
render 提供









